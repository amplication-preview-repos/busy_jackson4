/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AngazaAccountCreateNestedManyWithoutCustomersInput } from "./AngazaAccountCreateNestedManyWithoutCustomersInput";

import {
  ValidateNested,
  IsOptional,
  IsString,
  IsInt,
  IsBoolean,
  IsEnum,
  IsNumber,
  IsDate,
} from "class-validator";

import { Type } from "class-transformer";
import { EnumCustomerCteRequiereFactura } from "./EnumCustomerCteRequiereFactura";
import { DocumentCreateNestedManyWithoutCustomersInput } from "./DocumentCreateNestedManyWithoutCustomersInput";
import { Decimal } from "decimal.js";
import { EnumCustomerEstatusCliente } from "./EnumCustomerEstatusCliente";
import { FinancedSaleCreateNestedManyWithoutCustomersInput } from "./FinancedSaleCreateNestedManyWithoutCustomersInput";
import { EnumCustomerGeneroCliente } from "./EnumCustomerGeneroCliente";
import { EnumCustomerIneDireccionActual } from "./EnumCustomerIneDireccionActual";
import { LoanedDeviceCreateNestedManyWithoutCustomersInput } from "./LoanedDeviceCreateNestedManyWithoutCustomersInput";
import { LockedDevBadCustomerCreateNestedManyWithoutCustomersInput } from "./LockedDevBadCustomerCreateNestedManyWithoutCustomersInput";
import { PersonalLoanCreateNestedManyWithoutCustomersInput } from "./PersonalLoanCreateNestedManyWithoutCustomersInput";
import { ProtectionCertActivationCreateNestedManyWithoutCustomersInput } from "./ProtectionCertActivationCreateNestedManyWithoutCustomersInput";
import { ProtectionCertCreateNestedManyWithoutCustomersInput } from "./ProtectionCertCreateNestedManyWithoutCustomersInput";
import { SupportTicketCreateNestedManyWithoutCustomersInput } from "./SupportTicketCreateNestedManyWithoutCustomersInput";
import { TransactionCreateNestedManyWithoutCustomersInput } from "./TransactionCreateNestedManyWithoutCustomersInput";
import { UserModelWhereUniqueInput } from "../../userModel/base/UserModelWhereUniqueInput";
import { WarehouseWhereUniqueInput } from "../../warehouse/base/WarehouseWhereUniqueInput";

@InputType()
class CustomerCreateInput {
  @ApiProperty({
    required: false,
    type: () => AngazaAccountCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => AngazaAccountCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => AngazaAccountCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  angazaAccounts?: AngazaAccountCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  antiguedadTrabajo?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  apellido1Cliente?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  apellido2Cliente?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  billingCfdiUseId?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  billingFiscalRegimeId?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ciudadActualCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ciudadCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ciudadRazSoc?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  clabePaycode?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  claveIdCliente?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  coloniaActualCte?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  coloniaCte!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  coloniaRazSoc?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  conekta?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  correoCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  correoRazSoc?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cpActualCte?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  cpCte!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cpRazSoc?: string | null;

  @ApiProperty({
    required: true,
    enum: EnumCustomerCteRequiereFactura,
  })
  @IsEnum(EnumCustomerCteRequiereFactura)
  @Field(() => EnumCustomerCteRequiereFactura)
  cte_requiere_factura!: "S" | "N";

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  curpCliente?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  direccionActualCte?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  direccionCte!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  direccionRazSoc?: string | null;

  @ApiProperty({
    required: false,
    type: () => DocumentCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => DocumentCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => DocumentCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  documents?: DocumentCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  domicilioTrabajo?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  edadCliente?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  enganchePromoLealtad?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  estadoRepActualCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  estadoRepCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  estadoRepRazSoc?: string | null;

  @ApiProperty({
    required: true,
    enum: EnumCustomerEstatusCliente,
  })
  @IsEnum(EnumCustomerEstatusCliente)
  @Field(() => EnumCustomerEstatusCliente)
  estatus_cliente!: "A" | "I";

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  estatusSeguroVida?: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaActivacionSeguro?: Date | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  fechaAltaCliente!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaRegistro?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaUltCambio?: Date | null;

  @ApiProperty({
    required: false,
    type: () => FinancedSaleCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => FinancedSaleCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => FinancedSaleCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  financedSales?: FinancedSaleCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  folioSeguroVida?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumCustomerGeneroCliente,
  })
  @IsEnum(EnumCustomerGeneroCliente)
  @IsOptional()
  @Field(() => EnumCustomerGeneroCliente, {
    nullable: true,
  })
  genero_cliente?: "F" | "M" | "O" | null;

  @ApiProperty({
    required: false,
    enum: EnumCustomerIneDireccionActual,
  })
  @IsEnum(EnumCustomerIneDireccionActual)
  @IsOptional()
  @Field(() => EnumCustomerIneDireccionActual, {
    nullable: true,
  })
  ine_direccion_actual?: "S" | "N" | null;

  @ApiProperty({
    required: false,
    type: () => LoanedDeviceCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => LoanedDeviceCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => LoanedDeviceCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  loanedDevices?: LoanedDeviceCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: () => LockedDevBadCustomerCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => LockedDevBadCustomerCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => LockedDevBadCustomerCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  lockedDevBadCustomers?: LockedDevBadCustomerCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lugarTrabajo?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  montoDisponibleEnganche?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nombreCompletoCliente?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nombresCliente?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nomRef1Cliente?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nomRef2Cliente?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nubariumScore?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  numExtCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  numExtRazSoc?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  numIntCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  numIntRazSoc?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  numTelCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  numTelFijoCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  numTelRazSoc?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  paisRazSoc?: string | null;

  @ApiProperty({
    required: false,
    type: () => PersonalLoanCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => PersonalLoanCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => PersonalLoanCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  personalLoans?: PersonalLoanCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: () => ProtectionCertActivationCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => ProtectionCertActivationCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => ProtectionCertActivationCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  protectionCertActivations?: ProtectionCertActivationCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: () => ProtectionCertCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => ProtectionCertCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => ProtectionCertCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  protectionCerts?: ProtectionCertCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  puestoTrabajo?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  qidAngaza?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  razonSocialCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rfcCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rfcPersonalCte?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rutaFirma?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  salarioMensualTrabajo?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  scoreMaxValue?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  secondaryTelephoneNumber?: string | null;

  @ApiProperty({
    required: false,
    type: () => SupportTicketCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => SupportTicketCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => SupportTicketCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  supportTickets?: SupportTicketCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  telRef1Cliente?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  telRef2Cliente?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  tipoIdCliente?: string | null;

  @ApiProperty({
    required: false,
    type: () => TransactionCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => TransactionCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => TransactionCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  transactions?: TransactionCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
    type: () => UserModelWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserModelWhereUniqueInput)
  @IsOptional()
  @Field(() => UserModelWhereUniqueInput, {
    nullable: true,
  })
  usersCustomersCreatedUserIdTousers?: UserModelWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => UserModelWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserModelWhereUniqueInput)
  @IsOptional()
  @Field(() => UserModelWhereUniqueInput, {
    nullable: true,
  })
  usersCustomersUpdatedUserIdTousers?: UserModelWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => WarehouseWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => WarehouseWhereUniqueInput)
  @IsOptional()
  @Field(() => WarehouseWhereUniqueInput, {
    nullable: true,
  })
  warehouses?: WarehouseWhereUniqueInput | null;
}

export { CustomerCreateInput as CustomerCreateInput };
