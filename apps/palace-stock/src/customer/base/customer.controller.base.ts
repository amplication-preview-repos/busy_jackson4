/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CustomerService } from "../customer.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CustomerCreateInput } from "./CustomerCreateInput";
import { Customer } from "./Customer";
import { CustomerFindManyArgs } from "./CustomerFindManyArgs";
import { CustomerWhereUniqueInput } from "./CustomerWhereUniqueInput";
import { CustomerUpdateInput } from "./CustomerUpdateInput";
import { AngazaAccountFindManyArgs } from "../../angazaAccount/base/AngazaAccountFindManyArgs";
import { AngazaAccount } from "../../angazaAccount/base/AngazaAccount";
import { AngazaAccountWhereUniqueInput } from "../../angazaAccount/base/AngazaAccountWhereUniqueInput";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { DocumentWhereUniqueInput } from "../../document/base/DocumentWhereUniqueInput";
import { FinancedSaleFindManyArgs } from "../../financedSale/base/FinancedSaleFindManyArgs";
import { FinancedSale } from "../../financedSale/base/FinancedSale";
import { FinancedSaleWhereUniqueInput } from "../../financedSale/base/FinancedSaleWhereUniqueInput";
import { LoanedDeviceFindManyArgs } from "../../loanedDevice/base/LoanedDeviceFindManyArgs";
import { LoanedDevice } from "../../loanedDevice/base/LoanedDevice";
import { LoanedDeviceWhereUniqueInput } from "../../loanedDevice/base/LoanedDeviceWhereUniqueInput";
import { LockedDevBadCustomerFindManyArgs } from "../../lockedDevBadCustomer/base/LockedDevBadCustomerFindManyArgs";
import { LockedDevBadCustomer } from "../../lockedDevBadCustomer/base/LockedDevBadCustomer";
import { LockedDevBadCustomerWhereUniqueInput } from "../../lockedDevBadCustomer/base/LockedDevBadCustomerWhereUniqueInput";
import { PersonalLoanFindManyArgs } from "../../personalLoan/base/PersonalLoanFindManyArgs";
import { PersonalLoan } from "../../personalLoan/base/PersonalLoan";
import { PersonalLoanWhereUniqueInput } from "../../personalLoan/base/PersonalLoanWhereUniqueInput";
import { ProtectionCertActivationFindManyArgs } from "../../protectionCertActivation/base/ProtectionCertActivationFindManyArgs";
import { ProtectionCertActivation } from "../../protectionCertActivation/base/ProtectionCertActivation";
import { ProtectionCertActivationWhereUniqueInput } from "../../protectionCertActivation/base/ProtectionCertActivationWhereUniqueInput";
import { ProtectionCertFindManyArgs } from "../../protectionCert/base/ProtectionCertFindManyArgs";
import { ProtectionCert } from "../../protectionCert/base/ProtectionCert";
import { ProtectionCertWhereUniqueInput } from "../../protectionCert/base/ProtectionCertWhereUniqueInput";
import { SupportTicketFindManyArgs } from "../../supportTicket/base/SupportTicketFindManyArgs";
import { SupportTicket } from "../../supportTicket/base/SupportTicket";
import { SupportTicketWhereUniqueInput } from "../../supportTicket/base/SupportTicketWhereUniqueInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CustomerControllerBase {
  constructor(
    protected readonly service: CustomerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Customer })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCustomer(
    @common.Body() data: CustomerCreateInput
  ): Promise<Customer> {
    return await this.service.createCustomer({
      data: {
        ...data,

        usersCustomersCreatedUserIdTousers:
          data.usersCustomersCreatedUserIdTousers
            ? {
                connect: data.usersCustomersCreatedUserIdTousers,
              }
            : undefined,

        usersCustomersUpdatedUserIdTousers:
          data.usersCustomersUpdatedUserIdTousers
            ? {
                connect: data.usersCustomersUpdatedUserIdTousers,
              }
            : undefined,

        warehouses: data.warehouses
          ? {
              connect: data.warehouses,
            }
          : undefined,
      },
      select: {
        antiguedadTrabajo: true,
        apellido1Cliente: true,
        apellido2Cliente: true,
        billingCfdiUseId: true,
        billingFiscalRegimeId: true,
        ciudadActualCte: true,
        ciudadCte: true,
        ciudadRazSoc: true,
        clabePaycode: true,
        claveIdCliente: true,
        coloniaActualCte: true,
        coloniaCte: true,
        coloniaRazSoc: true,
        conekta: true,
        correoCte: true,
        correoRazSoc: true,
        cpActualCte: true,
        cpCte: true,
        cpRazSoc: true,
        cte_requiere_factura: true,
        curpCliente: true,
        direccionActualCte: true,
        direccionCte: true,
        direccionRazSoc: true,
        domicilioTrabajo: true,
        edadCliente: true,
        enganchePromoLealtad: true,
        estadoRepActualCte: true,
        estadoRepCte: true,
        estadoRepRazSoc: true,
        estatus_cliente: true,
        estatusSeguroVida: true,
        fechaActivacionSeguro: true,
        fechaAltaCliente: true,
        fechaRegistro: true,
        fechaUltCambio: true,
        folioSeguroVida: true,
        genero_cliente: true,
        id: true,
        ine_direccion_actual: true,
        lugarTrabajo: true,
        montoDisponibleEnganche: true,
        nombreCompletoCliente: true,
        nombresCliente: true,
        nomRef1Cliente: true,
        nomRef2Cliente: true,
        nubariumScore: true,
        numExtCte: true,
        numExtRazSoc: true,
        numIntCte: true,
        numIntRazSoc: true,
        numTelCte: true,
        numTelFijoCte: true,
        numTelRazSoc: true,
        paisRazSoc: true,
        puestoTrabajo: true,
        qidAngaza: true,
        razonSocialCte: true,
        rfcCte: true,
        rfcPersonalCte: true,
        rutaFirma: true,
        salarioMensualTrabajo: true,
        scoreMaxValue: true,
        secondaryTelephoneNumber: true,
        telRef1Cliente: true,
        telRef2Cliente: true,
        tipoIdCliente: true,

        usersCustomersCreatedUserIdTousers: {
          select: {
            id: true,
          },
        },

        usersCustomersUpdatedUserIdTousers: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Customer] })
  @ApiNestedQuery(CustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customers(@common.Req() request: Request): Promise<Customer[]> {
    const args = plainToClass(CustomerFindManyArgs, request.query);
    return this.service.customers({
      ...args,
      select: {
        antiguedadTrabajo: true,
        apellido1Cliente: true,
        apellido2Cliente: true,
        billingCfdiUseId: true,
        billingFiscalRegimeId: true,
        ciudadActualCte: true,
        ciudadCte: true,
        ciudadRazSoc: true,
        clabePaycode: true,
        claveIdCliente: true,
        coloniaActualCte: true,
        coloniaCte: true,
        coloniaRazSoc: true,
        conekta: true,
        correoCte: true,
        correoRazSoc: true,
        cpActualCte: true,
        cpCte: true,
        cpRazSoc: true,
        cte_requiere_factura: true,
        curpCliente: true,
        direccionActualCte: true,
        direccionCte: true,
        direccionRazSoc: true,
        domicilioTrabajo: true,
        edadCliente: true,
        enganchePromoLealtad: true,
        estadoRepActualCte: true,
        estadoRepCte: true,
        estadoRepRazSoc: true,
        estatus_cliente: true,
        estatusSeguroVida: true,
        fechaActivacionSeguro: true,
        fechaAltaCliente: true,
        fechaRegistro: true,
        fechaUltCambio: true,
        folioSeguroVida: true,
        genero_cliente: true,
        id: true,
        ine_direccion_actual: true,
        lugarTrabajo: true,
        montoDisponibleEnganche: true,
        nombreCompletoCliente: true,
        nombresCliente: true,
        nomRef1Cliente: true,
        nomRef2Cliente: true,
        nubariumScore: true,
        numExtCte: true,
        numExtRazSoc: true,
        numIntCte: true,
        numIntRazSoc: true,
        numTelCte: true,
        numTelFijoCte: true,
        numTelRazSoc: true,
        paisRazSoc: true,
        puestoTrabajo: true,
        qidAngaza: true,
        razonSocialCte: true,
        rfcCte: true,
        rfcPersonalCte: true,
        rutaFirma: true,
        salarioMensualTrabajo: true,
        scoreMaxValue: true,
        secondaryTelephoneNumber: true,
        telRef1Cliente: true,
        telRef2Cliente: true,
        tipoIdCliente: true,

        usersCustomersCreatedUserIdTousers: {
          select: {
            id: true,
          },
        },

        usersCustomersUpdatedUserIdTousers: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customer(
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Customer | null> {
    const result = await this.service.customer({
      where: params,
      select: {
        antiguedadTrabajo: true,
        apellido1Cliente: true,
        apellido2Cliente: true,
        billingCfdiUseId: true,
        billingFiscalRegimeId: true,
        ciudadActualCte: true,
        ciudadCte: true,
        ciudadRazSoc: true,
        clabePaycode: true,
        claveIdCliente: true,
        coloniaActualCte: true,
        coloniaCte: true,
        coloniaRazSoc: true,
        conekta: true,
        correoCte: true,
        correoRazSoc: true,
        cpActualCte: true,
        cpCte: true,
        cpRazSoc: true,
        cte_requiere_factura: true,
        curpCliente: true,
        direccionActualCte: true,
        direccionCte: true,
        direccionRazSoc: true,
        domicilioTrabajo: true,
        edadCliente: true,
        enganchePromoLealtad: true,
        estadoRepActualCte: true,
        estadoRepCte: true,
        estadoRepRazSoc: true,
        estatus_cliente: true,
        estatusSeguroVida: true,
        fechaActivacionSeguro: true,
        fechaAltaCliente: true,
        fechaRegistro: true,
        fechaUltCambio: true,
        folioSeguroVida: true,
        genero_cliente: true,
        id: true,
        ine_direccion_actual: true,
        lugarTrabajo: true,
        montoDisponibleEnganche: true,
        nombreCompletoCliente: true,
        nombresCliente: true,
        nomRef1Cliente: true,
        nomRef2Cliente: true,
        nubariumScore: true,
        numExtCte: true,
        numExtRazSoc: true,
        numIntCte: true,
        numIntRazSoc: true,
        numTelCte: true,
        numTelFijoCte: true,
        numTelRazSoc: true,
        paisRazSoc: true,
        puestoTrabajo: true,
        qidAngaza: true,
        razonSocialCte: true,
        rfcCte: true,
        rfcPersonalCte: true,
        rutaFirma: true,
        salarioMensualTrabajo: true,
        scoreMaxValue: true,
        secondaryTelephoneNumber: true,
        telRef1Cliente: true,
        telRef2Cliente: true,
        tipoIdCliente: true,

        usersCustomersCreatedUserIdTousers: {
          select: {
            id: true,
          },
        },

        usersCustomersUpdatedUserIdTousers: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCustomer(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() data: CustomerUpdateInput
  ): Promise<Customer | null> {
    try {
      return await this.service.updateCustomer({
        where: params,
        data: {
          ...data,

          usersCustomersCreatedUserIdTousers:
            data.usersCustomersCreatedUserIdTousers
              ? {
                  connect: data.usersCustomersCreatedUserIdTousers,
                }
              : undefined,

          usersCustomersUpdatedUserIdTousers:
            data.usersCustomersUpdatedUserIdTousers
              ? {
                  connect: data.usersCustomersUpdatedUserIdTousers,
                }
              : undefined,

          warehouses: data.warehouses
            ? {
                connect: data.warehouses,
              }
            : undefined,
        },
        select: {
          antiguedadTrabajo: true,
          apellido1Cliente: true,
          apellido2Cliente: true,
          billingCfdiUseId: true,
          billingFiscalRegimeId: true,
          ciudadActualCte: true,
          ciudadCte: true,
          ciudadRazSoc: true,
          clabePaycode: true,
          claveIdCliente: true,
          coloniaActualCte: true,
          coloniaCte: true,
          coloniaRazSoc: true,
          conekta: true,
          correoCte: true,
          correoRazSoc: true,
          cpActualCte: true,
          cpCte: true,
          cpRazSoc: true,
          cte_requiere_factura: true,
          curpCliente: true,
          direccionActualCte: true,
          direccionCte: true,
          direccionRazSoc: true,
          domicilioTrabajo: true,
          edadCliente: true,
          enganchePromoLealtad: true,
          estadoRepActualCte: true,
          estadoRepCte: true,
          estadoRepRazSoc: true,
          estatus_cliente: true,
          estatusSeguroVida: true,
          fechaActivacionSeguro: true,
          fechaAltaCliente: true,
          fechaRegistro: true,
          fechaUltCambio: true,
          folioSeguroVida: true,
          genero_cliente: true,
          id: true,
          ine_direccion_actual: true,
          lugarTrabajo: true,
          montoDisponibleEnganche: true,
          nombreCompletoCliente: true,
          nombresCliente: true,
          nomRef1Cliente: true,
          nomRef2Cliente: true,
          nubariumScore: true,
          numExtCte: true,
          numExtRazSoc: true,
          numIntCte: true,
          numIntRazSoc: true,
          numTelCte: true,
          numTelFijoCte: true,
          numTelRazSoc: true,
          paisRazSoc: true,
          puestoTrabajo: true,
          qidAngaza: true,
          razonSocialCte: true,
          rfcCte: true,
          rfcPersonalCte: true,
          rutaFirma: true,
          salarioMensualTrabajo: true,
          scoreMaxValue: true,
          secondaryTelephoneNumber: true,
          telRef1Cliente: true,
          telRef2Cliente: true,
          tipoIdCliente: true,

          usersCustomersCreatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          usersCustomersUpdatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCustomer(
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Customer | null> {
    try {
      return await this.service.deleteCustomer({
        where: params,
        select: {
          antiguedadTrabajo: true,
          apellido1Cliente: true,
          apellido2Cliente: true,
          billingCfdiUseId: true,
          billingFiscalRegimeId: true,
          ciudadActualCte: true,
          ciudadCte: true,
          ciudadRazSoc: true,
          clabePaycode: true,
          claveIdCliente: true,
          coloniaActualCte: true,
          coloniaCte: true,
          coloniaRazSoc: true,
          conekta: true,
          correoCte: true,
          correoRazSoc: true,
          cpActualCte: true,
          cpCte: true,
          cpRazSoc: true,
          cte_requiere_factura: true,
          curpCliente: true,
          direccionActualCte: true,
          direccionCte: true,
          direccionRazSoc: true,
          domicilioTrabajo: true,
          edadCliente: true,
          enganchePromoLealtad: true,
          estadoRepActualCte: true,
          estadoRepCte: true,
          estadoRepRazSoc: true,
          estatus_cliente: true,
          estatusSeguroVida: true,
          fechaActivacionSeguro: true,
          fechaAltaCliente: true,
          fechaRegistro: true,
          fechaUltCambio: true,
          folioSeguroVida: true,
          genero_cliente: true,
          id: true,
          ine_direccion_actual: true,
          lugarTrabajo: true,
          montoDisponibleEnganche: true,
          nombreCompletoCliente: true,
          nombresCliente: true,
          nomRef1Cliente: true,
          nomRef2Cliente: true,
          nubariumScore: true,
          numExtCte: true,
          numExtRazSoc: true,
          numIntCte: true,
          numIntRazSoc: true,
          numTelCte: true,
          numTelFijoCte: true,
          numTelRazSoc: true,
          paisRazSoc: true,
          puestoTrabajo: true,
          qidAngaza: true,
          razonSocialCte: true,
          rfcCte: true,
          rfcPersonalCte: true,
          rutaFirma: true,
          salarioMensualTrabajo: true,
          scoreMaxValue: true,
          secondaryTelephoneNumber: true,
          telRef1Cliente: true,
          telRef2Cliente: true,
          tipoIdCliente: true,

          usersCustomersCreatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          usersCustomersUpdatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/angazaAccounts")
  @ApiNestedQuery(AngazaAccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AngazaAccount",
    action: "read",
    possession: "any",
  })
  async findAngazaAccounts(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<AngazaAccount[]> {
    const query = plainToClass(AngazaAccountFindManyArgs, request.query);
    const results = await this.service.findAngazaAccounts(params.id, {
      ...query,
      select: {
        billingModel: true,
        clientQids: true,
        cumulativeDaysDisabled: true,
        currency: true,

        customers: {
          select: {
            id: true,
          },
        },

        downPayment: true,
        downPaymentDaysIncluded: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        fullPrice: true,
        id: true,
        latestPaymentWhen: true,
        minimumPayment: true,
        paymentAmountPerPeriod: true,
        paymentDueDate: true,
        paymentPeriodInDays: true,
        qid: true,
        registrationDate: true,
        status: true,
        totalPaid: true,
        unitNumber: true,
        uuidIdentifier: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/angazaAccounts")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectAngazaAccounts(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: AngazaAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      angazaAccounts: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/angazaAccounts")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateAngazaAccounts(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: AngazaAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      angazaAccounts: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/angazaAccounts")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectAngazaAccounts(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: AngazaAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      angazaAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/documents")
  @ApiNestedQuery(DocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async findDocuments(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Document[]> {
    const query = plainToClass(DocumentFindManyArgs, request.query);
    const results = await this.service.findDocuments(params.id, {
      ...query,
      select: {
        collaborators: {
          select: {
            id: true,
          },
        },

        customers: {
          select: {
            id: true,
          },
        },

        direccion: true,
        documentTypeId: true,
        estatus: true,
        fechaHoraCarga: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        idCertProtecAct: true,
        idFicha: true,
        nombreOriginal: true,
        numTicket: true,

        payments: {
          select: {
            id: true,
          },
        },

        validado: true,
        validatedAt: true,
        validationUserId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectDocuments(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateDocuments(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectDocuments(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/financedSales")
  @ApiNestedQuery(FinancedSaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "read",
    possession: "any",
  })
  async findFinancedSales(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<FinancedSale[]> {
    const query = plainToClass(FinancedSaleFindManyArgs, request.query);
    const results = await this.service.findFinancedSales(params.id, {
      ...query,
      select: {
        adminAppUnregistered: true,
        ajusteEnganche: true,
        ajustePrecioVenta: true,
        altaPagoRecurrente: true,
        authUserId: true,
        bloqueo_confirmado: true,
        bloqueo_permanente: true,
        bloqueoProgramado: true,
        canceledUserId: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        codigoArtIccid: true,
        codigoBloqueo: true,
        comentarios: true,
        comentariosDescuento: true,
        createdUserId: true,
        customerPagoRecurrente: true,

        customers: {
          select: {
            id: true,
          },
        },

        desctoPagoOportuno: true,
        descuentoEspecial: true,
        enganche: true,
        estatus_bloqueo: true,
        estatus_equipo: true,
        estatus_financ: true,
        fechaCancelo: true,
        fechaFinanc: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        forceAdvancePayments: true,
        formaPago: true,
        habilitar_pago_recurrente: true,
        iccid: true,
        id: true,
        idPlan: true,
        imei: true,
        imei2: true,
        ine_verificado: true,

        items: {
          select: {
            id: true,
          },
        },

        mensajeAdvertenciaVenta: true,
        montoDescuento: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        msisdn: true,
        numPagos: true,
        numPagosDescuento: true,
        paymentAgreement: true,
        plazo: true,
        porcentajeDescEng: true,
        precioLista: true,
        promotionId: true,

        protectionCerts: {
          select: {
            id: true,
          },
        },

        proveedorBloqueo: true,
        proveedorPagoRecurrente: true,
        rangoFinalDescuento: true,
        rangoInicialDescuento: true,
        rutaArchivoDescuento: true,
        rutaFirma: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefono: true,
        timeToReconfigNextlock: true,
        tokenPagoRecurrente: true,
        ubicacion: true,
        ubicacionLatitud: true,
        ubicacionLongitud: true,
        ubicacionMapa: true,
        ultimaConexion: true,
        ultimaLocacion: true,
        unenrolledUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/financedSales")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectFinancedSales(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: FinancedSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSales: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/financedSales")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateFinancedSales(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: FinancedSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSales: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/financedSales")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectFinancedSales(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: FinancedSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSales: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/loanedDevices")
  @ApiNestedQuery(LoanedDeviceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LoanedDevice",
    action: "read",
    possession: "any",
  })
  async findLoanedDevices(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<LoanedDevice[]> {
    const query = plainToClass(LoanedDeviceFindManyArgs, request.query);
    const results = await this.service.findLoanedDevices(params.id, {
      ...query,
      select: {
        codigoSerie: true,
        comentarios: true,

        customers: {
          select: {
            id: true,
          },
        },

        fechaDevolucion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        loanStatus: true,

        usersLoanedDevicesCreatedUserIdTousers: {
          select: {
            id: true,
          },
        },

        usersLoanedDevicesReturnedUserIdTousers: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/loanedDevices")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectLoanedDevices(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevices: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/loanedDevices")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateLoanedDevices(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevices: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/loanedDevices")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectLoanedDevices(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevices: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/lockedDevBadCustomers")
  @ApiNestedQuery(LockedDevBadCustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LockedDevBadCustomer",
    action: "read",
    possession: "any",
  })
  async findLockedDevBadCustomers(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<LockedDevBadCustomer[]> {
    const query = plainToClass(LockedDevBadCustomerFindManyArgs, request.query);
    const results = await this.service.findLockedDevBadCustomers(params.id, {
      ...query,
      select: {
        codigoBloqueoMoroso: true,

        customers: {
          select: {
            id: true,
          },
        },

        deviceId: true,
        fechaBloqueado: true,
        fechaDesbloqueado: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        forced_status: true,
        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lockedDevBadCustomers")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectLockedDevBadCustomers(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: LockedDevBadCustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lockedDevBadCustomers: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lockedDevBadCustomers")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateLockedDevBadCustomers(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: LockedDevBadCustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lockedDevBadCustomers: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lockedDevBadCustomers")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectLockedDevBadCustomers(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: LockedDevBadCustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lockedDevBadCustomers: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/personalLoans")
  @ApiNestedQuery(PersonalLoanFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "read",
    possession: "any",
  })
  async findPersonalLoans(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<PersonalLoan[]> {
    const query = plainToClass(PersonalLoanFindManyArgs, request.query);
    const results = await this.service.findPersonalLoans(params.id, {
      ...query,
      select: {
        codigoBloqueo: true,
        comentarios: true,

        customers: {
          select: {
            id: true,
          },
        },

        deletedUserId: true,
        desctoPagoOportuno: true,
        estatus_prestamo: true,
        fechaCancelacion: true,
        fechaPrestamo: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        id: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        plazo: true,
        requestedUserId: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefonoEnvioToken: true,
        tipo_plazo: true,
        tokenEnviado: true,
        updatedAt: true,
        updatedUserId: true,

        users: {
          select: {
            id: true,
          },
        },

        validaciones_saltadas: true,
        vendorLock: true,

        warehouses: {
          select: {
            id: true,
          },
        },

        warningAlert: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/personalLoans")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectPersonalLoans(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: PersonalLoanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalLoans: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/personalLoans")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updatePersonalLoans(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: PersonalLoanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalLoans: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/personalLoans")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectPersonalLoans(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: PersonalLoanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalLoans: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/protectionCertActivations")
  @ApiNestedQuery(ProtectionCertActivationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProtectionCertActivation",
    action: "read",
    possession: "any",
  })
  async findProtectionCertActivations(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<ProtectionCertActivation[]> {
    const query = plainToClass(
      ProtectionCertActivationFindManyArgs,
      request.query
    );
    const results = await this.service.findProtectionCertActivations(
      params.id,
      {
        ...query,
        select: {
          authUserId: true,
          codigoBloqueo: true,
          codigoBloqueoApartado: true,
          codigoSerie: true,
          codigoSerieApartado: true,
          comentario: true,

          customers: {
            select: {
              id: true,
            },
          },

          deductPaymentId: true,
          devolvioEquipoApartado: true,
          diffPaymentId: true,
          estatus_bloqueo_apartado: true,
          estatusCertProtec: true,
          estatusReparacion: true,
          fechaAct: true,
          fechaAutorizacion: true,
          fechaUltActualizacion: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          id: true,
          idUsrAct: true,

          itemsProtectionCertActivationsItemIdToitems: {
            select: {
              id: true,
            },
          },

          itemsProtectionCertActivationsReservedItemIdToitems: {
            select: {
              id: true,
            },
          },

          pagoDeducible: true,
          pagoDiferencia: true,
          precioLista: true,
          precioListaApartado: true,
          precioReparacion: true,
          protectionCertId: true,
          tipoProtec: true,
          updatedUserId: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/protectionCertActivations")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectProtectionCertActivations(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivations: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/protectionCertActivations")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateProtectionCertActivations(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivations: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/protectionCertActivations")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectProtectionCertActivations(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivations: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/protectionCerts")
  @ApiNestedQuery(ProtectionCertFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProtectionCert",
    action: "read",
    possession: "any",
  })
  async findProtectionCerts(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<ProtectionCert[]> {
    const query = plainToClass(ProtectionCertFindManyArgs, request.query);
    const results = await this.service.findProtectionCerts(params.id, {
      ...query,
      select: {
        certFolio: true,
        createdUserId: true,

        customers: {
          select: {
            id: true,
          },
        },

        estatus_cert: true,
        fechaCancelacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        motivoCancelacion: true,
        protec_activadas: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/protectionCerts")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectProtectionCerts(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: ProtectionCertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCerts: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/protectionCerts")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateProtectionCerts(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: ProtectionCertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCerts: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/protectionCerts")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectProtectionCerts(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: ProtectionCertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCerts: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/supportTickets")
  @ApiNestedQuery(SupportTicketFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SupportTicket",
    action: "read",
    possession: "any",
  })
  async findSupportTickets(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<SupportTicket[]> {
    const query = plainToClass(SupportTicketFindManyArgs, request.query);
    const results = await this.service.findSupportTickets(params.id, {
      ...query,
      select: {
        codigoBloqueo: true,
        comentarios: true,
        createdUserId: true,

        customers: {
          select: {
            id: true,
          },
        },

        estatus: true,
        fechaCierre: true,
        fechaRegistro: true,
        id: true,
        informacionAdicional: true,
        subtipo: true,
        tipo: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/supportTickets")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectSupportTickets(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: SupportTicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportTickets: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/supportTickets")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateSupportTickets(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: SupportTicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportTickets: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/supportTickets")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectSupportTickets(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: SupportTicketWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportTickets: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        branchOfficesTransactionsAnotherBranchOfficeIdTobranchOffices: {
          select: {
            id: true,
          },
        },

        branchOfficesTransactionsBranchOfficeIdTobranchOffices: {
          select: {
            id: true,
          },
        },

        comentariosTrans: true,
        createdUserId: true,

        customers: {
          select: {
            id: true,
          },
        },

        estatus_trans: true,
        fechaTrans: true,
        folioDocto: true,
        horaTrans: true,
        id: true,
        move_type: true,
        numProveedor: true,
        transacFolio: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectTransactions(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateTransactions(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectTransactions(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
