/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Customer as PrismaCustomer,
  AngazaAccount as PrismaAngazaAccount,
  Document as PrismaDocument,
  FinancedSale as PrismaFinancedSale,
  LoanedDevice as PrismaLoanedDevice,
  LockedDevBadCustomer as PrismaLockedDevBadCustomer,
  PersonalLoan as PrismaPersonalLoan,
  ProtectionCertActivation as PrismaProtectionCertActivation,
  ProtectionCert as PrismaProtectionCert,
  SupportTicket as PrismaSupportTicket,
  Transaction as PrismaTransaction,
  UserModel as PrismaUserModel,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class CustomerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CustomerCountArgs, "select">): Promise<number> {
    return this.prisma.customer.count(args);
  }

  async customers<T extends Prisma.CustomerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerFindManyArgs>
  ): Promise<PrismaCustomer[]> {
    return this.prisma.customer.findMany<Prisma.CustomerFindManyArgs>(args);
  }
  async customer<T extends Prisma.CustomerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerFindUniqueArgs>
  ): Promise<PrismaCustomer | null> {
    return this.prisma.customer.findUnique(args);
  }
  async createCustomer<T extends Prisma.CustomerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerCreateArgs>
  ): Promise<PrismaCustomer> {
    return this.prisma.customer.create<T>(args);
  }
  async updateCustomer<T extends Prisma.CustomerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerUpdateArgs>
  ): Promise<PrismaCustomer> {
    return this.prisma.customer.update<T>(args);
  }
  async deleteCustomer<T extends Prisma.CustomerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerDeleteArgs>
  ): Promise<PrismaCustomer> {
    return this.prisma.customer.delete(args);
  }

  async findAngazaAccounts(
    parentId: number,
    args: Prisma.AngazaAccountFindManyArgs
  ): Promise<PrismaAngazaAccount[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .angazaAccounts(args);
  }

  async findDocuments(
    parentId: number,
    args: Prisma.DocumentFindManyArgs
  ): Promise<PrismaDocument[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .documents(args);
  }

  async findFinancedSales(
    parentId: number,
    args: Prisma.FinancedSaleFindManyArgs
  ): Promise<PrismaFinancedSale[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .financedSales(args);
  }

  async findLoanedDevices(
    parentId: number,
    args: Prisma.LoanedDeviceFindManyArgs
  ): Promise<PrismaLoanedDevice[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .loanedDevices(args);
  }

  async findLockedDevBadCustomers(
    parentId: number,
    args: Prisma.LockedDevBadCustomerFindManyArgs
  ): Promise<PrismaLockedDevBadCustomer[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .lockedDevBadCustomers(args);
  }

  async findPersonalLoans(
    parentId: number,
    args: Prisma.PersonalLoanFindManyArgs
  ): Promise<PrismaPersonalLoan[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .personalLoans(args);
  }

  async findProtectionCertActivations(
    parentId: number,
    args: Prisma.ProtectionCertActivationFindManyArgs
  ): Promise<PrismaProtectionCertActivation[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .protectionCertActivations(args);
  }

  async findProtectionCerts(
    parentId: number,
    args: Prisma.ProtectionCertFindManyArgs
  ): Promise<PrismaProtectionCert[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .protectionCerts(args);
  }

  async findSupportTickets(
    parentId: number,
    args: Prisma.SupportTicketFindManyArgs
  ): Promise<PrismaSupportTicket[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .supportTickets(args);
  }

  async findTransactions(
    parentId: number,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async getUsersCustomersCreatedUserIdTousers(
    parentId: number
  ): Promise<PrismaUserModel | null> {
    return this.prisma.customer
      .findUnique({
        where: { id: parentId },
      })
      .usersCustomersCreatedUserIdTousers();
  }

  async getUsersCustomersUpdatedUserIdTousers(
    parentId: number
  ): Promise<PrismaUserModel | null> {
    return this.prisma.customer
      .findUnique({
        where: { id: parentId },
      })
      .usersCustomersUpdatedUserIdTousers();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.customer
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
