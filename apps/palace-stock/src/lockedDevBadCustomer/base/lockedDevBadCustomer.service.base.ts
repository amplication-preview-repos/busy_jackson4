/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LockedDevBadCustomer as PrismaLockedDevBadCustomer,
  Customer as PrismaCustomer,
  FinancedSale as PrismaFinancedSale,
} from "@prisma/client";

export class LockedDevBadCustomerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LockedDevBadCustomerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.lockedDevBadCustomer.count(args);
  }

  async lockedDevBadCustomers<
    T extends Prisma.LockedDevBadCustomerFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LockedDevBadCustomerFindManyArgs>
  ): Promise<PrismaLockedDevBadCustomer[]> {
    return this.prisma.lockedDevBadCustomer.findMany<Prisma.LockedDevBadCustomerFindManyArgs>(
      args
    );
  }
  async lockedDevBadCustomer<
    T extends Prisma.LockedDevBadCustomerFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LockedDevBadCustomerFindUniqueArgs>
  ): Promise<PrismaLockedDevBadCustomer | null> {
    return this.prisma.lockedDevBadCustomer.findUnique(args);
  }
  async createLockedDevBadCustomer<
    T extends Prisma.LockedDevBadCustomerCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LockedDevBadCustomerCreateArgs>
  ): Promise<PrismaLockedDevBadCustomer> {
    return this.prisma.lockedDevBadCustomer.create<T>(args);
  }
  async updateLockedDevBadCustomer<
    T extends Prisma.LockedDevBadCustomerUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LockedDevBadCustomerUpdateArgs>
  ): Promise<PrismaLockedDevBadCustomer> {
    return this.prisma.lockedDevBadCustomer.update<T>(args);
  }
  async deleteLockedDevBadCustomer<
    T extends Prisma.LockedDevBadCustomerDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.LockedDevBadCustomerDeleteArgs>
  ): Promise<PrismaLockedDevBadCustomer> {
    return this.prisma.lockedDevBadCustomer.delete(args);
  }

  async getCustomers(parentId: number): Promise<PrismaCustomer | null> {
    return this.prisma.lockedDevBadCustomer
      .findUnique({
        where: { id: parentId },
      })
      .customers();
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.lockedDevBadCustomer
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }
}
