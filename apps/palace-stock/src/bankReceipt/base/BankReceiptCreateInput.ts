/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  ValidateNested,
  IsInt,
  IsEnum,
  IsDate,
  IsNumber,
} from "class-validator";
import { CashCountWhereUniqueInput } from "../../cashCount/base/CashCountWhereUniqueInput";
import { Type } from "class-transformer";
import { EnumBankReceiptEstatusFicha } from "./EnumBankReceiptEstatusFicha";
import { EnumBankReceiptEstatusValidacion } from "./EnumBankReceiptEstatusValidacion";
import { Decimal } from "decimal.js";
import { EnumBankReceiptTipoDeposito } from "./EnumBankReceiptTipoDeposito";

@InputType()
class BankReceiptCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  autorizacion?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  banco!: string;

  @ApiProperty({
    required: true,
    type: () => CashCountWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CashCountWhereUniqueInput)
  @Field(() => CashCountWhereUniqueInput)
  cashCounts!: CashCountWhereUniqueInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  createdUserId!: number;

  @ApiProperty({
    required: true,
    enum: EnumBankReceiptEstatusFicha,
  })
  @IsEnum(EnumBankReceiptEstatusFicha)
  @Field(() => EnumBankReceiptEstatusFicha)
  estatus_ficha!: "A" | "I";

  @ApiProperty({
    required: false,
    enum: EnumBankReceiptEstatusValidacion,
  })
  @IsEnum(EnumBankReceiptEstatusValidacion)
  @IsOptional()
  @Field(() => EnumBankReceiptEstatusValidacion, {
    nullable: true,
  })
  estatus_validacion?: "SV" | "I" | "C" | "CB" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  fechaDeposito!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaValidacion?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  folio?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  idBanco?: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  montoDeposito!: Decimal;

  @ApiProperty({
    required: false,
    enum: EnumBankReceiptTipoDeposito,
  })
  @IsEnum(EnumBankReceiptTipoDeposito)
  @IsOptional()
  @Field(() => EnumBankReceiptTipoDeposito, {
    nullable: true,
  })
  tipo_deposito?: "V" | "T" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  validUserId?: number | null;
}

export { BankReceiptCreateInput as BankReceiptCreateInput };
