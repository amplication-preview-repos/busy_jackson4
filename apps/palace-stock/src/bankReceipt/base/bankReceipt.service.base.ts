/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BankReceipt as PrismaBankReceipt,
  CashCount as PrismaCashCount,
} from "@prisma/client";

export class BankReceiptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BankReceiptCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bankReceipt.count(args);
  }

  async bankReceipts<T extends Prisma.BankReceiptFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankReceiptFindManyArgs>
  ): Promise<PrismaBankReceipt[]> {
    return this.prisma.bankReceipt.findMany<Prisma.BankReceiptFindManyArgs>(
      args
    );
  }
  async bankReceipt<T extends Prisma.BankReceiptFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankReceiptFindUniqueArgs>
  ): Promise<PrismaBankReceipt | null> {
    return this.prisma.bankReceipt.findUnique(args);
  }
  async createBankReceipt<T extends Prisma.BankReceiptCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankReceiptCreateArgs>
  ): Promise<PrismaBankReceipt> {
    return this.prisma.bankReceipt.create<T>(args);
  }
  async updateBankReceipt<T extends Prisma.BankReceiptUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankReceiptUpdateArgs>
  ): Promise<PrismaBankReceipt> {
    return this.prisma.bankReceipt.update<T>(args);
  }
  async deleteBankReceipt<T extends Prisma.BankReceiptDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankReceiptDeleteArgs>
  ): Promise<PrismaBankReceipt> {
    return this.prisma.bankReceipt.delete(args);
  }

  async getCashCounts(parentId: number): Promise<PrismaCashCount | null> {
    return this.prisma.bankReceipt
      .findUnique({
        where: { id: parentId },
      })
      .cashCounts();
  }
}
