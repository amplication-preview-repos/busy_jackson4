/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  NuovoHistorical as PrismaNuovoHistorical,
} from "@prisma/client";

export class NuovoHistoricalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NuovoHistoricalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.nuovoHistorical.count(args);
  }

  async nuovoHistoricals<T extends Prisma.NuovoHistoricalFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NuovoHistoricalFindManyArgs>
  ): Promise<PrismaNuovoHistorical[]> {
    return this.prisma.nuovoHistorical.findMany<Prisma.NuovoHistoricalFindManyArgs>(
      args
    );
  }
  async nuovoHistorical<T extends Prisma.NuovoHistoricalFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NuovoHistoricalFindUniqueArgs>
  ): Promise<PrismaNuovoHistorical | null> {
    return this.prisma.nuovoHistorical.findUnique(args);
  }
  async createNuovoHistorical<T extends Prisma.NuovoHistoricalCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NuovoHistoricalCreateArgs>
  ): Promise<PrismaNuovoHistorical> {
    return this.prisma.nuovoHistorical.create<T>(args);
  }
  async updateNuovoHistorical<T extends Prisma.NuovoHistoricalUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NuovoHistoricalUpdateArgs>
  ): Promise<PrismaNuovoHistorical> {
    return this.prisma.nuovoHistorical.update<T>(args);
  }
  async deleteNuovoHistorical<T extends Prisma.NuovoHistoricalDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NuovoHistoricalDeleteArgs>
  ): Promise<PrismaNuovoHistorical> {
    return this.prisma.nuovoHistorical.delete(args);
  }
}
