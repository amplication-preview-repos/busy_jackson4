/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StripeApiLog as PrismaStripeApiLog,
  StripePaymentTransac as PrismaStripePaymentTransac,
} from "@prisma/client";

export class StripeApiLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StripeApiLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.stripeApiLog.count(args);
  }

  async stripeApiLogs<T extends Prisma.StripeApiLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StripeApiLogFindManyArgs>
  ): Promise<PrismaStripeApiLog[]> {
    return this.prisma.stripeApiLog.findMany<Prisma.StripeApiLogFindManyArgs>(
      args
    );
  }
  async stripeApiLog<T extends Prisma.StripeApiLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StripeApiLogFindUniqueArgs>
  ): Promise<PrismaStripeApiLog | null> {
    return this.prisma.stripeApiLog.findUnique(args);
  }
  async createStripeApiLog<T extends Prisma.StripeApiLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StripeApiLogCreateArgs>
  ): Promise<PrismaStripeApiLog> {
    return this.prisma.stripeApiLog.create<T>(args);
  }
  async updateStripeApiLog<T extends Prisma.StripeApiLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StripeApiLogUpdateArgs>
  ): Promise<PrismaStripeApiLog> {
    return this.prisma.stripeApiLog.update<T>(args);
  }
  async deleteStripeApiLog<T extends Prisma.StripeApiLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StripeApiLogDeleteArgs>
  ): Promise<PrismaStripeApiLog> {
    return this.prisma.stripeApiLog.delete(args);
  }

  async getStripePaymentTransacs(
    parentId: number
  ): Promise<PrismaStripePaymentTransac | null> {
    return this.prisma.stripeApiLog
      .findUnique({
        where: { id: parentId },
      })
      .stripePaymentTransacs();
  }
}
