/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BillingSery as PrismaBillingSery } from "@prisma/client";

export class BillingSeryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BillingSeryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.billingSery.count(args);
  }

  async billingSeries<T extends Prisma.BillingSeryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingSeryFindManyArgs>
  ): Promise<PrismaBillingSery[]> {
    return this.prisma.billingSery.findMany<Prisma.BillingSeryFindManyArgs>(
      args
    );
  }
  async billingSery<T extends Prisma.BillingSeryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingSeryFindUniqueArgs>
  ): Promise<PrismaBillingSery | null> {
    return this.prisma.billingSery.findUnique(args);
  }
  async createBillingSery<T extends Prisma.BillingSeryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingSeryCreateArgs>
  ): Promise<PrismaBillingSery> {
    return this.prisma.billingSery.create<T>(args);
  }
  async updateBillingSery<T extends Prisma.BillingSeryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingSeryUpdateArgs>
  ): Promise<PrismaBillingSery> {
    return this.prisma.billingSery.update<T>(args);
  }
  async deleteBillingSery<T extends Prisma.BillingSeryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingSeryDeleteArgs>
  ): Promise<PrismaBillingSery> {
    return this.prisma.billingSery.delete(args);
  }
}
