/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  ValidateNested,
  IsInt,
  IsEnum,
  IsDate,
} from "class-validator";
import { BranchManagerCreateNestedManyWithoutCollaboratorsInput } from "./BranchManagerCreateNestedManyWithoutCollaboratorsInput";
import { Type } from "class-transformer";
import { DocumentCreateNestedManyWithoutCollaboratorsInput } from "./DocumentCreateNestedManyWithoutCollaboratorsInput";
import { EnumCollaboratorEstatusColaborador } from "./EnumCollaboratorEstatusColaborador";
import { UserModelWhereUniqueInput } from "../../userModel/base/UserModelWhereUniqueInput";
import { UserModelCreateNestedManyWithoutCollaboratorsInput } from "./UserModelCreateNestedManyWithoutCollaboratorsInput";

@InputType()
class CollaboratorCreateInput {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  apellido1!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  apellido2?: string | null;

  @ApiProperty({
    required: false,
    type: () => BranchManagerCreateNestedManyWithoutCollaboratorsInput,
  })
  @ValidateNested()
  @Type(() => BranchManagerCreateNestedManyWithoutCollaboratorsInput)
  @IsOptional()
  @Field(() => BranchManagerCreateNestedManyWithoutCollaboratorsInput, {
    nullable: true,
  })
  branchManagers?: BranchManagerCreateNestedManyWithoutCollaboratorsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cargo?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ciudad?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ciudadActual?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  codigoPostal?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  codigoPostalActual?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  colonia?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  coloniaActual?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  correoContacto?: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  curp!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  direccionActual?: string | null;

  @ApiProperty({
    required: false,
    type: () => DocumentCreateNestedManyWithoutCollaboratorsInput,
  })
  @ValidateNested()
  @Type(() => DocumentCreateNestedManyWithoutCollaboratorsInput)
  @IsOptional()
  @Field(() => DocumentCreateNestedManyWithoutCollaboratorsInput, {
    nullable: true,
  })
  documents?: DocumentCreateNestedManyWithoutCollaboratorsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  domicilio?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  domicilioActual?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  esquemaPago?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  estado?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  estadoActual?: string | null;

  @ApiProperty({
    required: true,
    enum: EnumCollaboratorEstatusColaborador,
  })
  @IsEnum(EnumCollaboratorEstatusColaborador)
  @Field(() => EnumCollaboratorEstatusColaborador)
  estatus_colaborador!: "A" | "I";

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaCambioEsquema?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaIngreso?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaNacimiento?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaReingreso?: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  nombres!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rfc?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  telefonoContacto?: string | null;

  @ApiProperty({
    required: true,
    type: () => UserModelWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserModelWhereUniqueInput)
  @Field(() => UserModelWhereUniqueInput)
  usersCollaboratorsCreatedUserIdTousers!: UserModelWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => UserModelCreateNestedManyWithoutCollaboratorsInput,
  })
  @ValidateNested()
  @Type(() => UserModelCreateNestedManyWithoutCollaboratorsInput)
  @IsOptional()
  @Field(() => UserModelCreateNestedManyWithoutCollaboratorsInput, {
    nullable: true,
  })
  usersUsersCollaboratorIdTocollaborators?: UserModelCreateNestedManyWithoutCollaboratorsInput;
}

export { CollaboratorCreateInput as CollaboratorCreateInput };
