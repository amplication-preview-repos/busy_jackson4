/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CollaboratorService } from "../collaborator.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CollaboratorCreateInput } from "./CollaboratorCreateInput";
import { Collaborator } from "./Collaborator";
import { CollaboratorFindManyArgs } from "./CollaboratorFindManyArgs";
import { CollaboratorWhereUniqueInput } from "./CollaboratorWhereUniqueInput";
import { CollaboratorUpdateInput } from "./CollaboratorUpdateInput";
import { BranchManagerFindManyArgs } from "../../branchManager/base/BranchManagerFindManyArgs";
import { BranchManager } from "../../branchManager/base/BranchManager";
import { BranchManagerWhereUniqueInput } from "../../branchManager/base/BranchManagerWhereUniqueInput";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { DocumentWhereUniqueInput } from "../../document/base/DocumentWhereUniqueInput";
import { UserModelFindManyArgs } from "../../userModel/base/UserModelFindManyArgs";
import { UserModel } from "../../userModel/base/UserModel";
import { UserModelWhereUniqueInput } from "../../userModel/base/UserModelWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CollaboratorControllerBase {
  constructor(
    protected readonly service: CollaboratorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Collaborator })
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCollaborator(
    @common.Body() data: CollaboratorCreateInput
  ): Promise<Collaborator> {
    return await this.service.createCollaborator({
      data: {
        ...data,

        usersCollaboratorsCreatedUserIdTousers: {
          connect: data.usersCollaboratorsCreatedUserIdTousers,
        },
      },
      select: {
        apellido1: true,
        apellido2: true,
        cargo: true,
        ciudad: true,
        ciudadActual: true,
        codigoPostal: true,
        codigoPostalActual: true,
        colonia: true,
        coloniaActual: true,
        correoContacto: true,
        curp: true,
        direccionActual: true,
        domicilio: true,
        domicilioActual: true,
        esquemaPago: true,
        estado: true,
        estadoActual: true,
        estatus_colaborador: true,
        fechaCambioEsquema: true,
        fechaIngreso: true,
        fechaNacimiento: true,
        fechaRegistro: true,
        fechaReingreso: true,
        id: true,
        nombres: true,
        rfc: true,
        telefonoContacto: true,

        usersCollaboratorsCreatedUserIdTousers: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Collaborator] })
  @ApiNestedQuery(CollaboratorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async collaborators(@common.Req() request: Request): Promise<Collaborator[]> {
    const args = plainToClass(CollaboratorFindManyArgs, request.query);
    return this.service.collaborators({
      ...args,
      select: {
        apellido1: true,
        apellido2: true,
        cargo: true,
        ciudad: true,
        ciudadActual: true,
        codigoPostal: true,
        codigoPostalActual: true,
        colonia: true,
        coloniaActual: true,
        correoContacto: true,
        curp: true,
        direccionActual: true,
        domicilio: true,
        domicilioActual: true,
        esquemaPago: true,
        estado: true,
        estadoActual: true,
        estatus_colaborador: true,
        fechaCambioEsquema: true,
        fechaIngreso: true,
        fechaNacimiento: true,
        fechaRegistro: true,
        fechaReingreso: true,
        id: true,
        nombres: true,
        rfc: true,
        telefonoContacto: true,

        usersCollaboratorsCreatedUserIdTousers: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Collaborator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async collaborator(
    @common.Param() params: CollaboratorWhereUniqueInput
  ): Promise<Collaborator | null> {
    const result = await this.service.collaborator({
      where: params,
      select: {
        apellido1: true,
        apellido2: true,
        cargo: true,
        ciudad: true,
        ciudadActual: true,
        codigoPostal: true,
        codigoPostalActual: true,
        colonia: true,
        coloniaActual: true,
        correoContacto: true,
        curp: true,
        direccionActual: true,
        domicilio: true,
        domicilioActual: true,
        esquemaPago: true,
        estado: true,
        estadoActual: true,
        estatus_colaborador: true,
        fechaCambioEsquema: true,
        fechaIngreso: true,
        fechaNacimiento: true,
        fechaRegistro: true,
        fechaReingreso: true,
        id: true,
        nombres: true,
        rfc: true,
        telefonoContacto: true,

        usersCollaboratorsCreatedUserIdTousers: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Collaborator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCollaborator(
    @common.Param() params: CollaboratorWhereUniqueInput,
    @common.Body() data: CollaboratorUpdateInput
  ): Promise<Collaborator | null> {
    try {
      return await this.service.updateCollaborator({
        where: params,
        data: {
          ...data,

          usersCollaboratorsCreatedUserIdTousers: {
            connect: data.usersCollaboratorsCreatedUserIdTousers,
          },
        },
        select: {
          apellido1: true,
          apellido2: true,
          cargo: true,
          ciudad: true,
          ciudadActual: true,
          codigoPostal: true,
          codigoPostalActual: true,
          colonia: true,
          coloniaActual: true,
          correoContacto: true,
          curp: true,
          direccionActual: true,
          domicilio: true,
          domicilioActual: true,
          esquemaPago: true,
          estado: true,
          estadoActual: true,
          estatus_colaborador: true,
          fechaCambioEsquema: true,
          fechaIngreso: true,
          fechaNacimiento: true,
          fechaRegistro: true,
          fechaReingreso: true,
          id: true,
          nombres: true,
          rfc: true,
          telefonoContacto: true,

          usersCollaboratorsCreatedUserIdTousers: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Collaborator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCollaborator(
    @common.Param() params: CollaboratorWhereUniqueInput
  ): Promise<Collaborator | null> {
    try {
      return await this.service.deleteCollaborator({
        where: params,
        select: {
          apellido1: true,
          apellido2: true,
          cargo: true,
          ciudad: true,
          ciudadActual: true,
          codigoPostal: true,
          codigoPostalActual: true,
          colonia: true,
          coloniaActual: true,
          correoContacto: true,
          curp: true,
          direccionActual: true,
          domicilio: true,
          domicilioActual: true,
          esquemaPago: true,
          estado: true,
          estadoActual: true,
          estatus_colaborador: true,
          fechaCambioEsquema: true,
          fechaIngreso: true,
          fechaNacimiento: true,
          fechaRegistro: true,
          fechaReingreso: true,
          id: true,
          nombres: true,
          rfc: true,
          telefonoContacto: true,

          usersCollaboratorsCreatedUserIdTousers: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/branchManagers")
  @ApiNestedQuery(BranchManagerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BranchManager",
    action: "read",
    possession: "any",
  })
  async findBranchManagers(
    @common.Req() request: Request,
    @common.Param() params: CollaboratorWhereUniqueInput
  ): Promise<BranchManager[]> {
    const query = plainToClass(BranchManagerFindManyArgs, request.query);
    const results = await this.service.findBranchManagers(params.id, {
      ...query,
      select: {
        cargo: true,

        collaborators: {
          select: {
            id: true,
          },
        },

        fechaIniciaCargo: true,
        id: true,
        numSucursal: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/branchManagers")
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "update",
    possession: "any",
  })
  async connectBranchManagers(
    @common.Param() params: CollaboratorWhereUniqueInput,
    @common.Body() body: BranchManagerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchManagers: {
        connect: body,
      },
    };
    await this.service.updateCollaborator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/branchManagers")
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "update",
    possession: "any",
  })
  async updateBranchManagers(
    @common.Param() params: CollaboratorWhereUniqueInput,
    @common.Body() body: BranchManagerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchManagers: {
        set: body,
      },
    };
    await this.service.updateCollaborator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/branchManagers")
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "update",
    possession: "any",
  })
  async disconnectBranchManagers(
    @common.Param() params: CollaboratorWhereUniqueInput,
    @common.Body() body: BranchManagerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchManagers: {
        disconnect: body,
      },
    };
    await this.service.updateCollaborator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/documents")
  @ApiNestedQuery(DocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async findDocuments(
    @common.Req() request: Request,
    @common.Param() params: CollaboratorWhereUniqueInput
  ): Promise<Document[]> {
    const query = plainToClass(DocumentFindManyArgs, request.query);
    const results = await this.service.findDocuments(params.id, {
      ...query,
      select: {
        collaborators: {
          select: {
            id: true,
          },
        },

        customers: {
          select: {
            id: true,
          },
        },

        direccion: true,
        documentTypeId: true,
        estatus: true,
        fechaHoraCarga: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        idCertProtecAct: true,
        idFicha: true,
        nombreOriginal: true,
        numTicket: true,

        payments: {
          select: {
            id: true,
          },
        },

        validado: true,
        validatedAt: true,
        validationUserId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "update",
    possession: "any",
  })
  async connectDocuments(
    @common.Param() params: CollaboratorWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        connect: body,
      },
    };
    await this.service.updateCollaborator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "update",
    possession: "any",
  })
  async updateDocuments(
    @common.Param() params: CollaboratorWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        set: body,
      },
    };
    await this.service.updateCollaborator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "update",
    possession: "any",
  })
  async disconnectDocuments(
    @common.Param() params: CollaboratorWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        disconnect: body,
      },
    };
    await this.service.updateCollaborator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/usersUsersCollaboratorIdTocollaborators")
  @ApiNestedQuery(UserModelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "read",
    possession: "any",
  })
  async findUsersUsersCollaboratorIdTocollaborators(
    @common.Req() request: Request,
    @common.Param() params: CollaboratorWhereUniqueInput
  ): Promise<UserModel[]> {
    const query = plainToClass(UserModelFindManyArgs, request.query);
    const results =
      await this.service.findUsersUsersCollaboratorIdTocollaborators(
        params.id,
        {
          ...query,
          select: {
            accessLevels: {
              select: {
                id: true,
              },
            },

            collaboratorsUsersCollaboratorIdTocollaborators: {
              select: {
                id: true,
              },
            },

            estatus_usuario: true,
            fechaRegistroUsuario: true,
            id: true,
            idColabRegistroUsuario: true,
            passCifrado: true,
            permisosExcluidos: true,
            userName: true,
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/usersUsersCollaboratorIdTocollaborators")
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "update",
    possession: "any",
  })
  async connectUsersUsersCollaboratorIdTocollaborators(
    @common.Param() params: CollaboratorWhereUniqueInput,
    @common.Body() body: UserModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      usersUsersCollaboratorIdTocollaborators: {
        connect: body,
      },
    };
    await this.service.updateCollaborator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/usersUsersCollaboratorIdTocollaborators")
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "update",
    possession: "any",
  })
  async updateUsersUsersCollaboratorIdTocollaborators(
    @common.Param() params: CollaboratorWhereUniqueInput,
    @common.Body() body: UserModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      usersUsersCollaboratorIdTocollaborators: {
        set: body,
      },
    };
    await this.service.updateCollaborator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/usersUsersCollaboratorIdTocollaborators")
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "update",
    possession: "any",
  })
  async disconnectUsersUsersCollaboratorIdTocollaborators(
    @common.Param() params: CollaboratorWhereUniqueInput,
    @common.Body() body: UserModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      usersUsersCollaboratorIdTocollaborators: {
        disconnect: body,
      },
    };
    await this.service.updateCollaborator({
      where: params,
      data,
      select: { id: true },
    });
  }
}
