/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PaycodeApiLog as PrismaPaycodeApiLog,
  PaycodePaymentTransac as PrismaPaycodePaymentTransac,
} from "@prisma/client";

export class PaycodeApiLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaycodeApiLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paycodeApiLog.count(args);
  }

  async paycodeApiLogs<T extends Prisma.PaycodeApiLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaycodeApiLogFindManyArgs>
  ): Promise<PrismaPaycodeApiLog[]> {
    return this.prisma.paycodeApiLog.findMany<Prisma.PaycodeApiLogFindManyArgs>(
      args
    );
  }
  async paycodeApiLog<T extends Prisma.PaycodeApiLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaycodeApiLogFindUniqueArgs>
  ): Promise<PrismaPaycodeApiLog | null> {
    return this.prisma.paycodeApiLog.findUnique(args);
  }
  async createPaycodeApiLog<T extends Prisma.PaycodeApiLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaycodeApiLogCreateArgs>
  ): Promise<PrismaPaycodeApiLog> {
    return this.prisma.paycodeApiLog.create<T>(args);
  }
  async updatePaycodeApiLog<T extends Prisma.PaycodeApiLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaycodeApiLogUpdateArgs>
  ): Promise<PrismaPaycodeApiLog> {
    return this.prisma.paycodeApiLog.update<T>(args);
  }
  async deletePaycodeApiLog<T extends Prisma.PaycodeApiLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaycodeApiLogDeleteArgs>
  ): Promise<PrismaPaycodeApiLog> {
    return this.prisma.paycodeApiLog.delete(args);
  }

  async getPaycodePaymentTransacs(
    parentId: number
  ): Promise<PrismaPaycodePaymentTransac | null> {
    return this.prisma.paycodeApiLog
      .findUnique({
        where: { id: parentId },
      })
      .paycodePaymentTransacs();
  }
}
