/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EstimateService } from "../estimate.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EstimateCreateInput } from "./EstimateCreateInput";
import { Estimate } from "./Estimate";
import { EstimateFindManyArgs } from "./EstimateFindManyArgs";
import { EstimateWhereUniqueInput } from "./EstimateWhereUniqueInput";
import { EstimateUpdateInput } from "./EstimateUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EstimateControllerBase {
  constructor(
    protected readonly service: EstimateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Estimate })
  @nestAccessControl.UseRoles({
    resource: "Estimate",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEstimate(
    @common.Body() data: EstimateCreateInput
  ): Promise<Estimate> {
    return await this.service.createEstimate({
      data: {
        ...data,

        items: {
          connect: data.items,
        },

        warehouses: {
          connect: data.warehouses,
        },
      },
      select: {
        aspira_otro_producto: true,
        autoriza_contacto: true,
        createdUserId: true,
        desctoPagoOportuno: true,
        enganche: true,
        fechaCotiz: true,
        id: true,
        interesAnual: true,
        interesSemanalMultiplo: true,

        items: {
          select: {
            id: true,
          },
        },

        montoPago: true,
        motivoRechazo: true,
        nombreCompletoCliente: true,
        numPagos: true,
        observacionesCotizacion: true,
        pagoSemanalIdeal: true,
        plazo: true,
        precioLista: true,
        productoInteres: true,
        rechazo_financ: true,
        telefonoCliente: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Estimate] })
  @ApiNestedQuery(EstimateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Estimate",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async estimates(@common.Req() request: Request): Promise<Estimate[]> {
    const args = plainToClass(EstimateFindManyArgs, request.query);
    return this.service.estimates({
      ...args,
      select: {
        aspira_otro_producto: true,
        autoriza_contacto: true,
        createdUserId: true,
        desctoPagoOportuno: true,
        enganche: true,
        fechaCotiz: true,
        id: true,
        interesAnual: true,
        interesSemanalMultiplo: true,

        items: {
          select: {
            id: true,
          },
        },

        montoPago: true,
        motivoRechazo: true,
        nombreCompletoCliente: true,
        numPagos: true,
        observacionesCotizacion: true,
        pagoSemanalIdeal: true,
        plazo: true,
        precioLista: true,
        productoInteres: true,
        rechazo_financ: true,
        telefonoCliente: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Estimate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Estimate",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async estimate(
    @common.Param() params: EstimateWhereUniqueInput
  ): Promise<Estimate | null> {
    const result = await this.service.estimate({
      where: params,
      select: {
        aspira_otro_producto: true,
        autoriza_contacto: true,
        createdUserId: true,
        desctoPagoOportuno: true,
        enganche: true,
        fechaCotiz: true,
        id: true,
        interesAnual: true,
        interesSemanalMultiplo: true,

        items: {
          select: {
            id: true,
          },
        },

        montoPago: true,
        motivoRechazo: true,
        nombreCompletoCliente: true,
        numPagos: true,
        observacionesCotizacion: true,
        pagoSemanalIdeal: true,
        plazo: true,
        precioLista: true,
        productoInteres: true,
        rechazo_financ: true,
        telefonoCliente: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Estimate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Estimate",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEstimate(
    @common.Param() params: EstimateWhereUniqueInput,
    @common.Body() data: EstimateUpdateInput
  ): Promise<Estimate | null> {
    try {
      return await this.service.updateEstimate({
        where: params,
        data: {
          ...data,

          items: {
            connect: data.items,
          },

          warehouses: {
            connect: data.warehouses,
          },
        },
        select: {
          aspira_otro_producto: true,
          autoriza_contacto: true,
          createdUserId: true,
          desctoPagoOportuno: true,
          enganche: true,
          fechaCotiz: true,
          id: true,
          interesAnual: true,
          interesSemanalMultiplo: true,

          items: {
            select: {
              id: true,
            },
          },

          montoPago: true,
          motivoRechazo: true,
          nombreCompletoCliente: true,
          numPagos: true,
          observacionesCotizacion: true,
          pagoSemanalIdeal: true,
          plazo: true,
          precioLista: true,
          productoInteres: true,
          rechazo_financ: true,
          telefonoCliente: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Estimate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Estimate",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEstimate(
    @common.Param() params: EstimateWhereUniqueInput
  ): Promise<Estimate | null> {
    try {
      return await this.service.deleteEstimate({
        where: params,
        select: {
          aspira_otro_producto: true,
          autoriza_contacto: true,
          createdUserId: true,
          desctoPagoOportuno: true,
          enganche: true,
          fechaCotiz: true,
          id: true,
          interesAnual: true,
          interesSemanalMultiplo: true,

          items: {
            select: {
              id: true,
            },
          },

          montoPago: true,
          motivoRechazo: true,
          nombreCompletoCliente: true,
          numPagos: true,
          observacionesCotizacion: true,
          pagoSemanalIdeal: true,
          plazo: true,
          precioLista: true,
          productoInteres: true,
          rechazo_financ: true,
          telefonoCliente: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
