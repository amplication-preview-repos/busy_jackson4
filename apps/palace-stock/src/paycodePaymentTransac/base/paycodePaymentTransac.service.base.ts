/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PaycodePaymentTransac as PrismaPaycodePaymentTransac,
  AirtimeRecharge as PrismaAirtimeRecharge,
  PaycodeApiLog as PrismaPaycodeApiLog,
  PaycodeWebhookLog as PrismaPaycodeWebhookLog,
  Payment as PrismaPayment,
  RecurringPayment as PrismaRecurringPayment,
  FinancedSale as PrismaFinancedSale,
} from "@prisma/client";

export class PaycodePaymentTransacServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaycodePaymentTransacCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paycodePaymentTransac.count(args);
  }

  async paycodePaymentTransacs<
    T extends Prisma.PaycodePaymentTransacFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PaycodePaymentTransacFindManyArgs>
  ): Promise<PrismaPaycodePaymentTransac[]> {
    return this.prisma.paycodePaymentTransac.findMany<Prisma.PaycodePaymentTransacFindManyArgs>(
      args
    );
  }
  async paycodePaymentTransac<
    T extends Prisma.PaycodePaymentTransacFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PaycodePaymentTransacFindUniqueArgs>
  ): Promise<PrismaPaycodePaymentTransac | null> {
    return this.prisma.paycodePaymentTransac.findUnique(args);
  }
  async createPaycodePaymentTransac<
    T extends Prisma.PaycodePaymentTransacCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PaycodePaymentTransacCreateArgs>
  ): Promise<PrismaPaycodePaymentTransac> {
    return this.prisma.paycodePaymentTransac.create<T>(args);
  }
  async updatePaycodePaymentTransac<
    T extends Prisma.PaycodePaymentTransacUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PaycodePaymentTransacUpdateArgs>
  ): Promise<PrismaPaycodePaymentTransac> {
    return this.prisma.paycodePaymentTransac.update<T>(args);
  }
  async deletePaycodePaymentTransac<
    T extends Prisma.PaycodePaymentTransacDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PaycodePaymentTransacDeleteArgs>
  ): Promise<PrismaPaycodePaymentTransac> {
    return this.prisma.paycodePaymentTransac.delete(args);
  }

  async findAirtimeRecharges(
    parentId: number,
    args: Prisma.AirtimeRechargeFindManyArgs
  ): Promise<PrismaAirtimeRecharge[]> {
    return this.prisma.paycodePaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .airtimeRecharges(args);
  }

  async findPaycodeApiLog(
    parentId: number,
    args: Prisma.PaycodeApiLogFindManyArgs
  ): Promise<PrismaPaycodeApiLog[]> {
    return this.prisma.paycodePaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paycodeApiLog(args);
  }

  async findPaycodeWebhookLog(
    parentId: number,
    args: Prisma.PaycodeWebhookLogFindManyArgs
  ): Promise<PrismaPaycodeWebhookLog[]> {
    return this.prisma.paycodePaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paycodeWebhookLog(args);
  }

  async findPayments(
    parentId: number,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.paycodePaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async findRecurringPayments(
    parentId: number,
    args: Prisma.RecurringPaymentFindManyArgs
  ): Promise<PrismaRecurringPayment[]> {
    return this.prisma.paycodePaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recurringPayments(args);
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.paycodePaymentTransac
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }
}
