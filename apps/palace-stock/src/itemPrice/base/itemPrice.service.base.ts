/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ItemPrice as PrismaItemPrice,
  Item as PrismaItem,
} from "@prisma/client";

export class ItemPriceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemPriceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemPrice.count(args);
  }

  async itemPrices<T extends Prisma.ItemPriceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemPriceFindManyArgs>
  ): Promise<PrismaItemPrice[]> {
    return this.prisma.itemPrice.findMany<Prisma.ItemPriceFindManyArgs>(args);
  }
  async itemPrice<T extends Prisma.ItemPriceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemPriceFindUniqueArgs>
  ): Promise<PrismaItemPrice | null> {
    return this.prisma.itemPrice.findUnique(args);
  }
  async createItemPrice<T extends Prisma.ItemPriceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemPriceCreateArgs>
  ): Promise<PrismaItemPrice> {
    return this.prisma.itemPrice.create<T>(args);
  }
  async updateItemPrice<T extends Prisma.ItemPriceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemPriceUpdateArgs>
  ): Promise<PrismaItemPrice> {
    return this.prisma.itemPrice.update<T>(args);
  }
  async deleteItemPrice<T extends Prisma.ItemPriceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemPriceDeleteArgs>
  ): Promise<PrismaItemPrice> {
    return this.prisma.itemPrice.delete(args);
  }

  async getItems(parentId: number): Promise<PrismaItem | null> {
    return this.prisma.itemPrice
      .findUnique({
        where: { id: parentId },
      })
      .items();
  }
}
