/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TrustonicHistoricalService } from "../trustonicHistorical.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TrustonicHistoricalCreateInput } from "./TrustonicHistoricalCreateInput";
import { TrustonicHistorical } from "./TrustonicHistorical";
import { TrustonicHistoricalFindManyArgs } from "./TrustonicHistoricalFindManyArgs";
import { TrustonicHistoricalWhereUniqueInput } from "./TrustonicHistoricalWhereUniqueInput";
import { TrustonicHistoricalUpdateInput } from "./TrustonicHistoricalUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TrustonicHistoricalControllerBase {
  constructor(
    protected readonly service: TrustonicHistoricalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TrustonicHistorical })
  @nestAccessControl.UseRoles({
    resource: "TrustonicHistorical",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTrustonicHistorical(
    @common.Body() data: TrustonicHistoricalCreateInput
  ): Promise<TrustonicHistorical> {
    return await this.service.createTrustonicHistorical({
      data: data,
      select: {
        assignedPolicy: true,
        assignedPolicyActivationTime: true,
        assignedPolicyAssignmentTime: true,
        deviceReady: true,
        fechaRegistro: true,
        firstEnrol: true,
        id: true,
        imeiNo: true,
        lastCheckin: true,
        lastReportedPolicy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TrustonicHistorical] })
  @ApiNestedQuery(TrustonicHistoricalFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TrustonicHistorical",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async trustonicHistoricals(
    @common.Req() request: Request
  ): Promise<TrustonicHistorical[]> {
    const args = plainToClass(TrustonicHistoricalFindManyArgs, request.query);
    return this.service.trustonicHistoricals({
      ...args,
      select: {
        assignedPolicy: true,
        assignedPolicyActivationTime: true,
        assignedPolicyAssignmentTime: true,
        deviceReady: true,
        fechaRegistro: true,
        firstEnrol: true,
        id: true,
        imeiNo: true,
        lastCheckin: true,
        lastReportedPolicy: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TrustonicHistorical })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TrustonicHistorical",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async trustonicHistorical(
    @common.Param() params: TrustonicHistoricalWhereUniqueInput
  ): Promise<TrustonicHistorical | null> {
    const result = await this.service.trustonicHistorical({
      where: params,
      select: {
        assignedPolicy: true,
        assignedPolicyActivationTime: true,
        assignedPolicyAssignmentTime: true,
        deviceReady: true,
        fechaRegistro: true,
        firstEnrol: true,
        id: true,
        imeiNo: true,
        lastCheckin: true,
        lastReportedPolicy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TrustonicHistorical })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TrustonicHistorical",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTrustonicHistorical(
    @common.Param() params: TrustonicHistoricalWhereUniqueInput,
    @common.Body() data: TrustonicHistoricalUpdateInput
  ): Promise<TrustonicHistorical | null> {
    try {
      return await this.service.updateTrustonicHistorical({
        where: params,
        data: data,
        select: {
          assignedPolicy: true,
          assignedPolicyActivationTime: true,
          assignedPolicyAssignmentTime: true,
          deviceReady: true,
          fechaRegistro: true,
          firstEnrol: true,
          id: true,
          imeiNo: true,
          lastCheckin: true,
          lastReportedPolicy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TrustonicHistorical })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TrustonicHistorical",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTrustonicHistorical(
    @common.Param() params: TrustonicHistoricalWhereUniqueInput
  ): Promise<TrustonicHistorical | null> {
    try {
      return await this.service.deleteTrustonicHistorical({
        where: params,
        select: {
          assignedPolicy: true,
          assignedPolicyActivationTime: true,
          assignedPolicyAssignmentTime: true,
          deviceReady: true,
          fechaRegistro: true,
          firstEnrol: true,
          id: true,
          imeiNo: true,
          lastCheckin: true,
          lastReportedPolicy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
