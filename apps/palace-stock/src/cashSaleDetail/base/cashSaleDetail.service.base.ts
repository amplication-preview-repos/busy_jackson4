/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CashSaleDetail as PrismaCashSaleDetail,
  Item as PrismaItem,
} from "@prisma/client";

export class CashSaleDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CashSaleDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cashSaleDetail.count(args);
  }

  async cashSaleDetails<T extends Prisma.CashSaleDetailFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashSaleDetailFindManyArgs>
  ): Promise<PrismaCashSaleDetail[]> {
    return this.prisma.cashSaleDetail.findMany<Prisma.CashSaleDetailFindManyArgs>(
      args
    );
  }
  async cashSaleDetail<T extends Prisma.CashSaleDetailFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashSaleDetailFindUniqueArgs>
  ): Promise<PrismaCashSaleDetail | null> {
    return this.prisma.cashSaleDetail.findUnique(args);
  }
  async createCashSaleDetail<T extends Prisma.CashSaleDetailCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashSaleDetailCreateArgs>
  ): Promise<PrismaCashSaleDetail> {
    return this.prisma.cashSaleDetail.create<T>(args);
  }
  async updateCashSaleDetail<T extends Prisma.CashSaleDetailUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashSaleDetailUpdateArgs>
  ): Promise<PrismaCashSaleDetail> {
    return this.prisma.cashSaleDetail.update<T>(args);
  }
  async deleteCashSaleDetail<T extends Prisma.CashSaleDetailDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashSaleDetailDeleteArgs>
  ): Promise<PrismaCashSaleDetail> {
    return this.prisma.cashSaleDetail.delete(args);
  }

  async getItems(parentId: number): Promise<PrismaItem | null> {
    return this.prisma.cashSaleDetail
      .findUnique({
        where: { id: parentId },
      })
      .items();
  }
}
