/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsInt,
  IsString,
  IsOptional,
  IsDate,
  ValidateNested,
  IsEnum,
  IsNumber,
} from "class-validator";
import { Type } from "class-transformer";
import { AngazaAccountCreateNestedManyWithoutFinancedSalesInput } from "./AngazaAccountCreateNestedManyWithoutFinancedSalesInput";
import { AngazaPaymentCreateNestedManyWithoutFinancedSalesInput } from "./AngazaPaymentCreateNestedManyWithoutFinancedSalesInput";
import { BillCreateNestedManyWithoutFinancedSalesInput } from "./BillCreateNestedManyWithoutFinancedSalesInput";
import { EnumFinancedSaleBloqueoConfirmado } from "./EnumFinancedSaleBloqueoConfirmado";
import { EnumFinancedSaleBloqueoPermanente } from "./EnumFinancedSaleBloqueoPermanente";
import { CashCountDetailWhereUniqueInput } from "../../cashCountDetail/base/CashCountDetailWhereUniqueInput";
import { ConektaPaymentTransacCreateNestedManyWithoutFinancedSalesInput } from "./ConektaPaymentTransacCreateNestedManyWithoutFinancedSalesInput";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { DocumentCreateNestedManyWithoutFinancedSalesInput } from "./DocumentCreateNestedManyWithoutFinancedSalesInput";
import { Decimal } from "decimal.js";
import { EnumFinancedSaleEstatusBloqueo } from "./EnumFinancedSaleEstatusBloqueo";
import { EnumFinancedSaleEstatusEquipo } from "./EnumFinancedSaleEstatusEquipo";
import { EnumFinancedSaleEstatusFinanc } from "./EnumFinancedSaleEstatusFinanc";
import { FinancedAccessoryCreateNestedManyWithoutFinancedSalesInput } from "./FinancedAccessoryCreateNestedManyWithoutFinancedSalesInput";
import { FinancedSalesLogCreateNestedManyWithoutFinancedSalesInput } from "./FinancedSalesLogCreateNestedManyWithoutFinancedSalesInput";
import { EnumFinancedSaleHabilitarPagoRecurrente } from "./EnumFinancedSaleHabilitarPagoRecurrente";
import { GraphQLBigInt } from "../../util/GraphQLBigInt";
import { EnumFinancedSaleIneVerificado } from "./EnumFinancedSaleIneVerificado";
import { ItemWhereUniqueInput } from "../../item/base/ItemWhereUniqueInput";
import { KardexCreateNestedManyWithoutFinancedSalesInput } from "./KardexCreateNestedManyWithoutFinancedSalesInput";
import { LoanedDeviceCreateNestedManyWithoutFinancedSalesInput } from "./LoanedDeviceCreateNestedManyWithoutFinancedSalesInput";
import { LockedDevBadCustomerCreateNestedManyWithoutFinancedSalesInput } from "./LockedDevBadCustomerCreateNestedManyWithoutFinancedSalesInput";
import { ModifiedPaymentCreateNestedManyWithoutFinancedSalesInput } from "./ModifiedPaymentCreateNestedManyWithoutFinancedSalesInput";
import { ModifiedSalesclerkCreateNestedManyWithoutFinancedSalesInput } from "./ModifiedSalesclerkCreateNestedManyWithoutFinancedSalesInput";
import { PaycodePaymentTransacCreateNestedManyWithoutFinancedSalesInput } from "./PaycodePaymentTransacCreateNestedManyWithoutFinancedSalesInput";
import { PaymentCreateNestedManyWithoutFinancedSalesInput } from "./PaymentCreateNestedManyWithoutFinancedSalesInput";
import { EnumFinancedSalePlazo } from "./EnumFinancedSalePlazo";
import { ProtectionCertActivationCreateNestedManyWithoutFinancedSalesInput } from "./ProtectionCertActivationCreateNestedManyWithoutFinancedSalesInput";
import { ProtectionCertWhereUniqueInput } from "../../protectionCert/base/ProtectionCertWhereUniqueInput";
import { RecurringPaymentCreateNestedManyWithoutFinancedSalesInput } from "./RecurringPaymentCreateNestedManyWithoutFinancedSalesInput";
import { StripePaymentTransacCreateNestedManyWithoutFinancedSalesInput } from "./StripePaymentTransacCreateNestedManyWithoutFinancedSalesInput";
import { WarehouseWhereUniqueInput } from "../../warehouse/base/WarehouseWhereUniqueInput";

@InputType()
class FinancedSaleCreateInput {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  adminAppUnregistered!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ajusteEnganche?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ajustePrecioVenta?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  altaPagoRecurrente?: Date | null;

  @ApiProperty({
    required: false,
    type: () => AngazaAccountCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => AngazaAccountCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => AngazaAccountCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  angazaAccounts?: AngazaAccountCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: () => AngazaPaymentCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => AngazaPaymentCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => AngazaPaymentCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  angazaPayments?: AngazaPaymentCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  authUserId?: number | null;

  @ApiProperty({
    required: false,
    type: () => BillCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => BillCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => BillCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  bills?: BillCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleBloqueoConfirmado,
  })
  @IsEnum(EnumFinancedSaleBloqueoConfirmado)
  @IsOptional()
  @Field(() => EnumFinancedSaleBloqueoConfirmado, {
    nullable: true,
  })
  bloqueo_confirmado?: "B" | "D" | null;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleBloqueoPermanente,
  })
  @IsEnum(EnumFinancedSaleBloqueoPermanente)
  @IsOptional()
  @Field(() => EnumFinancedSaleBloqueoPermanente, {
    nullable: true,
  })
  bloqueo_permanente?: "A" | "I" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  bloqueoProgramado?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  canceledUserId?: number | null;

  @ApiProperty({
    required: false,
    type: () => CashCountDetailWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CashCountDetailWhereUniqueInput)
  @IsOptional()
  @Field(() => CashCountDetailWhereUniqueInput, {
    nullable: true,
  })
  cashCountDetails?: CashCountDetailWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  codigoArtIccid?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  codigoBloqueo?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comentarios?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comentariosDescuento?: string | null;

  @ApiProperty({
    required: false,
    type: () => ConektaPaymentTransacCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => ConektaPaymentTransacCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => ConektaPaymentTransacCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  conektaPaymentTransacs?: ConektaPaymentTransacCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  createdUserId?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  customerPagoRecurrente?: string | null;

  @ApiProperty({
    required: false,
    type: () => CustomerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CustomerWhereUniqueInput)
  @IsOptional()
  @Field(() => CustomerWhereUniqueInput, {
    nullable: true,
  })
  customers?: CustomerWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  desctoPagoOportuno!: number;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  descuentoEspecial?: number | null;

  @ApiProperty({
    required: false,
    type: () => DocumentCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => DocumentCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => DocumentCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  documents?: DocumentCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  enganche!: Decimal;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleEstatusBloqueo,
  })
  @IsEnum(EnumFinancedSaleEstatusBloqueo)
  @IsOptional()
  @Field(() => EnumFinancedSaleEstatusBloqueo, {
    nullable: true,
  })
  estatus_bloqueo?: "A" | "B" | "DI" | null;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleEstatusEquipo,
  })
  @IsEnum(EnumFinancedSaleEstatusEquipo)
  @IsOptional()
  @Field(() => EnumFinancedSaleEstatusEquipo, {
    nullable: true,
  })
  estatus_equipo?: "A" | "I" | "E" | null;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleEstatusFinanc,
  })
  @IsEnum(EnumFinancedSaleEstatusFinanc)
  @IsOptional()
  @Field(() => EnumFinancedSaleEstatusFinanc, {
    nullable: true,
  })
  estatus_financ?: "A" | "T" | "C" | "P" | "R" | "CP" | "CT" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaCancelo?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaFinanc?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaPrimerPago?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaRegistro?: Date | null;

  @ApiProperty({
    required: false,
    type: () => FinancedAccessoryCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => FinancedAccessoryCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => FinancedAccessoryCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  financedAccessories?: FinancedAccessoryCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: () => FinancedSalesLogCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => FinancedSalesLogCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => FinancedSalesLogCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  financedSalesLog?: FinancedSalesLogCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  forceAdvancePayments?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  formaPago?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleHabilitarPagoRecurrente,
  })
  @IsEnum(EnumFinancedSaleHabilitarPagoRecurrente)
  @IsOptional()
  @Field(() => EnumFinancedSaleHabilitarPagoRecurrente, {
    nullable: true,
  })
  habilitar_pago_recurrente?: "A" | "I" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  iccid?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  idPlan?: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => GraphQLBigInt)
  imei!: bigint;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  imei2?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleIneVerificado,
  })
  @IsEnum(EnumFinancedSaleIneVerificado)
  @IsOptional()
  @Field(() => EnumFinancedSaleIneVerificado, {
    nullable: true,
  })
  ine_verificado?: "S" | "N" | null;

  @ApiProperty({
    required: true,
    type: () => ItemWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ItemWhereUniqueInput)
  @Field(() => ItemWhereUniqueInput)
  items!: ItemWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => KardexCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => KardexCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => KardexCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  kardex?: KardexCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: () => LoanedDeviceCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => LoanedDeviceCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => LoanedDeviceCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  loanedDevices?: LoanedDeviceCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: () => LockedDevBadCustomerCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => LockedDevBadCustomerCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => LockedDevBadCustomerCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  lockedDevBadCustomers?: LockedDevBadCustomerCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  mensajeAdvertenciaVenta?: string | null;

  @ApiProperty({
    required: false,
    type: () => ModifiedPaymentCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => ModifiedPaymentCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => ModifiedPaymentCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  modifiedPayments?: ModifiedPaymentCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: () => ModifiedSalesclerkCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => ModifiedSalesclerkCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => ModifiedSalesclerkCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  modifiedSalesclerks?: ModifiedSalesclerkCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  montoDescuento?: Decimal | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  montoFinanciado!: Decimal;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  montoPago!: Decimal;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  montoPagoInicial?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  msisdn?: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  numPagos!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  numPagosDescuento?: string | null;

  @ApiProperty({
    required: false,
    type: () => PaycodePaymentTransacCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => PaycodePaymentTransacCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => PaycodePaymentTransacCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  paycodePaymentTransacs?: PaycodePaymentTransacCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  paymentAgreement?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => PaymentCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => PaymentCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => PaymentCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  payments?: PaymentCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: true,
    enum: EnumFinancedSalePlazo,
  })
  @IsEnum(EnumFinancedSalePlazo)
  @Field(() => EnumFinancedSalePlazo)
  plazo!: "S" | "Q";

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  porcentajeDescEng?: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  precioLista!: Decimal;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  promotionId?: number | null;

  @ApiProperty({
    required: false,
    type: () =>
      ProtectionCertActivationCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => ProtectionCertActivationCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(
    () => ProtectionCertActivationCreateNestedManyWithoutFinancedSalesInput,
    {
      nullable: true,
    }
  )
  protectionCertActivations?: ProtectionCertActivationCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: () => ProtectionCertWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProtectionCertWhereUniqueInput)
  @IsOptional()
  @Field(() => ProtectionCertWhereUniqueInput, {
    nullable: true,
  })
  protectionCerts?: ProtectionCertWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  proveedorBloqueo?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  proveedorPagoRecurrente?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  rangoFinalDescuento?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  rangoInicialDescuento?: Date | null;

  @ApiProperty({
    required: false,
    type: () => RecurringPaymentCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => RecurringPaymentCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => RecurringPaymentCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  recurringPayments?: RecurringPaymentCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rutaArchivoDescuento?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rutaFirma?: string | null;

  @ApiProperty({
    required: false,
    type: () => StripePaymentTransacCreateNestedManyWithoutFinancedSalesInput,
  })
  @ValidateNested()
  @Type(() => StripePaymentTransacCreateNestedManyWithoutFinancedSalesInput)
  @IsOptional()
  @Field(() => StripePaymentTransacCreateNestedManyWithoutFinancedSalesInput, {
    nullable: true,
  })
  stripePaymentTransacs?: StripePaymentTransacCreateNestedManyWithoutFinancedSalesInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  tasaInteres!: Decimal;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  tasaInteresAnual!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  telefono?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  timeToReconfigNextlock?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  tokenPagoRecurrente?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ubicacion?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  ubicacionLatitud?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  ubicacionLongitud?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ubicacionMapa?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  ultimaConexion?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ultimaLocacion?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  unenrolledUserId?: number | null;

  @ApiProperty({
    required: false,
    type: () => WarehouseWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => WarehouseWhereUniqueInput)
  @IsOptional()
  @Field(() => WarehouseWhereUniqueInput, {
    nullable: true,
  })
  warehouses?: WarehouseWhereUniqueInput | null;
}

export { FinancedSaleCreateInput as FinancedSaleCreateInput };
