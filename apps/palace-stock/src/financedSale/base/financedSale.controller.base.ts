/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FinancedSaleService } from "../financedSale.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FinancedSaleCreateInput } from "./FinancedSaleCreateInput";
import { FinancedSale } from "./FinancedSale";
import { FinancedSaleFindManyArgs } from "./FinancedSaleFindManyArgs";
import { FinancedSaleWhereUniqueInput } from "./FinancedSaleWhereUniqueInput";
import { FinancedSaleUpdateInput } from "./FinancedSaleUpdateInput";
import { AngazaAccountFindManyArgs } from "../../angazaAccount/base/AngazaAccountFindManyArgs";
import { AngazaAccount } from "../../angazaAccount/base/AngazaAccount";
import { AngazaAccountWhereUniqueInput } from "../../angazaAccount/base/AngazaAccountWhereUniqueInput";
import { AngazaPaymentFindManyArgs } from "../../angazaPayment/base/AngazaPaymentFindManyArgs";
import { AngazaPayment } from "../../angazaPayment/base/AngazaPayment";
import { AngazaPaymentWhereUniqueInput } from "../../angazaPayment/base/AngazaPaymentWhereUniqueInput";
import { BillFindManyArgs } from "../../bill/base/BillFindManyArgs";
import { Bill } from "../../bill/base/Bill";
import { BillWhereUniqueInput } from "../../bill/base/BillWhereUniqueInput";
import { ConektaPaymentTransacFindManyArgs } from "../../conektaPaymentTransac/base/ConektaPaymentTransacFindManyArgs";
import { ConektaPaymentTransac } from "../../conektaPaymentTransac/base/ConektaPaymentTransac";
import { ConektaPaymentTransacWhereUniqueInput } from "../../conektaPaymentTransac/base/ConektaPaymentTransacWhereUniqueInput";
import { DocumentFindManyArgs } from "../../document/base/DocumentFindManyArgs";
import { Document } from "../../document/base/Document";
import { DocumentWhereUniqueInput } from "../../document/base/DocumentWhereUniqueInput";
import { FinancedAccessoryFindManyArgs } from "../../financedAccessory/base/FinancedAccessoryFindManyArgs";
import { FinancedAccessory } from "../../financedAccessory/base/FinancedAccessory";
import { FinancedAccessoryWhereUniqueInput } from "../../financedAccessory/base/FinancedAccessoryWhereUniqueInput";
import { FinancedSalesLogFindManyArgs } from "../../financedSalesLog/base/FinancedSalesLogFindManyArgs";
import { FinancedSalesLog } from "../../financedSalesLog/base/FinancedSalesLog";
import { FinancedSalesLogWhereUniqueInput } from "../../financedSalesLog/base/FinancedSalesLogWhereUniqueInput";
import { KardexFindManyArgs } from "../../kardex/base/KardexFindManyArgs";
import { Kardex } from "../../kardex/base/Kardex";
import { KardexWhereUniqueInput } from "../../kardex/base/KardexWhereUniqueInput";
import { LoanedDeviceFindManyArgs } from "../../loanedDevice/base/LoanedDeviceFindManyArgs";
import { LoanedDevice } from "../../loanedDevice/base/LoanedDevice";
import { LoanedDeviceWhereUniqueInput } from "../../loanedDevice/base/LoanedDeviceWhereUniqueInput";
import { LockedDevBadCustomerFindManyArgs } from "../../lockedDevBadCustomer/base/LockedDevBadCustomerFindManyArgs";
import { LockedDevBadCustomer } from "../../lockedDevBadCustomer/base/LockedDevBadCustomer";
import { LockedDevBadCustomerWhereUniqueInput } from "../../lockedDevBadCustomer/base/LockedDevBadCustomerWhereUniqueInput";
import { ModifiedPaymentFindManyArgs } from "../../modifiedPayment/base/ModifiedPaymentFindManyArgs";
import { ModifiedPayment } from "../../modifiedPayment/base/ModifiedPayment";
import { ModifiedPaymentWhereUniqueInput } from "../../modifiedPayment/base/ModifiedPaymentWhereUniqueInput";
import { ModifiedSalesclerkFindManyArgs } from "../../modifiedSalesclerk/base/ModifiedSalesclerkFindManyArgs";
import { ModifiedSalesclerk } from "../../modifiedSalesclerk/base/ModifiedSalesclerk";
import { ModifiedSalesclerkWhereUniqueInput } from "../../modifiedSalesclerk/base/ModifiedSalesclerkWhereUniqueInput";
import { PaycodePaymentTransacFindManyArgs } from "../../paycodePaymentTransac/base/PaycodePaymentTransacFindManyArgs";
import { PaycodePaymentTransac } from "../../paycodePaymentTransac/base/PaycodePaymentTransac";
import { PaycodePaymentTransacWhereUniqueInput } from "../../paycodePaymentTransac/base/PaycodePaymentTransacWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { ProtectionCertActivationFindManyArgs } from "../../protectionCertActivation/base/ProtectionCertActivationFindManyArgs";
import { ProtectionCertActivation } from "../../protectionCertActivation/base/ProtectionCertActivation";
import { ProtectionCertActivationWhereUniqueInput } from "../../protectionCertActivation/base/ProtectionCertActivationWhereUniqueInput";
import { RecurringPaymentFindManyArgs } from "../../recurringPayment/base/RecurringPaymentFindManyArgs";
import { RecurringPayment } from "../../recurringPayment/base/RecurringPayment";
import { RecurringPaymentWhereUniqueInput } from "../../recurringPayment/base/RecurringPaymentWhereUniqueInput";
import { StripePaymentTransacFindManyArgs } from "../../stripePaymentTransac/base/StripePaymentTransacFindManyArgs";
import { StripePaymentTransac } from "../../stripePaymentTransac/base/StripePaymentTransac";
import { StripePaymentTransacWhereUniqueInput } from "../../stripePaymentTransac/base/StripePaymentTransacWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FinancedSaleControllerBase {
  constructor(
    protected readonly service: FinancedSaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FinancedSale })
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFinancedSale(
    @common.Body() data: FinancedSaleCreateInput
  ): Promise<FinancedSale> {
    return await this.service.createFinancedSale({
      data: {
        ...data,

        cashCountDetails: data.cashCountDetails
          ? {
              connect: data.cashCountDetails,
            }
          : undefined,

        customers: data.customers
          ? {
              connect: data.customers,
            }
          : undefined,

        items: {
          connect: data.items,
        },

        protectionCerts: data.protectionCerts
          ? {
              connect: data.protectionCerts,
            }
          : undefined,

        warehouses: data.warehouses
          ? {
              connect: data.warehouses,
            }
          : undefined,
      },
      select: {
        adminAppUnregistered: true,
        ajusteEnganche: true,
        ajustePrecioVenta: true,
        altaPagoRecurrente: true,
        authUserId: true,
        bloqueo_confirmado: true,
        bloqueo_permanente: true,
        bloqueoProgramado: true,
        canceledUserId: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        codigoArtIccid: true,
        codigoBloqueo: true,
        comentarios: true,
        comentariosDescuento: true,
        createdUserId: true,
        customerPagoRecurrente: true,

        customers: {
          select: {
            id: true,
          },
        },

        desctoPagoOportuno: true,
        descuentoEspecial: true,
        enganche: true,
        estatus_bloqueo: true,
        estatus_equipo: true,
        estatus_financ: true,
        fechaCancelo: true,
        fechaFinanc: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        forceAdvancePayments: true,
        formaPago: true,
        habilitar_pago_recurrente: true,
        iccid: true,
        id: true,
        idPlan: true,
        imei: true,
        imei2: true,
        ine_verificado: true,

        items: {
          select: {
            id: true,
          },
        },

        mensajeAdvertenciaVenta: true,
        montoDescuento: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        msisdn: true,
        numPagos: true,
        numPagosDescuento: true,
        paymentAgreement: true,
        plazo: true,
        porcentajeDescEng: true,
        precioLista: true,
        promotionId: true,

        protectionCerts: {
          select: {
            id: true,
          },
        },

        proveedorBloqueo: true,
        proveedorPagoRecurrente: true,
        rangoFinalDescuento: true,
        rangoInicialDescuento: true,
        rutaArchivoDescuento: true,
        rutaFirma: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefono: true,
        timeToReconfigNextlock: true,
        tokenPagoRecurrente: true,
        ubicacion: true,
        ubicacionLatitud: true,
        ubicacionLongitud: true,
        ubicacionMapa: true,
        ultimaConexion: true,
        ultimaLocacion: true,
        unenrolledUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FinancedSale] })
  @ApiNestedQuery(FinancedSaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async financedSales(@common.Req() request: Request): Promise<FinancedSale[]> {
    const args = plainToClass(FinancedSaleFindManyArgs, request.query);
    return this.service.financedSales({
      ...args,
      select: {
        adminAppUnregistered: true,
        ajusteEnganche: true,
        ajustePrecioVenta: true,
        altaPagoRecurrente: true,
        authUserId: true,
        bloqueo_confirmado: true,
        bloqueo_permanente: true,
        bloqueoProgramado: true,
        canceledUserId: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        codigoArtIccid: true,
        codigoBloqueo: true,
        comentarios: true,
        comentariosDescuento: true,
        createdUserId: true,
        customerPagoRecurrente: true,

        customers: {
          select: {
            id: true,
          },
        },

        desctoPagoOportuno: true,
        descuentoEspecial: true,
        enganche: true,
        estatus_bloqueo: true,
        estatus_equipo: true,
        estatus_financ: true,
        fechaCancelo: true,
        fechaFinanc: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        forceAdvancePayments: true,
        formaPago: true,
        habilitar_pago_recurrente: true,
        iccid: true,
        id: true,
        idPlan: true,
        imei: true,
        imei2: true,
        ine_verificado: true,

        items: {
          select: {
            id: true,
          },
        },

        mensajeAdvertenciaVenta: true,
        montoDescuento: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        msisdn: true,
        numPagos: true,
        numPagosDescuento: true,
        paymentAgreement: true,
        plazo: true,
        porcentajeDescEng: true,
        precioLista: true,
        promotionId: true,

        protectionCerts: {
          select: {
            id: true,
          },
        },

        proveedorBloqueo: true,
        proveedorPagoRecurrente: true,
        rangoFinalDescuento: true,
        rangoInicialDescuento: true,
        rutaArchivoDescuento: true,
        rutaFirma: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefono: true,
        timeToReconfigNextlock: true,
        tokenPagoRecurrente: true,
        ubicacion: true,
        ubicacionLatitud: true,
        ubicacionLongitud: true,
        ubicacionMapa: true,
        ultimaConexion: true,
        ultimaLocacion: true,
        unenrolledUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FinancedSale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async financedSale(
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<FinancedSale | null> {
    const result = await this.service.financedSale({
      where: params,
      select: {
        adminAppUnregistered: true,
        ajusteEnganche: true,
        ajustePrecioVenta: true,
        altaPagoRecurrente: true,
        authUserId: true,
        bloqueo_confirmado: true,
        bloqueo_permanente: true,
        bloqueoProgramado: true,
        canceledUserId: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        codigoArtIccid: true,
        codigoBloqueo: true,
        comentarios: true,
        comentariosDescuento: true,
        createdUserId: true,
        customerPagoRecurrente: true,

        customers: {
          select: {
            id: true,
          },
        },

        desctoPagoOportuno: true,
        descuentoEspecial: true,
        enganche: true,
        estatus_bloqueo: true,
        estatus_equipo: true,
        estatus_financ: true,
        fechaCancelo: true,
        fechaFinanc: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        forceAdvancePayments: true,
        formaPago: true,
        habilitar_pago_recurrente: true,
        iccid: true,
        id: true,
        idPlan: true,
        imei: true,
        imei2: true,
        ine_verificado: true,

        items: {
          select: {
            id: true,
          },
        },

        mensajeAdvertenciaVenta: true,
        montoDescuento: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        msisdn: true,
        numPagos: true,
        numPagosDescuento: true,
        paymentAgreement: true,
        plazo: true,
        porcentajeDescEng: true,
        precioLista: true,
        promotionId: true,

        protectionCerts: {
          select: {
            id: true,
          },
        },

        proveedorBloqueo: true,
        proveedorPagoRecurrente: true,
        rangoFinalDescuento: true,
        rangoInicialDescuento: true,
        rutaArchivoDescuento: true,
        rutaFirma: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefono: true,
        timeToReconfigNextlock: true,
        tokenPagoRecurrente: true,
        ubicacion: true,
        ubicacionLatitud: true,
        ubicacionLongitud: true,
        ubicacionMapa: true,
        ultimaConexion: true,
        ultimaLocacion: true,
        unenrolledUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FinancedSale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFinancedSale(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() data: FinancedSaleUpdateInput
  ): Promise<FinancedSale | null> {
    try {
      return await this.service.updateFinancedSale({
        where: params,
        data: {
          ...data,

          cashCountDetails: data.cashCountDetails
            ? {
                connect: data.cashCountDetails,
              }
            : undefined,

          customers: data.customers
            ? {
                connect: data.customers,
              }
            : undefined,

          items: {
            connect: data.items,
          },

          protectionCerts: data.protectionCerts
            ? {
                connect: data.protectionCerts,
              }
            : undefined,

          warehouses: data.warehouses
            ? {
                connect: data.warehouses,
              }
            : undefined,
        },
        select: {
          adminAppUnregistered: true,
          ajusteEnganche: true,
          ajustePrecioVenta: true,
          altaPagoRecurrente: true,
          authUserId: true,
          bloqueo_confirmado: true,
          bloqueo_permanente: true,
          bloqueoProgramado: true,
          canceledUserId: true,

          cashCountDetails: {
            select: {
              id: true,
            },
          },

          codigoArtIccid: true,
          codigoBloqueo: true,
          comentarios: true,
          comentariosDescuento: true,
          createdUserId: true,
          customerPagoRecurrente: true,

          customers: {
            select: {
              id: true,
            },
          },

          desctoPagoOportuno: true,
          descuentoEspecial: true,
          enganche: true,
          estatus_bloqueo: true,
          estatus_equipo: true,
          estatus_financ: true,
          fechaCancelo: true,
          fechaFinanc: true,
          fechaPrimerPago: true,
          fechaRegistro: true,
          forceAdvancePayments: true,
          formaPago: true,
          habilitar_pago_recurrente: true,
          iccid: true,
          id: true,
          idPlan: true,
          imei: true,
          imei2: true,
          ine_verificado: true,

          items: {
            select: {
              id: true,
            },
          },

          mensajeAdvertenciaVenta: true,
          montoDescuento: true,
          montoFinanciado: true,
          montoPago: true,
          montoPagoInicial: true,
          msisdn: true,
          numPagos: true,
          numPagosDescuento: true,
          paymentAgreement: true,
          plazo: true,
          porcentajeDescEng: true,
          precioLista: true,
          promotionId: true,

          protectionCerts: {
            select: {
              id: true,
            },
          },

          proveedorBloqueo: true,
          proveedorPagoRecurrente: true,
          rangoFinalDescuento: true,
          rangoInicialDescuento: true,
          rutaArchivoDescuento: true,
          rutaFirma: true,
          tasaInteres: true,
          tasaInteresAnual: true,
          telefono: true,
          timeToReconfigNextlock: true,
          tokenPagoRecurrente: true,
          ubicacion: true,
          ubicacionLatitud: true,
          ubicacionLongitud: true,
          ubicacionMapa: true,
          ultimaConexion: true,
          ultimaLocacion: true,
          unenrolledUserId: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FinancedSale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFinancedSale(
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<FinancedSale | null> {
    try {
      return await this.service.deleteFinancedSale({
        where: params,
        select: {
          adminAppUnregistered: true,
          ajusteEnganche: true,
          ajustePrecioVenta: true,
          altaPagoRecurrente: true,
          authUserId: true,
          bloqueo_confirmado: true,
          bloqueo_permanente: true,
          bloqueoProgramado: true,
          canceledUserId: true,

          cashCountDetails: {
            select: {
              id: true,
            },
          },

          codigoArtIccid: true,
          codigoBloqueo: true,
          comentarios: true,
          comentariosDescuento: true,
          createdUserId: true,
          customerPagoRecurrente: true,

          customers: {
            select: {
              id: true,
            },
          },

          desctoPagoOportuno: true,
          descuentoEspecial: true,
          enganche: true,
          estatus_bloqueo: true,
          estatus_equipo: true,
          estatus_financ: true,
          fechaCancelo: true,
          fechaFinanc: true,
          fechaPrimerPago: true,
          fechaRegistro: true,
          forceAdvancePayments: true,
          formaPago: true,
          habilitar_pago_recurrente: true,
          iccid: true,
          id: true,
          idPlan: true,
          imei: true,
          imei2: true,
          ine_verificado: true,

          items: {
            select: {
              id: true,
            },
          },

          mensajeAdvertenciaVenta: true,
          montoDescuento: true,
          montoFinanciado: true,
          montoPago: true,
          montoPagoInicial: true,
          msisdn: true,
          numPagos: true,
          numPagosDescuento: true,
          paymentAgreement: true,
          plazo: true,
          porcentajeDescEng: true,
          precioLista: true,
          promotionId: true,

          protectionCerts: {
            select: {
              id: true,
            },
          },

          proveedorBloqueo: true,
          proveedorPagoRecurrente: true,
          rangoFinalDescuento: true,
          rangoInicialDescuento: true,
          rutaArchivoDescuento: true,
          rutaFirma: true,
          tasaInteres: true,
          tasaInteresAnual: true,
          telefono: true,
          timeToReconfigNextlock: true,
          tokenPagoRecurrente: true,
          ubicacion: true,
          ubicacionLatitud: true,
          ubicacionLongitud: true,
          ubicacionMapa: true,
          ultimaConexion: true,
          ultimaLocacion: true,
          unenrolledUserId: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/angazaAccounts")
  @ApiNestedQuery(AngazaAccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AngazaAccount",
    action: "read",
    possession: "any",
  })
  async findAngazaAccounts(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<AngazaAccount[]> {
    const query = plainToClass(AngazaAccountFindManyArgs, request.query);
    const results = await this.service.findAngazaAccounts(params.id, {
      ...query,
      select: {
        billingModel: true,
        clientQids: true,
        cumulativeDaysDisabled: true,
        currency: true,

        customers: {
          select: {
            id: true,
          },
        },

        downPayment: true,
        downPaymentDaysIncluded: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        fullPrice: true,
        id: true,
        latestPaymentWhen: true,
        minimumPayment: true,
        paymentAmountPerPeriod: true,
        paymentDueDate: true,
        paymentPeriodInDays: true,
        qid: true,
        registrationDate: true,
        status: true,
        totalPaid: true,
        unitNumber: true,
        uuidIdentifier: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/angazaAccounts")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectAngazaAccounts(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: AngazaAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      angazaAccounts: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/angazaAccounts")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateAngazaAccounts(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: AngazaAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      angazaAccounts: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/angazaAccounts")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectAngazaAccounts(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: AngazaAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      angazaAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/angazaPayments")
  @ApiNestedQuery(AngazaPaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AngazaPayment",
    action: "read",
    possession: "any",
  })
  async findAngazaPayments(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<AngazaPayment[]> {
    const query = plainToClass(AngazaPaymentFindManyArgs, request.query);
    const results = await this.service.findAngazaPayments(params.id, {
      ...query,
      select: {
        accountNumber: true,
        accountQid: true,
        amount: true,
        angazaTransactionQid: true,
        currency: true,
        effectiveDate: true,
        externalXref: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        isReversed: true,
        msisdn: true,
        payQid: true,
        uuidIdentifier: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/angazaPayments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectAngazaPayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: AngazaPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      angazaPayments: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/angazaPayments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateAngazaPayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: AngazaPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      angazaPayments: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/angazaPayments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectAngazaPayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: AngazaPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      angazaPayments: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bills")
  @ApiNestedQuery(BillFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "any",
  })
  async findBills(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<Bill[]> {
    const query = plainToClass(BillFindManyArgs, request.query);
    const results = await this.service.findBills(params.id, {
      ...query,
      select: {
        billConcept: true,
        billingId: true,
        bill_status: true,
        canceledUserId: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        clientCode: true,
        codigoConcepto: true,
        complementId: true,
        createdUserId: true,
        engancheFinanc: true,
        factura_cerrada: true,
        fechaActualizacion: true,
        fechaCancelacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        folio: true,
        horaRegistro: true,
        id: true,
        mensajeEstatus: true,
        montoFactura: true,

        payments: {
          select: {
            id: true,
          },
        },

        referenceId: true,
        rutaPdf: true,
        rutaXml: true,
        saldoFactura: true,
        saldoFacturaTemp: true,
        serie: true,
        stampedAt: true,
        tipo_docto: true,
        tipo_sucursal: true,
        updatedUserId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bills")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectBills(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: BillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bills: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bills")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateBills(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: BillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bills: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bills")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectBills(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: BillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bills: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/conektaPaymentTransacs")
  @ApiNestedQuery(ConektaPaymentTransacFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "read",
    possession: "any",
  })
  async findConektaPaymentTransacs(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<ConektaPaymentTransac[]> {
    const query = plainToClass(
      ConektaPaymentTransacFindManyArgs,
      request.query
    );
    const results = await this.service.findConektaPaymentTransacs(params.id, {
      ...query,
      select: {
        amount: true,
        authCode: true,
        clabe: true,
        createdAt: true,
        datosPago: true,
        expiresAt: true,
        fechaActualizacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        habilitarPagoRecurrente: true,
        id: true,
        issuer: true,
        last4: true,
        metodoPago: true,
        orderId: true,
        payStatus: true,
        reference: true,
        rutaRef: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/conektaPaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectConektaPaymentTransacs(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ConektaPaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaPaymentTransacs: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/conektaPaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateConektaPaymentTransacs(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ConektaPaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaPaymentTransacs: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/conektaPaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectConektaPaymentTransacs(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ConektaPaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaPaymentTransacs: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/documents")
  @ApiNestedQuery(DocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Document",
    action: "read",
    possession: "any",
  })
  async findDocuments(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<Document[]> {
    const query = plainToClass(DocumentFindManyArgs, request.query);
    const results = await this.service.findDocuments(params.id, {
      ...query,
      select: {
        collaborators: {
          select: {
            id: true,
          },
        },

        customers: {
          select: {
            id: true,
          },
        },

        direccion: true,
        documentTypeId: true,
        estatus: true,
        fechaHoraCarga: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        idCertProtecAct: true,
        idFicha: true,
        nombreOriginal: true,
        numTicket: true,

        payments: {
          select: {
            id: true,
          },
        },

        validado: true,
        validatedAt: true,
        validationUserId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectDocuments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateDocuments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/documents")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectDocuments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: DocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      documents: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/financedAccessories")
  @ApiNestedQuery(FinancedAccessoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FinancedAccessory",
    action: "read",
    possession: "any",
  })
  async findFinancedAccessories(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<FinancedAccessory[]> {
    const query = plainToClass(FinancedAccessoryFindManyArgs, request.query);
    const results = await this.service.findFinancedAccessories(params.id, {
      ...query,
      select: {
        cantUnidades: true,
        engancheAccesorio: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        precioVenta: true,

        transactions: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/financedAccessories")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectFinancedAccessories(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: FinancedAccessoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedAccessories: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/financedAccessories")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateFinancedAccessories(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: FinancedAccessoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedAccessories: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/financedAccessories")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectFinancedAccessories(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: FinancedAccessoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedAccessories: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/financedSalesLog")
  @ApiNestedQuery(FinancedSalesLogFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FinancedSalesLog",
    action: "read",
    possession: "any",
  })
  async findFinancedSalesLog(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<FinancedSalesLog[]> {
    const query = plainToClass(FinancedSalesLogFindManyArgs, request.query);
    const results = await this.service.findFinancedSalesLog(params.id, {
      ...query,
      select: {
        fechaUltimaEdicion: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        idUsrUltimaEdicion: true,
        infoFinanc: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/financedSalesLog")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectFinancedSalesLog(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: FinancedSalesLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSalesLog: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/financedSalesLog")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateFinancedSalesLog(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: FinancedSalesLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSalesLog: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/financedSalesLog")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectFinancedSalesLog(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: FinancedSalesLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSalesLog: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/kardex")
  @ApiNestedQuery(KardexFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Kardex",
    action: "read",
    possession: "any",
  })
  async findKardex(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<Kardex[]> {
    const query = plainToClass(KardexFindManyArgs, request.query);
    const results = await this.service.findKardex(params.id, {
      ...query,
      select: {
        cantUnidades: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        ivaUnidad: true,

        payments: {
          select: {
            id: true,
          },
        },

        personalLoans: {
          select: {
            id: true,
          },
        },

        precioUnidad: true,
        tipo_inventario: true,

        transactions: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectKardex(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateKardex(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectKardex(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/loanedDevices")
  @ApiNestedQuery(LoanedDeviceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LoanedDevice",
    action: "read",
    possession: "any",
  })
  async findLoanedDevices(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<LoanedDevice[]> {
    const query = plainToClass(LoanedDeviceFindManyArgs, request.query);
    const results = await this.service.findLoanedDevices(params.id, {
      ...query,
      select: {
        codigoSerie: true,
        comentarios: true,

        customers: {
          select: {
            id: true,
          },
        },

        fechaDevolucion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        loanStatus: true,

        usersLoanedDevicesCreatedUserIdTousers: {
          select: {
            id: true,
          },
        },

        usersLoanedDevicesReturnedUserIdTousers: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/loanedDevices")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectLoanedDevices(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevices: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/loanedDevices")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateLoanedDevices(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevices: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/loanedDevices")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectLoanedDevices(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevices: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/lockedDevBadCustomers")
  @ApiNestedQuery(LockedDevBadCustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LockedDevBadCustomer",
    action: "read",
    possession: "any",
  })
  async findLockedDevBadCustomers(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<LockedDevBadCustomer[]> {
    const query = plainToClass(LockedDevBadCustomerFindManyArgs, request.query);
    const results = await this.service.findLockedDevBadCustomers(params.id, {
      ...query,
      select: {
        codigoBloqueoMoroso: true,

        customers: {
          select: {
            id: true,
          },
        },

        deviceId: true,
        fechaBloqueado: true,
        fechaDesbloqueado: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        forced_status: true,
        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lockedDevBadCustomers")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectLockedDevBadCustomers(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: LockedDevBadCustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lockedDevBadCustomers: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lockedDevBadCustomers")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateLockedDevBadCustomers(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: LockedDevBadCustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lockedDevBadCustomers: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lockedDevBadCustomers")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectLockedDevBadCustomers(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: LockedDevBadCustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lockedDevBadCustomers: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/modifiedPayments")
  @ApiNestedQuery(ModifiedPaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ModifiedPayment",
    action: "read",
    possession: "any",
  })
  async findModifiedPayments(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<ModifiedPayment[]> {
    const query = plainToClass(ModifiedPaymentFindManyArgs, request.query);
    const results = await this.service.findModifiedPayments(params.id, {
      ...query,
      select: {
        comentarios: true,
        estatus_pago: true,
        fechaHoraRegistro: true,
        fechaUltimaEdicion: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        idUsrUltimaEdicion: true,
        infoPago: true,
        numPago: true,

        payments: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/modifiedPayments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectModifiedPayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ModifiedPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedPayments: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/modifiedPayments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateModifiedPayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ModifiedPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedPayments: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/modifiedPayments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectModifiedPayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ModifiedPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedPayments: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/modifiedSalesclerks")
  @ApiNestedQuery(ModifiedSalesclerkFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ModifiedSalesclerk",
    action: "read",
    possession: "any",
  })
  async findModifiedSalesclerks(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<ModifiedSalesclerk[]> {
    const query = plainToClass(ModifiedSalesclerkFindManyArgs, request.query);
    const results = await this.service.findModifiedSalesclerks(params.id, {
      ...query,
      select: {
        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        newSalesclerkUserId: true,
        oldSalesclerkUserId: true,
        personalLoanId: true,
        updatedAt: true,
        updatedUserId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/modifiedSalesclerks")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectModifiedSalesclerks(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ModifiedSalesclerkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedSalesclerks: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/modifiedSalesclerks")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateModifiedSalesclerks(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ModifiedSalesclerkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedSalesclerks: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/modifiedSalesclerks")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectModifiedSalesclerks(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ModifiedSalesclerkWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedSalesclerks: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paycodePaymentTransacs")
  @ApiNestedQuery(PaycodePaymentTransacFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaycodePaymentTransac",
    action: "read",
    possession: "any",
  })
  async findPaycodePaymentTransacs(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<PaycodePaymentTransac[]> {
    const query = plainToClass(
      PaycodePaymentTransacFindManyArgs,
      request.query
    );
    const results = await this.service.findPaycodePaymentTransacs(params.id, {
      ...query,
      select: {
        bank: true,
        beneficiary: true,
        clabe: true,
        concept: true,
        datosPago: true,
        displayMessage: true,
        estatusCobro: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        habilitarPagoRecurrente: true,
        id: true,
        referenceNumber: true,
        trackCode: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paycodePaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectPaycodePaymentTransacs(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: PaycodePaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paycodePaymentTransacs: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paycodePaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updatePaycodePaymentTransacs(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: PaycodePaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paycodePaymentTransacs: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paycodePaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectPaycodePaymentTransacs(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: PaycodePaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paycodePaymentTransacs: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        abonoExtra: true,
        cambioDevuelto: true,
        canceledUserId: true,
        cantidadRecibida: true,
        capitalPagado: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        comentariosPago: true,
        comprobantePago: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        customerId: true,
        desctoAplicado: true,
        desdeWebhook: true,
        fechaCancelo: true,
        fechaPago: true,
        fechaProxVenc: true,
        fechaVenc: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        formaPago: true,
        horaPago: true,
        id: true,
        interesPagado: true,
        opcionCambio: true,
        opcionPago: true,
        pagoRecurrente: true,
        pagosAdelantados: true,
        pathFileDiscount: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        payCount: true,
        pay_status: true,
        pay_type: true,
        percentageDiscountDownPayment: true,

        personalLoans: {
          select: {
            id: true,
          },
        },

        promotionId: true,
        receivedUserId: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectPayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updatePayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectPayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/protectionCertActivations")
  @ApiNestedQuery(ProtectionCertActivationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProtectionCertActivation",
    action: "read",
    possession: "any",
  })
  async findProtectionCertActivations(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<ProtectionCertActivation[]> {
    const query = plainToClass(
      ProtectionCertActivationFindManyArgs,
      request.query
    );
    const results = await this.service.findProtectionCertActivations(
      params.id,
      {
        ...query,
        select: {
          authUserId: true,
          codigoBloqueo: true,
          codigoBloqueoApartado: true,
          codigoSerie: true,
          codigoSerieApartado: true,
          comentario: true,

          customers: {
            select: {
              id: true,
            },
          },

          deductPaymentId: true,
          devolvioEquipoApartado: true,
          diffPaymentId: true,
          estatus_bloqueo_apartado: true,
          estatusCertProtec: true,
          estatusReparacion: true,
          fechaAct: true,
          fechaAutorizacion: true,
          fechaUltActualizacion: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          id: true,
          idUsrAct: true,

          itemsProtectionCertActivationsItemIdToitems: {
            select: {
              id: true,
            },
          },

          itemsProtectionCertActivationsReservedItemIdToitems: {
            select: {
              id: true,
            },
          },

          pagoDeducible: true,
          pagoDiferencia: true,
          precioLista: true,
          precioListaApartado: true,
          precioReparacion: true,
          protectionCertId: true,
          tipoProtec: true,
          updatedUserId: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/protectionCertActivations")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectProtectionCertActivations(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivations: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/protectionCertActivations")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateProtectionCertActivations(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivations: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/protectionCertActivations")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectProtectionCertActivations(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivations: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/recurringPayments")
  @ApiNestedQuery(RecurringPaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RecurringPayment",
    action: "read",
    possession: "any",
  })
  async findRecurringPayments(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<RecurringPayment[]> {
    const query = plainToClass(RecurringPaymentFindManyArgs, request.query);
    const results = await this.service.findRecurringPayments(params.id, {
      ...query,
      select: {
        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        estatus_intento: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        horaRegistro: true,
        id: true,
        mensajeIntento: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recurringPayments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectRecurringPayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: RecurringPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recurringPayments: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recurringPayments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateRecurringPayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: RecurringPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recurringPayments: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recurringPayments")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectRecurringPayments(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: RecurringPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recurringPayments: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/stripePaymentTransacs")
  @ApiNestedQuery(StripePaymentTransacFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "read",
    possession: "any",
  })
  async findStripePaymentTransacs(
    @common.Req() request: Request,
    @common.Param() params: FinancedSaleWhereUniqueInput
  ): Promise<StripePaymentTransac[]> {
    const query = plainToClass(StripePaymentTransacFindManyArgs, request.query);
    const results = await this.service.findStripePaymentTransacs(params.id, {
      ...query,
      select: {
        amount: true,
        created: true,
        datosPago: true,
        eventStatus: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        habilitarPagoRecurrente: true,
        id: true,
        linkVoucher: true,
        metodoPago: true,
        paymentIntent: true,
        stripeClientSecret: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stripePaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async connectStripePaymentTransacs(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: StripePaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stripePaymentTransacs: {
        connect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stripePaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async updateStripePaymentTransacs(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: StripePaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stripePaymentTransacs: {
        set: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stripePaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "update",
    possession: "any",
  })
  async disconnectStripePaymentTransacs(
    @common.Param() params: FinancedSaleWhereUniqueInput,
    @common.Body() body: StripePaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stripePaymentTransacs: {
        disconnect: body,
      },
    };
    await this.service.updateFinancedSale({
      where: params,
      data,
      select: { id: true },
    });
  }
}
