/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IntFilter } from "../../util/IntFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested, IsEnum } from "class-validator";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { AngazaAccountListRelationFilter } from "../../angazaAccount/base/AngazaAccountListRelationFilter";
import { AngazaPaymentListRelationFilter } from "../../angazaPayment/base/AngazaPaymentListRelationFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { BillListRelationFilter } from "../../bill/base/BillListRelationFilter";
import { EnumFinancedSaleBloqueoConfirmado } from "./EnumFinancedSaleBloqueoConfirmado";
import { EnumFinancedSaleBloqueoPermanente } from "./EnumFinancedSaleBloqueoPermanente";
import { CashCountDetailWhereUniqueInput } from "../../cashCountDetail/base/CashCountDetailWhereUniqueInput";
import { ConektaPaymentTransacListRelationFilter } from "../../conektaPaymentTransac/base/ConektaPaymentTransacListRelationFilter";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { DocumentListRelationFilter } from "../../document/base/DocumentListRelationFilter";
import { DecimalFilter } from "../../util/DecimalFilter";
import { EnumFinancedSaleEstatusBloqueo } from "./EnumFinancedSaleEstatusBloqueo";
import { EnumFinancedSaleEstatusEquipo } from "./EnumFinancedSaleEstatusEquipo";
import { EnumFinancedSaleEstatusFinanc } from "./EnumFinancedSaleEstatusFinanc";
import { FinancedAccessoryListRelationFilter } from "../../financedAccessory/base/FinancedAccessoryListRelationFilter";
import { FinancedSalesLogListRelationFilter } from "../../financedSalesLog/base/FinancedSalesLogListRelationFilter";
import { EnumFinancedSaleHabilitarPagoRecurrente } from "./EnumFinancedSaleHabilitarPagoRecurrente";
import { BigIntFilter } from "../../util/BigIntFilter";
import { EnumFinancedSaleIneVerificado } from "./EnumFinancedSaleIneVerificado";
import { ItemWhereUniqueInput } from "../../item/base/ItemWhereUniqueInput";
import { KardexListRelationFilter } from "../../kardex/base/KardexListRelationFilter";
import { LoanedDeviceListRelationFilter } from "../../loanedDevice/base/LoanedDeviceListRelationFilter";
import { LockedDevBadCustomerListRelationFilter } from "../../lockedDevBadCustomer/base/LockedDevBadCustomerListRelationFilter";
import { ModifiedPaymentListRelationFilter } from "../../modifiedPayment/base/ModifiedPaymentListRelationFilter";
import { ModifiedSalesclerkListRelationFilter } from "../../modifiedSalesclerk/base/ModifiedSalesclerkListRelationFilter";
import { DecimalNullableFilter } from "../../util/DecimalNullableFilter";
import { PaycodePaymentTransacListRelationFilter } from "../../paycodePaymentTransac/base/PaycodePaymentTransacListRelationFilter";
import { PaymentListRelationFilter } from "../../payment/base/PaymentListRelationFilter";
import { EnumFinancedSalePlazo } from "./EnumFinancedSalePlazo";
import { ProtectionCertActivationListRelationFilter } from "../../protectionCertActivation/base/ProtectionCertActivationListRelationFilter";
import { ProtectionCertWhereUniqueInput } from "../../protectionCert/base/ProtectionCertWhereUniqueInput";
import { RecurringPaymentListRelationFilter } from "../../recurringPayment/base/RecurringPaymentListRelationFilter";
import { StripePaymentTransacListRelationFilter } from "../../stripePaymentTransac/base/StripePaymentTransacListRelationFilter";
import { WarehouseWhereUniqueInput } from "../../warehouse/base/WarehouseWhereUniqueInput";

@InputType()
class FinancedSaleWhereInput {
  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  adminAppUnregistered?: IntFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  ajusteEnganche?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  ajustePrecioVenta?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  altaPagoRecurrente?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => AngazaAccountListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AngazaAccountListRelationFilter)
  @IsOptional()
  @Field(() => AngazaAccountListRelationFilter, {
    nullable: true,
  })
  angazaAccounts?: AngazaAccountListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => AngazaPaymentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AngazaPaymentListRelationFilter)
  @IsOptional()
  @Field(() => AngazaPaymentListRelationFilter, {
    nullable: true,
  })
  angazaPayments?: AngazaPaymentListRelationFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  authUserId?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => BillListRelationFilter,
  })
  @ValidateNested()
  @Type(() => BillListRelationFilter)
  @IsOptional()
  @Field(() => BillListRelationFilter, {
    nullable: true,
  })
  bills?: BillListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleBloqueoConfirmado,
  })
  @IsEnum(EnumFinancedSaleBloqueoConfirmado)
  @IsOptional()
  @Field(() => EnumFinancedSaleBloqueoConfirmado, {
    nullable: true,
  })
  bloqueo_confirmado?: "B" | "D";

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleBloqueoPermanente,
  })
  @IsEnum(EnumFinancedSaleBloqueoPermanente)
  @IsOptional()
  @Field(() => EnumFinancedSaleBloqueoPermanente, {
    nullable: true,
  })
  bloqueo_permanente?: "A" | "I";

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  bloqueoProgramado?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  canceledUserId?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => CashCountDetailWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CashCountDetailWhereUniqueInput)
  @IsOptional()
  @Field(() => CashCountDetailWhereUniqueInput, {
    nullable: true,
  })
  cashCountDetails?: CashCountDetailWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  codigoArtIccid?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  codigoBloqueo?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  comentarios?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  comentariosDescuento?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ConektaPaymentTransacListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ConektaPaymentTransacListRelationFilter)
  @IsOptional()
  @Field(() => ConektaPaymentTransacListRelationFilter, {
    nullable: true,
  })
  conektaPaymentTransacs?: ConektaPaymentTransacListRelationFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  createdUserId?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  customerPagoRecurrente?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => CustomerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CustomerWhereUniqueInput)
  @IsOptional()
  @Field(() => CustomerWhereUniqueInput, {
    nullable: true,
  })
  customers?: CustomerWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  desctoPagoOportuno?: IntFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  descuentoEspecial?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => DocumentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DocumentListRelationFilter)
  @IsOptional()
  @Field(() => DocumentListRelationFilter, {
    nullable: true,
  })
  documents?: DocumentListRelationFilter;

  @ApiProperty({
    required: false,
    type: DecimalFilter,
  })
  @Type(() => DecimalFilter)
  @IsOptional()
  @Field(() => DecimalFilter, {
    nullable: true,
  })
  enganche?: DecimalFilter;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleEstatusBloqueo,
  })
  @IsEnum(EnumFinancedSaleEstatusBloqueo)
  @IsOptional()
  @Field(() => EnumFinancedSaleEstatusBloqueo, {
    nullable: true,
  })
  estatus_bloqueo?: "A" | "B" | "DI";

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleEstatusEquipo,
  })
  @IsEnum(EnumFinancedSaleEstatusEquipo)
  @IsOptional()
  @Field(() => EnumFinancedSaleEstatusEquipo, {
    nullable: true,
  })
  estatus_equipo?: "A" | "I" | "E";

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleEstatusFinanc,
  })
  @IsEnum(EnumFinancedSaleEstatusFinanc)
  @IsOptional()
  @Field(() => EnumFinancedSaleEstatusFinanc, {
    nullable: true,
  })
  estatus_financ?: "A" | "T" | "C" | "P" | "R" | "CP" | "CT";

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  fechaCancelo?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  fechaFinanc?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  fechaPrimerPago?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  fechaRegistro?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => FinancedAccessoryListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FinancedAccessoryListRelationFilter)
  @IsOptional()
  @Field(() => FinancedAccessoryListRelationFilter, {
    nullable: true,
  })
  financedAccessories?: FinancedAccessoryListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => FinancedSalesLogListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FinancedSalesLogListRelationFilter)
  @IsOptional()
  @Field(() => FinancedSalesLogListRelationFilter, {
    nullable: true,
  })
  financedSalesLog?: FinancedSalesLogListRelationFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  forceAdvancePayments?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  formaPago?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleHabilitarPagoRecurrente,
  })
  @IsEnum(EnumFinancedSaleHabilitarPagoRecurrente)
  @IsOptional()
  @Field(() => EnumFinancedSaleHabilitarPagoRecurrente, {
    nullable: true,
  })
  habilitar_pago_recurrente?: "A" | "I";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  iccid?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  id?: IntFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  idPlan?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: BigIntFilter,
  })
  @Type(() => BigIntFilter)
  @IsOptional()
  @Field(() => BigIntFilter, {
    nullable: true,
  })
  imei?: BigIntFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  imei2?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleIneVerificado,
  })
  @IsEnum(EnumFinancedSaleIneVerificado)
  @IsOptional()
  @Field(() => EnumFinancedSaleIneVerificado, {
    nullable: true,
  })
  ine_verificado?: "S" | "N";

  @ApiProperty({
    required: false,
    type: () => ItemWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ItemWhereUniqueInput)
  @IsOptional()
  @Field(() => ItemWhereUniqueInput, {
    nullable: true,
  })
  items?: ItemWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => KardexListRelationFilter,
  })
  @ValidateNested()
  @Type(() => KardexListRelationFilter)
  @IsOptional()
  @Field(() => KardexListRelationFilter, {
    nullable: true,
  })
  kardex?: KardexListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => LoanedDeviceListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LoanedDeviceListRelationFilter)
  @IsOptional()
  @Field(() => LoanedDeviceListRelationFilter, {
    nullable: true,
  })
  loanedDevices?: LoanedDeviceListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => LockedDevBadCustomerListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LockedDevBadCustomerListRelationFilter)
  @IsOptional()
  @Field(() => LockedDevBadCustomerListRelationFilter, {
    nullable: true,
  })
  lockedDevBadCustomers?: LockedDevBadCustomerListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  mensajeAdvertenciaVenta?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ModifiedPaymentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ModifiedPaymentListRelationFilter)
  @IsOptional()
  @Field(() => ModifiedPaymentListRelationFilter, {
    nullable: true,
  })
  modifiedPayments?: ModifiedPaymentListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ModifiedSalesclerkListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ModifiedSalesclerkListRelationFilter)
  @IsOptional()
  @Field(() => ModifiedSalesclerkListRelationFilter, {
    nullable: true,
  })
  modifiedSalesclerks?: ModifiedSalesclerkListRelationFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  montoDescuento?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: DecimalFilter,
  })
  @Type(() => DecimalFilter)
  @IsOptional()
  @Field(() => DecimalFilter, {
    nullable: true,
  })
  montoFinanciado?: DecimalFilter;

  @ApiProperty({
    required: false,
    type: DecimalFilter,
  })
  @Type(() => DecimalFilter)
  @IsOptional()
  @Field(() => DecimalFilter, {
    nullable: true,
  })
  montoPago?: DecimalFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  montoPagoInicial?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  msisdn?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  numPagos?: IntFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  numPagosDescuento?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => PaycodePaymentTransacListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PaycodePaymentTransacListRelationFilter)
  @IsOptional()
  @Field(() => PaycodePaymentTransacListRelationFilter, {
    nullable: true,
  })
  paycodePaymentTransacs?: PaycodePaymentTransacListRelationFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  paymentAgreement?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: () => PaymentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PaymentListRelationFilter)
  @IsOptional()
  @Field(() => PaymentListRelationFilter, {
    nullable: true,
  })
  payments?: PaymentListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSalePlazo,
  })
  @IsEnum(EnumFinancedSalePlazo)
  @IsOptional()
  @Field(() => EnumFinancedSalePlazo, {
    nullable: true,
  })
  plazo?: "S" | "Q";

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  porcentajeDescEng?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: DecimalFilter,
  })
  @Type(() => DecimalFilter)
  @IsOptional()
  @Field(() => DecimalFilter, {
    nullable: true,
  })
  precioLista?: DecimalFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  promotionId?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ProtectionCertActivationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProtectionCertActivationListRelationFilter)
  @IsOptional()
  @Field(() => ProtectionCertActivationListRelationFilter, {
    nullable: true,
  })
  protectionCertActivations?: ProtectionCertActivationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ProtectionCertWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProtectionCertWhereUniqueInput)
  @IsOptional()
  @Field(() => ProtectionCertWhereUniqueInput, {
    nullable: true,
  })
  protectionCerts?: ProtectionCertWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  proveedorBloqueo?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  proveedorPagoRecurrente?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  rangoFinalDescuento?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  rangoInicialDescuento?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => RecurringPaymentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RecurringPaymentListRelationFilter)
  @IsOptional()
  @Field(() => RecurringPaymentListRelationFilter, {
    nullable: true,
  })
  recurringPayments?: RecurringPaymentListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  rutaArchivoDescuento?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  rutaFirma?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => StripePaymentTransacListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StripePaymentTransacListRelationFilter)
  @IsOptional()
  @Field(() => StripePaymentTransacListRelationFilter, {
    nullable: true,
  })
  stripePaymentTransacs?: StripePaymentTransacListRelationFilter;

  @ApiProperty({
    required: false,
    type: DecimalFilter,
  })
  @Type(() => DecimalFilter)
  @IsOptional()
  @Field(() => DecimalFilter, {
    nullable: true,
  })
  tasaInteres?: DecimalFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  tasaInteresAnual?: IntFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  telefono?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  timeToReconfigNextlock?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  tokenPagoRecurrente?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  ubicacion?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  ubicacionLatitud?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  ubicacionLongitud?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  ubicacionMapa?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  ultimaConexion?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  ultimaLocacion?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  unenrolledUserId?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => WarehouseWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => WarehouseWhereUniqueInput)
  @IsOptional()
  @Field(() => WarehouseWhereUniqueInput, {
    nullable: true,
  })
  warehouses?: WarehouseWhereUniqueInput;
}

export { FinancedSaleWhereInput as FinancedSaleWhereInput };
