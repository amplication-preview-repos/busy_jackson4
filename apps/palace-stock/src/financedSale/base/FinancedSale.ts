/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsInt,
  IsString,
  IsOptional,
  IsDate,
  ValidateNested,
  IsEnum,
  IsNumber,
} from "class-validator";
import { Type } from "class-transformer";
import { AngazaAccount } from "../../angazaAccount/base/AngazaAccount";
import { AngazaPayment } from "../../angazaPayment/base/AngazaPayment";
import { Bill } from "../../bill/base/Bill";
import { EnumFinancedSaleBloqueoConfirmado } from "./EnumFinancedSaleBloqueoConfirmado";
import { EnumFinancedSaleBloqueoPermanente } from "./EnumFinancedSaleBloqueoPermanente";
import { CashCountDetail } from "../../cashCountDetail/base/CashCountDetail";
import { ConektaPaymentTransac } from "../../conektaPaymentTransac/base/ConektaPaymentTransac";
import { Customer } from "../../customer/base/Customer";
import { Document } from "../../document/base/Document";
import { Decimal } from "decimal.js";
import { EnumFinancedSaleEstatusBloqueo } from "./EnumFinancedSaleEstatusBloqueo";
import { EnumFinancedSaleEstatusEquipo } from "./EnumFinancedSaleEstatusEquipo";
import { EnumFinancedSaleEstatusFinanc } from "./EnumFinancedSaleEstatusFinanc";
import { FinancedAccessory } from "../../financedAccessory/base/FinancedAccessory";
import { FinancedSalesLog } from "../../financedSalesLog/base/FinancedSalesLog";
import { EnumFinancedSaleHabilitarPagoRecurrente } from "./EnumFinancedSaleHabilitarPagoRecurrente";
import { GraphQLBigInt } from "../../util/GraphQLBigInt";
import { EnumFinancedSaleIneVerificado } from "./EnumFinancedSaleIneVerificado";
import { Item } from "../../item/base/Item";
import { Kardex } from "../../kardex/base/Kardex";
import { LoanedDevice } from "../../loanedDevice/base/LoanedDevice";
import { LockedDevBadCustomer } from "../../lockedDevBadCustomer/base/LockedDevBadCustomer";
import { ModifiedPayment } from "../../modifiedPayment/base/ModifiedPayment";
import { ModifiedSalesclerk } from "../../modifiedSalesclerk/base/ModifiedSalesclerk";
import { PaycodePaymentTransac } from "../../paycodePaymentTransac/base/PaycodePaymentTransac";
import { Payment } from "../../payment/base/Payment";
import { EnumFinancedSalePlazo } from "./EnumFinancedSalePlazo";
import { ProtectionCertActivation } from "../../protectionCertActivation/base/ProtectionCertActivation";
import { ProtectionCert } from "../../protectionCert/base/ProtectionCert";
import { RecurringPayment } from "../../recurringPayment/base/RecurringPayment";
import { StripePaymentTransac } from "../../stripePaymentTransac/base/StripePaymentTransac";
import { Warehouse } from "../../warehouse/base/Warehouse";

@ObjectType()
class FinancedSale {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  adminAppUnregistered!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ajusteEnganche!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ajustePrecioVenta!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  altaPagoRecurrente!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [AngazaAccount],
  })
  @ValidateNested()
  @Type(() => AngazaAccount)
  @IsOptional()
  angazaAccounts?: Array<AngazaAccount>;

  @ApiProperty({
    required: false,
    type: () => [AngazaPayment],
  })
  @ValidateNested()
  @Type(() => AngazaPayment)
  @IsOptional()
  angazaPayments?: Array<AngazaPayment>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  authUserId!: number | null;

  @ApiProperty({
    required: false,
    type: () => [Bill],
  })
  @ValidateNested()
  @Type(() => Bill)
  @IsOptional()
  bills?: Array<Bill>;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleBloqueoConfirmado,
  })
  @IsEnum(EnumFinancedSaleBloqueoConfirmado)
  @IsOptional()
  @Field(() => EnumFinancedSaleBloqueoConfirmado, {
    nullable: true,
  })
  bloqueo_confirmado?: "B" | "D" | null;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleBloqueoPermanente,
  })
  @IsEnum(EnumFinancedSaleBloqueoPermanente)
  @IsOptional()
  @Field(() => EnumFinancedSaleBloqueoPermanente, {
    nullable: true,
  })
  bloqueo_permanente?: "A" | "I" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  bloqueoProgramado!: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  canceledUserId!: number | null;

  @ApiProperty({
    required: false,
    type: () => CashCountDetail,
  })
  @ValidateNested()
  @Type(() => CashCountDetail)
  @IsOptional()
  cashCountDetails?: CashCountDetail | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  codigoArtIccid!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  codigoBloqueo!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comentarios!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comentariosDescuento!: string | null;

  @ApiProperty({
    required: false,
    type: () => [ConektaPaymentTransac],
  })
  @ValidateNested()
  @Type(() => ConektaPaymentTransac)
  @IsOptional()
  conektaPaymentTransacs?: Array<ConektaPaymentTransac>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  createdUserId!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  customerPagoRecurrente!: string | null;

  @ApiProperty({
    required: false,
    type: () => Customer,
  })
  @ValidateNested()
  @Type(() => Customer)
  @IsOptional()
  customers?: Customer | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  desctoPagoOportuno!: number;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  descuentoEspecial!: number | null;

  @ApiProperty({
    required: false,
    type: () => [Document],
  })
  @ValidateNested()
  @Type(() => Document)
  @IsOptional()
  documents?: Array<Document>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  enganche!: Decimal;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleEstatusBloqueo,
  })
  @IsEnum(EnumFinancedSaleEstatusBloqueo)
  @IsOptional()
  @Field(() => EnumFinancedSaleEstatusBloqueo, {
    nullable: true,
  })
  estatus_bloqueo?: "A" | "B" | "DI" | null;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleEstatusEquipo,
  })
  @IsEnum(EnumFinancedSaleEstatusEquipo)
  @IsOptional()
  @Field(() => EnumFinancedSaleEstatusEquipo, {
    nullable: true,
  })
  estatus_equipo?: "A" | "I" | "E" | null;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleEstatusFinanc,
  })
  @IsEnum(EnumFinancedSaleEstatusFinanc)
  @IsOptional()
  @Field(() => EnumFinancedSaleEstatusFinanc, {
    nullable: true,
  })
  estatus_financ?: "A" | "T" | "C" | "P" | "R" | "CP" | "CT" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaCancelo!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaFinanc!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaPrimerPago!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaRegistro!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [FinancedAccessory],
  })
  @ValidateNested()
  @Type(() => FinancedAccessory)
  @IsOptional()
  financedAccessories?: Array<FinancedAccessory>;

  @ApiProperty({
    required: false,
    type: () => [FinancedSalesLog],
  })
  @ValidateNested()
  @Type(() => FinancedSalesLog)
  @IsOptional()
  financedSalesLog?: Array<FinancedSalesLog>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  forceAdvancePayments!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  formaPago!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleHabilitarPagoRecurrente,
  })
  @IsEnum(EnumFinancedSaleHabilitarPagoRecurrente)
  @IsOptional()
  @Field(() => EnumFinancedSaleHabilitarPagoRecurrente, {
    nullable: true,
  })
  habilitar_pago_recurrente?: "A" | "I" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  iccid!: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  idPlan!: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => GraphQLBigInt)
  imei!: bigint;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  imei2!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumFinancedSaleIneVerificado,
  })
  @IsEnum(EnumFinancedSaleIneVerificado)
  @IsOptional()
  @Field(() => EnumFinancedSaleIneVerificado, {
    nullable: true,
  })
  ine_verificado?: "S" | "N" | null;

  @ApiProperty({
    required: true,
    type: () => Item,
  })
  @ValidateNested()
  @Type(() => Item)
  items?: Item;

  @ApiProperty({
    required: false,
    type: () => [Kardex],
  })
  @ValidateNested()
  @Type(() => Kardex)
  @IsOptional()
  kardex?: Array<Kardex>;

  @ApiProperty({
    required: false,
    type: () => [LoanedDevice],
  })
  @ValidateNested()
  @Type(() => LoanedDevice)
  @IsOptional()
  loanedDevices?: Array<LoanedDevice>;

  @ApiProperty({
    required: false,
    type: () => [LockedDevBadCustomer],
  })
  @ValidateNested()
  @Type(() => LockedDevBadCustomer)
  @IsOptional()
  lockedDevBadCustomers?: Array<LockedDevBadCustomer>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  mensajeAdvertenciaVenta!: string | null;

  @ApiProperty({
    required: false,
    type: () => [ModifiedPayment],
  })
  @ValidateNested()
  @Type(() => ModifiedPayment)
  @IsOptional()
  modifiedPayments?: Array<ModifiedPayment>;

  @ApiProperty({
    required: false,
    type: () => [ModifiedSalesclerk],
  })
  @ValidateNested()
  @Type(() => ModifiedSalesclerk)
  @IsOptional()
  modifiedSalesclerks?: Array<ModifiedSalesclerk>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  montoDescuento!: Decimal | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  montoFinanciado!: Decimal;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  montoPago!: Decimal;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  montoPagoInicial!: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  msisdn!: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  numPagos!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  numPagosDescuento!: string | null;

  @ApiProperty({
    required: false,
    type: () => [PaycodePaymentTransac],
  })
  @ValidateNested()
  @Type(() => PaycodePaymentTransac)
  @IsOptional()
  paycodePaymentTransacs?: Array<PaycodePaymentTransac>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  paymentAgreement!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payments?: Array<Payment>;

  @ApiProperty({
    required: true,
    enum: EnumFinancedSalePlazo,
  })
  @IsEnum(EnumFinancedSalePlazo)
  @Field(() => EnumFinancedSalePlazo, {
    nullable: true,
  })
  plazo?: "S" | "Q";

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  porcentajeDescEng!: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  precioLista!: Decimal;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  promotionId!: number | null;

  @ApiProperty({
    required: false,
    type: () => [ProtectionCertActivation],
  })
  @ValidateNested()
  @Type(() => ProtectionCertActivation)
  @IsOptional()
  protectionCertActivations?: Array<ProtectionCertActivation>;

  @ApiProperty({
    required: false,
    type: () => ProtectionCert,
  })
  @ValidateNested()
  @Type(() => ProtectionCert)
  @IsOptional()
  protectionCerts?: ProtectionCert | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  proveedorBloqueo!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  proveedorPagoRecurrente!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  rangoFinalDescuento!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  rangoInicialDescuento!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [RecurringPayment],
  })
  @ValidateNested()
  @Type(() => RecurringPayment)
  @IsOptional()
  recurringPayments?: Array<RecurringPayment>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rutaArchivoDescuento!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rutaFirma!: string | null;

  @ApiProperty({
    required: false,
    type: () => [StripePaymentTransac],
  })
  @ValidateNested()
  @Type(() => StripePaymentTransac)
  @IsOptional()
  stripePaymentTransacs?: Array<StripePaymentTransac>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  tasaInteres!: Decimal;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  tasaInteresAnual!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  telefono!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  timeToReconfigNextlock!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  tokenPagoRecurrente!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ubicacion!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  ubicacionLatitud!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  ubicacionLongitud!: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ubicacionMapa!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  ultimaConexion!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ultimaLocacion!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  unenrolledUserId!: number | null;

  @ApiProperty({
    required: false,
    type: () => Warehouse,
  })
  @ValidateNested()
  @Type(() => Warehouse)
  @IsOptional()
  warehouses?: Warehouse | null;
}

export { FinancedSale as FinancedSale };
