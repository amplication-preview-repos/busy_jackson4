/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FinancedSale as PrismaFinancedSale,
  AngazaAccount as PrismaAngazaAccount,
  AngazaPayment as PrismaAngazaPayment,
  Bill as PrismaBill,
  ConektaPaymentTransac as PrismaConektaPaymentTransac,
  Document as PrismaDocument,
  FinancedAccessory as PrismaFinancedAccessory,
  FinancedSalesLog as PrismaFinancedSalesLog,
  Kardex as PrismaKardex,
  LoanedDevice as PrismaLoanedDevice,
  LockedDevBadCustomer as PrismaLockedDevBadCustomer,
  ModifiedPayment as PrismaModifiedPayment,
  ModifiedSalesclerk as PrismaModifiedSalesclerk,
  PaycodePaymentTransac as PrismaPaycodePaymentTransac,
  Payment as PrismaPayment,
  ProtectionCertActivation as PrismaProtectionCertActivation,
  RecurringPayment as PrismaRecurringPayment,
  StripePaymentTransac as PrismaStripePaymentTransac,
  CashCountDetail as PrismaCashCountDetail,
  Customer as PrismaCustomer,
  Item as PrismaItem,
  ProtectionCert as PrismaProtectionCert,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class FinancedSaleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FinancedSaleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.financedSale.count(args);
  }

  async financedSales<T extends Prisma.FinancedSaleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedSaleFindManyArgs>
  ): Promise<PrismaFinancedSale[]> {
    return this.prisma.financedSale.findMany<Prisma.FinancedSaleFindManyArgs>(
      args
    );
  }
  async financedSale<T extends Prisma.FinancedSaleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedSaleFindUniqueArgs>
  ): Promise<PrismaFinancedSale | null> {
    return this.prisma.financedSale.findUnique(args);
  }
  async createFinancedSale<T extends Prisma.FinancedSaleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedSaleCreateArgs>
  ): Promise<PrismaFinancedSale> {
    return this.prisma.financedSale.create<T>(args);
  }
  async updateFinancedSale<T extends Prisma.FinancedSaleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedSaleUpdateArgs>
  ): Promise<PrismaFinancedSale> {
    return this.prisma.financedSale.update<T>(args);
  }
  async deleteFinancedSale<T extends Prisma.FinancedSaleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedSaleDeleteArgs>
  ): Promise<PrismaFinancedSale> {
    return this.prisma.financedSale.delete(args);
  }

  async findAngazaAccounts(
    parentId: number,
    args: Prisma.AngazaAccountFindManyArgs
  ): Promise<PrismaAngazaAccount[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .angazaAccounts(args);
  }

  async findAngazaPayments(
    parentId: number,
    args: Prisma.AngazaPaymentFindManyArgs
  ): Promise<PrismaAngazaPayment[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .angazaPayments(args);
  }

  async findBills(
    parentId: number,
    args: Prisma.BillFindManyArgs
  ): Promise<PrismaBill[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bills(args);
  }

  async findConektaPaymentTransacs(
    parentId: number,
    args: Prisma.ConektaPaymentTransacFindManyArgs
  ): Promise<PrismaConektaPaymentTransac[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .conektaPaymentTransacs(args);
  }

  async findDocuments(
    parentId: number,
    args: Prisma.DocumentFindManyArgs
  ): Promise<PrismaDocument[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .documents(args);
  }

  async findFinancedAccessories(
    parentId: number,
    args: Prisma.FinancedAccessoryFindManyArgs
  ): Promise<PrismaFinancedAccessory[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .financedAccessories(args);
  }

  async findFinancedSalesLog(
    parentId: number,
    args: Prisma.FinancedSalesLogFindManyArgs
  ): Promise<PrismaFinancedSalesLog[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .financedSalesLog(args);
  }

  async findKardex(
    parentId: number,
    args: Prisma.KardexFindManyArgs
  ): Promise<PrismaKardex[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .kardex(args);
  }

  async findLoanedDevices(
    parentId: number,
    args: Prisma.LoanedDeviceFindManyArgs
  ): Promise<PrismaLoanedDevice[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .loanedDevices(args);
  }

  async findLockedDevBadCustomers(
    parentId: number,
    args: Prisma.LockedDevBadCustomerFindManyArgs
  ): Promise<PrismaLockedDevBadCustomer[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .lockedDevBadCustomers(args);
  }

  async findModifiedPayments(
    parentId: number,
    args: Prisma.ModifiedPaymentFindManyArgs
  ): Promise<PrismaModifiedPayment[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .modifiedPayments(args);
  }

  async findModifiedSalesclerks(
    parentId: number,
    args: Prisma.ModifiedSalesclerkFindManyArgs
  ): Promise<PrismaModifiedSalesclerk[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .modifiedSalesclerks(args);
  }

  async findPaycodePaymentTransacs(
    parentId: number,
    args: Prisma.PaycodePaymentTransacFindManyArgs
  ): Promise<PrismaPaycodePaymentTransac[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paycodePaymentTransacs(args);
  }

  async findPayments(
    parentId: number,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async findProtectionCertActivations(
    parentId: number,
    args: Prisma.ProtectionCertActivationFindManyArgs
  ): Promise<PrismaProtectionCertActivation[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .protectionCertActivations(args);
  }

  async findRecurringPayments(
    parentId: number,
    args: Prisma.RecurringPaymentFindManyArgs
  ): Promise<PrismaRecurringPayment[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recurringPayments(args);
  }

  async findStripePaymentTransacs(
    parentId: number,
    args: Prisma.StripePaymentTransacFindManyArgs
  ): Promise<PrismaStripePaymentTransac[]> {
    return this.prisma.financedSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .stripePaymentTransacs(args);
  }

  async getCashCountDetails(
    parentId: number
  ): Promise<PrismaCashCountDetail | null> {
    return this.prisma.financedSale
      .findUnique({
        where: { id: parentId },
      })
      .cashCountDetails();
  }

  async getCustomers(parentId: number): Promise<PrismaCustomer | null> {
    return this.prisma.financedSale
      .findUnique({
        where: { id: parentId },
      })
      .customers();
  }

  async getItems(parentId: number): Promise<PrismaItem | null> {
    return this.prisma.financedSale
      .findUnique({
        where: { id: parentId },
      })
      .items();
  }

  async getProtectionCerts(
    parentId: number
  ): Promise<PrismaProtectionCert | null> {
    return this.prisma.financedSale
      .findUnique({
        where: { id: parentId },
      })
      .protectionCerts();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.financedSale
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
