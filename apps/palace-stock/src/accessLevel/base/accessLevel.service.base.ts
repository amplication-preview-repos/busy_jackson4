/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccessLevel as PrismaAccessLevel,
  UserModel as PrismaUserModel,
} from "@prisma/client";

export class AccessLevelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccessLevelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accessLevel.count(args);
  }

  async accessLevels<T extends Prisma.AccessLevelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessLevelFindManyArgs>
  ): Promise<PrismaAccessLevel[]> {
    return this.prisma.accessLevel.findMany<Prisma.AccessLevelFindManyArgs>(
      args
    );
  }
  async accessLevel<T extends Prisma.AccessLevelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessLevelFindUniqueArgs>
  ): Promise<PrismaAccessLevel | null> {
    return this.prisma.accessLevel.findUnique(args);
  }
  async createAccessLevel<T extends Prisma.AccessLevelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessLevelCreateArgs>
  ): Promise<PrismaAccessLevel> {
    return this.prisma.accessLevel.create<T>(args);
  }
  async updateAccessLevel<T extends Prisma.AccessLevelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessLevelUpdateArgs>
  ): Promise<PrismaAccessLevel> {
    return this.prisma.accessLevel.update<T>(args);
  }
  async deleteAccessLevel<T extends Prisma.AccessLevelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessLevelDeleteArgs>
  ): Promise<PrismaAccessLevel> {
    return this.prisma.accessLevel.delete(args);
  }

  async findUsers(
    parentId: number,
    args: Prisma.UserModelFindManyArgs
  ): Promise<PrismaUserModel[]> {
    return this.prisma.accessLevel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
