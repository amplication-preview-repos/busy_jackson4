/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OtherCompaniesPayment as PrismaOtherCompaniesPayment,
  ConektaPaymentTransac as PrismaConektaPaymentTransac,
  StripePaymentTransac as PrismaStripePaymentTransac,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class OtherCompaniesPaymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OtherCompaniesPaymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.otherCompaniesPayment.count(args);
  }

  async otherCompaniesPayments<
    T extends Prisma.OtherCompaniesPaymentFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OtherCompaniesPaymentFindManyArgs>
  ): Promise<PrismaOtherCompaniesPayment[]> {
    return this.prisma.otherCompaniesPayment.findMany<Prisma.OtherCompaniesPaymentFindManyArgs>(
      args
    );
  }
  async otherCompaniesPayment<
    T extends Prisma.OtherCompaniesPaymentFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OtherCompaniesPaymentFindUniqueArgs>
  ): Promise<PrismaOtherCompaniesPayment | null> {
    return this.prisma.otherCompaniesPayment.findUnique(args);
  }
  async createOtherCompaniesPayment<
    T extends Prisma.OtherCompaniesPaymentCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OtherCompaniesPaymentCreateArgs>
  ): Promise<PrismaOtherCompaniesPayment> {
    return this.prisma.otherCompaniesPayment.create<T>(args);
  }
  async updateOtherCompaniesPayment<
    T extends Prisma.OtherCompaniesPaymentUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OtherCompaniesPaymentUpdateArgs>
  ): Promise<PrismaOtherCompaniesPayment> {
    return this.prisma.otherCompaniesPayment.update<T>(args);
  }
  async deleteOtherCompaniesPayment<
    T extends Prisma.OtherCompaniesPaymentDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OtherCompaniesPaymentDeleteArgs>
  ): Promise<PrismaOtherCompaniesPayment> {
    return this.prisma.otherCompaniesPayment.delete(args);
  }

  async getConektaPaymentTransacs(
    parentId: number
  ): Promise<PrismaConektaPaymentTransac | null> {
    return this.prisma.otherCompaniesPayment
      .findUnique({
        where: { id: parentId },
      })
      .conektaPaymentTransacs();
  }

  async getStripePaymentTransacs(
    parentId: number
  ): Promise<PrismaStripePaymentTransac | null> {
    return this.prisma.otherCompaniesPayment
      .findUnique({
        where: { id: parentId },
      })
      .stripePaymentTransacs();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.otherCompaniesPayment
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
