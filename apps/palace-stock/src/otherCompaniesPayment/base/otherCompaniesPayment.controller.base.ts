/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OtherCompaniesPaymentService } from "../otherCompaniesPayment.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OtherCompaniesPaymentCreateInput } from "./OtherCompaniesPaymentCreateInput";
import { OtherCompaniesPayment } from "./OtherCompaniesPayment";
import { OtherCompaniesPaymentFindManyArgs } from "./OtherCompaniesPaymentFindManyArgs";
import { OtherCompaniesPaymentWhereUniqueInput } from "./OtherCompaniesPaymentWhereUniqueInput";
import { OtherCompaniesPaymentUpdateInput } from "./OtherCompaniesPaymentUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OtherCompaniesPaymentControllerBase {
  constructor(
    protected readonly service: OtherCompaniesPaymentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OtherCompaniesPayment })
  @nestAccessControl.UseRoles({
    resource: "OtherCompaniesPayment",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOtherCompaniesPayment(
    @common.Body() data: OtherCompaniesPaymentCreateInput
  ): Promise<OtherCompaniesPayment> {
    return await this.service.createOtherCompaniesPayment({
      data: {
        ...data,

        conektaPaymentTransacs: data.conektaPaymentTransacs
          ? {
              connect: data.conektaPaymentTransacs,
            }
          : undefined,

        stripePaymentTransacs: data.stripePaymentTransacs
          ? {
              connect: data.stripePaymentTransacs,
            }
          : undefined,

        warehouses: {
          connect: data.warehouses,
        },
      },
      select: {
        abonoExtra: true,
        cambioDevuelto: true,
        cantidadRecibida: true,
        capitalPagado: true,
        codigoBloqueo: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        desctoAplicado: true,
        desdeWebhook: true,
        estatus_pago: true,
        fechaPago: true,
        fechaProxVenc: true,
        fechaVenc: true,
        formaPago: true,
        horaPago: true,
        id: true,
        interesPagado: true,
        numPago: true,
        opcionCambio: true,
        opcionPago: true,
        pagosAdelantados: true,
        receivedUserId: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },

        tipo_pago: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [OtherCompaniesPayment] })
  @ApiNestedQuery(OtherCompaniesPaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OtherCompaniesPayment",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async otherCompaniesPayments(
    @common.Req() request: Request
  ): Promise<OtherCompaniesPayment[]> {
    const args = plainToClass(OtherCompaniesPaymentFindManyArgs, request.query);
    return this.service.otherCompaniesPayments({
      ...args,
      select: {
        abonoExtra: true,
        cambioDevuelto: true,
        cantidadRecibida: true,
        capitalPagado: true,
        codigoBloqueo: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        desctoAplicado: true,
        desdeWebhook: true,
        estatus_pago: true,
        fechaPago: true,
        fechaProxVenc: true,
        fechaVenc: true,
        formaPago: true,
        horaPago: true,
        id: true,
        interesPagado: true,
        numPago: true,
        opcionCambio: true,
        opcionPago: true,
        pagosAdelantados: true,
        receivedUserId: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },

        tipo_pago: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OtherCompaniesPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OtherCompaniesPayment",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async otherCompaniesPayment(
    @common.Param() params: OtherCompaniesPaymentWhereUniqueInput
  ): Promise<OtherCompaniesPayment | null> {
    const result = await this.service.otherCompaniesPayment({
      where: params,
      select: {
        abonoExtra: true,
        cambioDevuelto: true,
        cantidadRecibida: true,
        capitalPagado: true,
        codigoBloqueo: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        desctoAplicado: true,
        desdeWebhook: true,
        estatus_pago: true,
        fechaPago: true,
        fechaProxVenc: true,
        fechaVenc: true,
        formaPago: true,
        horaPago: true,
        id: true,
        interesPagado: true,
        numPago: true,
        opcionCambio: true,
        opcionPago: true,
        pagosAdelantados: true,
        receivedUserId: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },

        tipo_pago: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OtherCompaniesPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OtherCompaniesPayment",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOtherCompaniesPayment(
    @common.Param() params: OtherCompaniesPaymentWhereUniqueInput,
    @common.Body() data: OtherCompaniesPaymentUpdateInput
  ): Promise<OtherCompaniesPayment | null> {
    try {
      return await this.service.updateOtherCompaniesPayment({
        where: params,
        data: {
          ...data,

          conektaPaymentTransacs: data.conektaPaymentTransacs
            ? {
                connect: data.conektaPaymentTransacs,
              }
            : undefined,

          stripePaymentTransacs: data.stripePaymentTransacs
            ? {
                connect: data.stripePaymentTransacs,
              }
            : undefined,

          warehouses: {
            connect: data.warehouses,
          },
        },
        select: {
          abonoExtra: true,
          cambioDevuelto: true,
          cantidadRecibida: true,
          capitalPagado: true,
          codigoBloqueo: true,

          conektaPaymentTransacs: {
            select: {
              id: true,
            },
          },

          desctoAplicado: true,
          desdeWebhook: true,
          estatus_pago: true,
          fechaPago: true,
          fechaProxVenc: true,
          fechaVenc: true,
          formaPago: true,
          horaPago: true,
          id: true,
          interesPagado: true,
          numPago: true,
          opcionCambio: true,
          opcionPago: true,
          pagosAdelantados: true,
          receivedUserId: true,

          stripePaymentTransacs: {
            select: {
              id: true,
            },
          },

          tipo_pago: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OtherCompaniesPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OtherCompaniesPayment",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOtherCompaniesPayment(
    @common.Param() params: OtherCompaniesPaymentWhereUniqueInput
  ): Promise<OtherCompaniesPayment | null> {
    try {
      return await this.service.deleteOtherCompaniesPayment({
        where: params,
        select: {
          abonoExtra: true,
          cambioDevuelto: true,
          cantidadRecibida: true,
          capitalPagado: true,
          codigoBloqueo: true,

          conektaPaymentTransacs: {
            select: {
              id: true,
            },
          },

          desctoAplicado: true,
          desdeWebhook: true,
          estatus_pago: true,
          fechaPago: true,
          fechaProxVenc: true,
          fechaVenc: true,
          formaPago: true,
          horaPago: true,
          id: true,
          interesPagado: true,
          numPago: true,
          opcionCambio: true,
          opcionPago: true,
          pagosAdelantados: true,
          receivedUserId: true,

          stripePaymentTransacs: {
            select: {
              id: true,
            },
          },

          tipo_pago: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
