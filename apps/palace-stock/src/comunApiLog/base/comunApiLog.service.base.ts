/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ComunApiLog as PrismaComunApiLog } from "@prisma/client";

export class ComunApiLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComunApiLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.comunApiLog.count(args);
  }

  async comunApiLogs<T extends Prisma.ComunApiLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComunApiLogFindManyArgs>
  ): Promise<PrismaComunApiLog[]> {
    return this.prisma.comunApiLog.findMany<Prisma.ComunApiLogFindManyArgs>(
      args
    );
  }
  async comunApiLog<T extends Prisma.ComunApiLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComunApiLogFindUniqueArgs>
  ): Promise<PrismaComunApiLog | null> {
    return this.prisma.comunApiLog.findUnique(args);
  }
  async createComunApiLog<T extends Prisma.ComunApiLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComunApiLogCreateArgs>
  ): Promise<PrismaComunApiLog> {
    return this.prisma.comunApiLog.create<T>(args);
  }
  async updateComunApiLog<T extends Prisma.ComunApiLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComunApiLogUpdateArgs>
  ): Promise<PrismaComunApiLog> {
    return this.prisma.comunApiLog.update<T>(args);
  }
  async deleteComunApiLog<T extends Prisma.ComunApiLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComunApiLogDeleteArgs>
  ): Promise<PrismaComunApiLog> {
    return this.prisma.comunApiLog.delete(args);
  }
}
