/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PermissionService } from "../permission.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PermissionCreateInput } from "./PermissionCreateInput";
import { Permission } from "./Permission";
import { PermissionFindManyArgs } from "./PermissionFindManyArgs";
import { PermissionWhereUniqueInput } from "./PermissionWhereUniqueInput";
import { PermissionUpdateInput } from "./PermissionUpdateInput";
import { ModifiedPermissionFindManyArgs } from "../../modifiedPermission/base/ModifiedPermissionFindManyArgs";
import { ModifiedPermission } from "../../modifiedPermission/base/ModifiedPermission";
import { ModifiedPermissionWhereUniqueInput } from "../../modifiedPermission/base/ModifiedPermissionWhereUniqueInput";
import { UserPermissionFindManyArgs } from "../../userPermission/base/UserPermissionFindManyArgs";
import { UserPermission } from "../../userPermission/base/UserPermission";
import { UserPermissionWhereUniqueInput } from "../../userPermission/base/UserPermissionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PermissionControllerBase {
  constructor(
    protected readonly service: PermissionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Permission })
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPermission(
    @common.Body() data: PermissionCreateInput
  ): Promise<Permission> {
    return await this.service.createPermission({
      data: data,
      select: {
        descripcion: true,
        id: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Permission] })
  @ApiNestedQuery(PermissionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async permissions(@common.Req() request: Request): Promise<Permission[]> {
    const args = plainToClass(PermissionFindManyArgs, request.query);
    return this.service.permissions({
      ...args,
      select: {
        descripcion: true,
        id: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Permission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async permission(
    @common.Param() params: PermissionWhereUniqueInput
  ): Promise<Permission | null> {
    const result = await this.service.permission({
      where: params,
      select: {
        descripcion: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Permission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePermission(
    @common.Param() params: PermissionWhereUniqueInput,
    @common.Body() data: PermissionUpdateInput
  ): Promise<Permission | null> {
    try {
      return await this.service.updatePermission({
        where: params,
        data: data,
        select: {
          descripcion: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Permission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePermission(
    @common.Param() params: PermissionWhereUniqueInput
  ): Promise<Permission | null> {
    try {
      return await this.service.deletePermission({
        where: params,
        select: {
          descripcion: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/modifiedPermissions")
  @ApiNestedQuery(ModifiedPermissionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ModifiedPermission",
    action: "read",
    possession: "any",
  })
  async findModifiedPermissions(
    @common.Req() request: Request,
    @common.Param() params: PermissionWhereUniqueInput
  ): Promise<ModifiedPermission[]> {
    const query = plainToClass(ModifiedPermissionFindManyArgs, request.query);
    const results = await this.service.findModifiedPermissions(params.id, {
      ...query,
      select: {
        accion: true,
        createdUserId: true,
        fechaRegistro: true,
        id: true,

        permissions: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/modifiedPermissions")
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "update",
    possession: "any",
  })
  async connectModifiedPermissions(
    @common.Param() params: PermissionWhereUniqueInput,
    @common.Body() body: ModifiedPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedPermissions: {
        connect: body,
      },
    };
    await this.service.updatePermission({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/modifiedPermissions")
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "update",
    possession: "any",
  })
  async updateModifiedPermissions(
    @common.Param() params: PermissionWhereUniqueInput,
    @common.Body() body: ModifiedPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedPermissions: {
        set: body,
      },
    };
    await this.service.updatePermission({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/modifiedPermissions")
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "update",
    possession: "any",
  })
  async disconnectModifiedPermissions(
    @common.Param() params: PermissionWhereUniqueInput,
    @common.Body() body: ModifiedPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedPermissions: {
        disconnect: body,
      },
    };
    await this.service.updatePermission({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userPermissions")
  @ApiNestedQuery(UserPermissionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserPermission",
    action: "read",
    possession: "any",
  })
  async findUserPermissions(
    @common.Req() request: Request,
    @common.Param() params: PermissionWhereUniqueInput
  ): Promise<UserPermission[]> {
    const query = plainToClass(UserPermissionFindManyArgs, request.query);
    const results = await this.service.findUserPermissions(params.id, {
      ...query,
      select: {
        fechaAsignoPermiso: true,
        id: true,
        idUsrAsignoPermiso: true,

        permissions: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userPermissions")
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "update",
    possession: "any",
  })
  async connectUserPermissions(
    @common.Param() params: PermissionWhereUniqueInput,
    @common.Body() body: UserPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPermissions: {
        connect: body,
      },
    };
    await this.service.updatePermission({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userPermissions")
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "update",
    possession: "any",
  })
  async updateUserPermissions(
    @common.Param() params: PermissionWhereUniqueInput,
    @common.Body() body: UserPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPermissions: {
        set: body,
      },
    };
    await this.service.updatePermission({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userPermissions")
  @nestAccessControl.UseRoles({
    resource: "Permission",
    action: "update",
    possession: "any",
  })
  async disconnectUserPermissions(
    @common.Param() params: PermissionWhereUniqueInput,
    @common.Body() body: UserPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPermissions: {
        disconnect: body,
      },
    };
    await this.service.updatePermission({
      where: params,
      data,
      select: { id: true },
    });
  }
}
