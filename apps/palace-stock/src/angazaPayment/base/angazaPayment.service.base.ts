/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AngazaPayment as PrismaAngazaPayment,
  FinancedSale as PrismaFinancedSale,
} from "@prisma/client";

export class AngazaPaymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AngazaPaymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.angazaPayment.count(args);
  }

  async angazaPayments<T extends Prisma.AngazaPaymentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AngazaPaymentFindManyArgs>
  ): Promise<PrismaAngazaPayment[]> {
    return this.prisma.angazaPayment.findMany<Prisma.AngazaPaymentFindManyArgs>(
      args
    );
  }
  async angazaPayment<T extends Prisma.AngazaPaymentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AngazaPaymentFindUniqueArgs>
  ): Promise<PrismaAngazaPayment | null> {
    return this.prisma.angazaPayment.findUnique(args);
  }
  async createAngazaPayment<T extends Prisma.AngazaPaymentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AngazaPaymentCreateArgs>
  ): Promise<PrismaAngazaPayment> {
    return this.prisma.angazaPayment.create<T>(args);
  }
  async updateAngazaPayment<T extends Prisma.AngazaPaymentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AngazaPaymentUpdateArgs>
  ): Promise<PrismaAngazaPayment> {
    return this.prisma.angazaPayment.update<T>(args);
  }
  async deleteAngazaPayment<T extends Prisma.AngazaPaymentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AngazaPaymentDeleteArgs>
  ): Promise<PrismaAngazaPayment> {
    return this.prisma.angazaPayment.delete(args);
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.angazaPayment
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }
}
