/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserQualityHistory as PrismaUserQualityHistory,
  UserModel as PrismaUserModel,
} from "@prisma/client";

export class UserQualityHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserQualityHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userQualityHistory.count(args);
  }

  async userQualityHistories<T extends Prisma.UserQualityHistoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserQualityHistoryFindManyArgs>
  ): Promise<PrismaUserQualityHistory[]> {
    return this.prisma.userQualityHistory.findMany<Prisma.UserQualityHistoryFindManyArgs>(
      args
    );
  }
  async userQualityHistory<T extends Prisma.UserQualityHistoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserQualityHistoryFindUniqueArgs>
  ): Promise<PrismaUserQualityHistory | null> {
    return this.prisma.userQualityHistory.findUnique(args);
  }
  async createUserQualityHistory<T extends Prisma.UserQualityHistoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserQualityHistoryCreateArgs>
  ): Promise<PrismaUserQualityHistory> {
    return this.prisma.userQualityHistory.create<T>(args);
  }
  async updateUserQualityHistory<T extends Prisma.UserQualityHistoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserQualityHistoryUpdateArgs>
  ): Promise<PrismaUserQualityHistory> {
    return this.prisma.userQualityHistory.update<T>(args);
  }
  async deleteUserQualityHistory<T extends Prisma.UserQualityHistoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserQualityHistoryDeleteArgs>
  ): Promise<PrismaUserQualityHistory> {
    return this.prisma.userQualityHistory.delete(args);
  }

  async getUsers(parentId: number): Promise<PrismaUserModel | null> {
    return this.prisma.userQualityHistory
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
