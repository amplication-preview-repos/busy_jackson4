/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserQualityHistoryService } from "../userQualityHistory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserQualityHistoryCreateInput } from "./UserQualityHistoryCreateInput";
import { UserQualityHistory } from "./UserQualityHistory";
import { UserQualityHistoryFindManyArgs } from "./UserQualityHistoryFindManyArgs";
import { UserQualityHistoryWhereUniqueInput } from "./UserQualityHistoryWhereUniqueInput";
import { UserQualityHistoryUpdateInput } from "./UserQualityHistoryUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserQualityHistoryControllerBase {
  constructor(
    protected readonly service: UserQualityHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserQualityHistory })
  @nestAccessControl.UseRoles({
    resource: "UserQualityHistory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUserQualityHistory(
    @common.Body() data: UserQualityHistoryCreateInput
  ): Promise<UserQualityHistory> {
    return await this.service.createUserQualityHistory({
      data: {
        ...data,

        users: {
          connect: data.users,
        },
      },
      select: {
        cantBloqueados30: true,
        cantBloqueados60: true,
        cantFinanc30: true,
        cantFinanc60: true,
        cantFinancUlt37: true,
        cantFinancUlt67: true,
        cantFinancUlt7: true,
        cantFraudes30: true,
        cantFraudes60: true,
        cantVenc530: true,
        cantVenc560: true,
        estatusBloqueo: true,
        fechaDesbloqueo: true,
        id: true,
        idUsrDesbloqueo: true,
        lockedAt: true,
        motivoDesbloqueo: true,
        pctjBloqueados30: true,
        pctjBloqueados60: true,
        pctjFraudes30: true,
        pctjFraudes60: true,
        pctjVenc530: true,
        pctjVenc560: true,
        totalAlertas: true,
        totalExcesos: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [UserQualityHistory] })
  @ApiNestedQuery(UserQualityHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserQualityHistory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userQualityHistories(
    @common.Req() request: Request
  ): Promise<UserQualityHistory[]> {
    const args = plainToClass(UserQualityHistoryFindManyArgs, request.query);
    return this.service.userQualityHistories({
      ...args,
      select: {
        cantBloqueados30: true,
        cantBloqueados60: true,
        cantFinanc30: true,
        cantFinanc60: true,
        cantFinancUlt37: true,
        cantFinancUlt67: true,
        cantFinancUlt7: true,
        cantFraudes30: true,
        cantFraudes60: true,
        cantVenc530: true,
        cantVenc560: true,
        estatusBloqueo: true,
        fechaDesbloqueo: true,
        id: true,
        idUsrDesbloqueo: true,
        lockedAt: true,
        motivoDesbloqueo: true,
        pctjBloqueados30: true,
        pctjBloqueados60: true,
        pctjFraudes30: true,
        pctjFraudes60: true,
        pctjVenc530: true,
        pctjVenc560: true,
        totalAlertas: true,
        totalExcesos: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserQualityHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserQualityHistory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userQualityHistory(
    @common.Param() params: UserQualityHistoryWhereUniqueInput
  ): Promise<UserQualityHistory | null> {
    const result = await this.service.userQualityHistory({
      where: params,
      select: {
        cantBloqueados30: true,
        cantBloqueados60: true,
        cantFinanc30: true,
        cantFinanc60: true,
        cantFinancUlt37: true,
        cantFinancUlt67: true,
        cantFinancUlt7: true,
        cantFraudes30: true,
        cantFraudes60: true,
        cantVenc530: true,
        cantVenc560: true,
        estatusBloqueo: true,
        fechaDesbloqueo: true,
        id: true,
        idUsrDesbloqueo: true,
        lockedAt: true,
        motivoDesbloqueo: true,
        pctjBloqueados30: true,
        pctjBloqueados60: true,
        pctjFraudes30: true,
        pctjFraudes60: true,
        pctjVenc530: true,
        pctjVenc560: true,
        totalAlertas: true,
        totalExcesos: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserQualityHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserQualityHistory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUserQualityHistory(
    @common.Param() params: UserQualityHistoryWhereUniqueInput,
    @common.Body() data: UserQualityHistoryUpdateInput
  ): Promise<UserQualityHistory | null> {
    try {
      return await this.service.updateUserQualityHistory({
        where: params,
        data: {
          ...data,

          users: {
            connect: data.users,
          },
        },
        select: {
          cantBloqueados30: true,
          cantBloqueados60: true,
          cantFinanc30: true,
          cantFinanc60: true,
          cantFinancUlt37: true,
          cantFinancUlt67: true,
          cantFinancUlt7: true,
          cantFraudes30: true,
          cantFraudes60: true,
          cantVenc530: true,
          cantVenc560: true,
          estatusBloqueo: true,
          fechaDesbloqueo: true,
          id: true,
          idUsrDesbloqueo: true,
          lockedAt: true,
          motivoDesbloqueo: true,
          pctjBloqueados30: true,
          pctjBloqueados60: true,
          pctjFraudes30: true,
          pctjFraudes60: true,
          pctjVenc530: true,
          pctjVenc560: true,
          totalAlertas: true,
          totalExcesos: true,

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserQualityHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserQualityHistory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUserQualityHistory(
    @common.Param() params: UserQualityHistoryWhereUniqueInput
  ): Promise<UserQualityHistory | null> {
    try {
      return await this.service.deleteUserQualityHistory({
        where: params,
        select: {
          cantBloqueados30: true,
          cantBloqueados60: true,
          cantFinanc30: true,
          cantFinanc60: true,
          cantFinancUlt37: true,
          cantFinancUlt67: true,
          cantFinancUlt7: true,
          cantFraudes30: true,
          cantFraudes60: true,
          cantVenc530: true,
          cantVenc560: true,
          estatusBloqueo: true,
          fechaDesbloqueo: true,
          id: true,
          idUsrDesbloqueo: true,
          lockedAt: true,
          motivoDesbloqueo: true,
          pctjBloqueados30: true,
          pctjBloqueados60: true,
          pctjFraudes30: true,
          pctjFraudes60: true,
          pctjVenc530: true,
          pctjVenc560: true,
          totalAlertas: true,
          totalExcesos: true,

          users: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
