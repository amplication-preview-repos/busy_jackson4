/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccessLevel } from "../../accessLevel/base/AccessLevel";
import {
  ValidateNested,
  IsOptional,
  IsEnum,
  IsDate,
  IsInt,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { BranchManager } from "../../branchManager/base/BranchManager";
import { BranchOffice } from "../../branchOffice/base/BranchOffice";
import { Collaborator } from "../../collaborator/base/Collaborator";
import { ConektaPaymentTransac } from "../../conektaPaymentTransac/base/ConektaPaymentTransac";
import { Customer } from "../../customer/base/Customer";
import { EnumUserModelEstatusUsuario } from "./EnumUserModelEstatusUsuario";
import { LoanedDevice } from "../../loanedDevice/base/LoanedDevice";
import { ModifiedPermission } from "../../modifiedPermission/base/ModifiedPermission";
import { NubariumValidation } from "../../nubariumValidation/base/NubariumValidation";
import { PersonalLoan } from "../../personalLoan/base/PersonalLoan";
import { ProtectionCert } from "../../protectionCert/base/ProtectionCert";
import { Purchase } from "../../purchase/base/Purchase";
import { UserPermission } from "../../userPermission/base/UserPermission";
import { UserQualityHistory } from "../../userQualityHistory/base/UserQualityHistory";
import { Vendor } from "../../vendor/base/Vendor";
import { WarehouseGrant } from "../../warehouseGrant/base/WarehouseGrant";

@ObjectType()
class UserModel {
  @ApiProperty({
    required: false,
    type: () => AccessLevel,
  })
  @ValidateNested()
  @Type(() => AccessLevel)
  @IsOptional()
  accessLevels?: AccessLevel | null;

  @ApiProperty({
    required: false,
    type: () => [BranchManager],
  })
  @ValidateNested()
  @Type(() => BranchManager)
  @IsOptional()
  branchManagers?: Array<BranchManager>;

  @ApiProperty({
    required: false,
    type: () => [BranchOffice],
  })
  @ValidateNested()
  @Type(() => BranchOffice)
  @IsOptional()
  branchOffices?: Array<BranchOffice>;

  @ApiProperty({
    required: false,
    type: () => [Collaborator],
  })
  @ValidateNested()
  @Type(() => Collaborator)
  @IsOptional()
  collaboratorsCollaboratorsCreatedUserIdTousers?: Array<Collaborator>;

  @ApiProperty({
    required: false,
    type: () => Collaborator,
  })
  @ValidateNested()
  @Type(() => Collaborator)
  @IsOptional()
  collaboratorsUsersCollaboratorIdTocollaborators?: Collaborator | null;

  @ApiProperty({
    required: false,
    type: () => [ConektaPaymentTransac],
  })
  @ValidateNested()
  @Type(() => ConektaPaymentTransac)
  @IsOptional()
  conektaPaymentTransacs?: Array<ConektaPaymentTransac>;

  @ApiProperty({
    required: false,
    type: () => [Customer],
  })
  @ValidateNested()
  @Type(() => Customer)
  @IsOptional()
  customersCustomersCreatedUserIdTousers?: Array<Customer>;

  @ApiProperty({
    required: false,
    type: () => [Customer],
  })
  @ValidateNested()
  @Type(() => Customer)
  @IsOptional()
  customersCustomersUpdatedUserIdTousers?: Array<Customer>;

  @ApiProperty({
    required: true,
    enum: EnumUserModelEstatusUsuario,
  })
  @IsEnum(EnumUserModelEstatusUsuario)
  @Field(() => EnumUserModelEstatusUsuario, {
    nullable: true,
  })
  estatus_usuario?: "A" | "I";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  fechaRegistroUsuario!: Date;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  idColabRegistroUsuario!: number;

  @ApiProperty({
    required: false,
    type: () => [LoanedDevice],
  })
  @ValidateNested()
  @Type(() => LoanedDevice)
  @IsOptional()
  loanedDevicesLoanedDevicesCreatedUserIdTousers?: Array<LoanedDevice>;

  @ApiProperty({
    required: false,
    type: () => [LoanedDevice],
  })
  @ValidateNested()
  @Type(() => LoanedDevice)
  @IsOptional()
  loanedDevicesLoanedDevicesReturnedUserIdTousers?: Array<LoanedDevice>;

  @ApiProperty({
    required: false,
    type: () => [ModifiedPermission],
  })
  @ValidateNested()
  @Type(() => ModifiedPermission)
  @IsOptional()
  modifiedPermissions?: Array<ModifiedPermission>;

  @ApiProperty({
    required: false,
    type: () => [NubariumValidation],
  })
  @ValidateNested()
  @Type(() => NubariumValidation)
  @IsOptional()
  nubariumValidations?: Array<NubariumValidation>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  passCifrado!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  permisosExcluidos!: string | null;

  @ApiProperty({
    required: false,
    type: () => [PersonalLoan],
  })
  @ValidateNested()
  @Type(() => PersonalLoan)
  @IsOptional()
  personalLoans?: Array<PersonalLoan>;

  @ApiProperty({
    required: false,
    type: () => [ProtectionCert],
  })
  @ValidateNested()
  @Type(() => ProtectionCert)
  @IsOptional()
  protectionCerts?: Array<ProtectionCert>;

  @ApiProperty({
    required: false,
    type: () => [Purchase],
  })
  @ValidateNested()
  @Type(() => Purchase)
  @IsOptional()
  purchasesPurchasesCreatedUserIdTousers?: Array<Purchase>;

  @ApiProperty({
    required: false,
    type: () => [Purchase],
  })
  @ValidateNested()
  @Type(() => Purchase)
  @IsOptional()
  purchasesPurchasesUpdatedUserIdTousers?: Array<Purchase>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  userName!: string;

  @ApiProperty({
    required: false,
    type: () => [UserPermission],
  })
  @ValidateNested()
  @Type(() => UserPermission)
  @IsOptional()
  userPermissions?: Array<UserPermission>;

  @ApiProperty({
    required: false,
    type: () => [UserQualityHistory],
  })
  @ValidateNested()
  @Type(() => UserQualityHistory)
  @IsOptional()
  userQualityHistories?: Array<UserQualityHistory>;

  @ApiProperty({
    required: false,
    type: () => [Vendor],
  })
  @ValidateNested()
  @Type(() => Vendor)
  @IsOptional()
  vendorsVendorsCreatedUserIdTousers?: Array<Vendor>;

  @ApiProperty({
    required: false,
    type: () => [Vendor],
  })
  @ValidateNested()
  @Type(() => Vendor)
  @IsOptional()
  vendorsVendorsUpdatedUserIdTousers?: Array<Vendor>;

  @ApiProperty({
    required: false,
    type: () => [WarehouseGrant],
  })
  @ValidateNested()
  @Type(() => WarehouseGrant)
  @IsOptional()
  warehouseGrants?: Array<WarehouseGrant>;
}

export { UserModel as UserModel };
