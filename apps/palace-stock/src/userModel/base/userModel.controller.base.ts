/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserModelService } from "../userModel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserModelCreateInput } from "./UserModelCreateInput";
import { UserModel } from "./UserModel";
import { UserModelFindManyArgs } from "./UserModelFindManyArgs";
import { UserModelWhereUniqueInput } from "./UserModelWhereUniqueInput";
import { UserModelUpdateInput } from "./UserModelUpdateInput";
import { BranchManagerFindManyArgs } from "../../branchManager/base/BranchManagerFindManyArgs";
import { BranchManager } from "../../branchManager/base/BranchManager";
import { BranchManagerWhereUniqueInput } from "../../branchManager/base/BranchManagerWhereUniqueInput";
import { BranchOfficeFindManyArgs } from "../../branchOffice/base/BranchOfficeFindManyArgs";
import { BranchOffice } from "../../branchOffice/base/BranchOffice";
import { BranchOfficeWhereUniqueInput } from "../../branchOffice/base/BranchOfficeWhereUniqueInput";
import { CollaboratorFindManyArgs } from "../../collaborator/base/CollaboratorFindManyArgs";
import { Collaborator } from "../../collaborator/base/Collaborator";
import { CollaboratorWhereUniqueInput } from "../../collaborator/base/CollaboratorWhereUniqueInput";
import { ConektaPaymentTransacFindManyArgs } from "../../conektaPaymentTransac/base/ConektaPaymentTransacFindManyArgs";
import { ConektaPaymentTransac } from "../../conektaPaymentTransac/base/ConektaPaymentTransac";
import { ConektaPaymentTransacWhereUniqueInput } from "../../conektaPaymentTransac/base/ConektaPaymentTransacWhereUniqueInput";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { LoanedDeviceFindManyArgs } from "../../loanedDevice/base/LoanedDeviceFindManyArgs";
import { LoanedDevice } from "../../loanedDevice/base/LoanedDevice";
import { LoanedDeviceWhereUniqueInput } from "../../loanedDevice/base/LoanedDeviceWhereUniqueInput";
import { ModifiedPermissionFindManyArgs } from "../../modifiedPermission/base/ModifiedPermissionFindManyArgs";
import { ModifiedPermission } from "../../modifiedPermission/base/ModifiedPermission";
import { ModifiedPermissionWhereUniqueInput } from "../../modifiedPermission/base/ModifiedPermissionWhereUniqueInput";
import { NubariumValidationFindManyArgs } from "../../nubariumValidation/base/NubariumValidationFindManyArgs";
import { NubariumValidation } from "../../nubariumValidation/base/NubariumValidation";
import { NubariumValidationWhereUniqueInput } from "../../nubariumValidation/base/NubariumValidationWhereUniqueInput";
import { PersonalLoanFindManyArgs } from "../../personalLoan/base/PersonalLoanFindManyArgs";
import { PersonalLoan } from "../../personalLoan/base/PersonalLoan";
import { PersonalLoanWhereUniqueInput } from "../../personalLoan/base/PersonalLoanWhereUniqueInput";
import { ProtectionCertFindManyArgs } from "../../protectionCert/base/ProtectionCertFindManyArgs";
import { ProtectionCert } from "../../protectionCert/base/ProtectionCert";
import { ProtectionCertWhereUniqueInput } from "../../protectionCert/base/ProtectionCertWhereUniqueInput";
import { PurchaseFindManyArgs } from "../../purchase/base/PurchaseFindManyArgs";
import { Purchase } from "../../purchase/base/Purchase";
import { PurchaseWhereUniqueInput } from "../../purchase/base/PurchaseWhereUniqueInput";
import { UserPermissionFindManyArgs } from "../../userPermission/base/UserPermissionFindManyArgs";
import { UserPermission } from "../../userPermission/base/UserPermission";
import { UserPermissionWhereUniqueInput } from "../../userPermission/base/UserPermissionWhereUniqueInput";
import { UserQualityHistoryFindManyArgs } from "../../userQualityHistory/base/UserQualityHistoryFindManyArgs";
import { UserQualityHistory } from "../../userQualityHistory/base/UserQualityHistory";
import { UserQualityHistoryWhereUniqueInput } from "../../userQualityHistory/base/UserQualityHistoryWhereUniqueInput";
import { VendorFindManyArgs } from "../../vendor/base/VendorFindManyArgs";
import { Vendor } from "../../vendor/base/Vendor";
import { VendorWhereUniqueInput } from "../../vendor/base/VendorWhereUniqueInput";
import { WarehouseGrantFindManyArgs } from "../../warehouseGrant/base/WarehouseGrantFindManyArgs";
import { WarehouseGrant } from "../../warehouseGrant/base/WarehouseGrant";
import { WarehouseGrantWhereUniqueInput } from "../../warehouseGrant/base/WarehouseGrantWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserModelControllerBase {
  constructor(
    protected readonly service: UserModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserModel })
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUserModel(
    @common.Body() data: UserModelCreateInput
  ): Promise<UserModel> {
    return await this.service.createUserModel({
      data: {
        ...data,

        accessLevels: data.accessLevels
          ? {
              connect: data.accessLevels,
            }
          : undefined,

        collaboratorsUsersCollaboratorIdTocollaborators:
          data.collaboratorsUsersCollaboratorIdTocollaborators
            ? {
                connect: data.collaboratorsUsersCollaboratorIdTocollaborators,
              }
            : undefined,
      },
      select: {
        accessLevels: {
          select: {
            id: true,
          },
        },

        collaboratorsUsersCollaboratorIdTocollaborators: {
          select: {
            id: true,
          },
        },

        estatus_usuario: true,
        fechaRegistroUsuario: true,
        id: true,
        idColabRegistroUsuario: true,
        passCifrado: true,
        permisosExcluidos: true,
        userName: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [UserModel] })
  @ApiNestedQuery(UserModelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userModels(@common.Req() request: Request): Promise<UserModel[]> {
    const args = plainToClass(UserModelFindManyArgs, request.query);
    return this.service.userModels({
      ...args,
      select: {
        accessLevels: {
          select: {
            id: true,
          },
        },

        collaboratorsUsersCollaboratorIdTocollaborators: {
          select: {
            id: true,
          },
        },

        estatus_usuario: true,
        fechaRegistroUsuario: true,
        id: true,
        idColabRegistroUsuario: true,
        passCifrado: true,
        permisosExcluidos: true,
        userName: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userModel(
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<UserModel | null> {
    const result = await this.service.userModel({
      where: params,
      select: {
        accessLevels: {
          select: {
            id: true,
          },
        },

        collaboratorsUsersCollaboratorIdTocollaborators: {
          select: {
            id: true,
          },
        },

        estatus_usuario: true,
        fechaRegistroUsuario: true,
        id: true,
        idColabRegistroUsuario: true,
        passCifrado: true,
        permisosExcluidos: true,
        userName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUserModel(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() data: UserModelUpdateInput
  ): Promise<UserModel | null> {
    try {
      return await this.service.updateUserModel({
        where: params,
        data: {
          ...data,

          accessLevels: data.accessLevels
            ? {
                connect: data.accessLevels,
              }
            : undefined,

          collaboratorsUsersCollaboratorIdTocollaborators:
            data.collaboratorsUsersCollaboratorIdTocollaborators
              ? {
                  connect: data.collaboratorsUsersCollaboratorIdTocollaborators,
                }
              : undefined,
        },
        select: {
          accessLevels: {
            select: {
              id: true,
            },
          },

          collaboratorsUsersCollaboratorIdTocollaborators: {
            select: {
              id: true,
            },
          },

          estatus_usuario: true,
          fechaRegistroUsuario: true,
          id: true,
          idColabRegistroUsuario: true,
          passCifrado: true,
          permisosExcluidos: true,
          userName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUserModel(
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<UserModel | null> {
    try {
      return await this.service.deleteUserModel({
        where: params,
        select: {
          accessLevels: {
            select: {
              id: true,
            },
          },

          collaboratorsUsersCollaboratorIdTocollaborators: {
            select: {
              id: true,
            },
          },

          estatus_usuario: true,
          fechaRegistroUsuario: true,
          id: true,
          idColabRegistroUsuario: true,
          passCifrado: true,
          permisosExcluidos: true,
          userName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/branchManagers")
  @ApiNestedQuery(BranchManagerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BranchManager",
    action: "read",
    possession: "any",
  })
  async findBranchManagers(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<BranchManager[]> {
    const query = plainToClass(BranchManagerFindManyArgs, request.query);
    const results = await this.service.findBranchManagers(params.id, {
      ...query,
      select: {
        cargo: true,

        collaborators: {
          select: {
            id: true,
          },
        },

        fechaIniciaCargo: true,
        id: true,
        numSucursal: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/branchManagers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectBranchManagers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: BranchManagerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchManagers: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/branchManagers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateBranchManagers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: BranchManagerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchManagers: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/branchManagers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectBranchManagers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: BranchManagerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchManagers: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/branchOffices")
  @ApiNestedQuery(BranchOfficeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BranchOffice",
    action: "read",
    possession: "any",
  })
  async findBranchOffices(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<BranchOffice[]> {
    const query = plainToClass(BranchOfficeFindManyArgs, request.query);
    const results = await this.service.findBranchOffices(params.id, {
      ...query,
      select: {
        branchName: true,
        branchNo: true,
        ciudadMunicipio: true,
        codigoPostal: true,
        direccion: true,
        estadoRepublica: true,
        estatus_sucursal: true,
        fechaRegistro: true,
        id: true,
        region: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/branchOffices")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectBranchOffices(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: BranchOfficeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchOffices: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/branchOffices")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateBranchOffices(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: BranchOfficeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchOffices: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/branchOffices")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectBranchOffices(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: BranchOfficeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchOffices: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/collaboratorsCollaboratorsCreatedUserIdTousers")
  @ApiNestedQuery(CollaboratorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Collaborator",
    action: "read",
    possession: "any",
  })
  async findCollaboratorsCollaboratorsCreatedUserIdTousers(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<Collaborator[]> {
    const query = plainToClass(CollaboratorFindManyArgs, request.query);
    const results =
      await this.service.findCollaboratorsCollaboratorsCreatedUserIdTousers(
        params.id,
        {
          ...query,
          select: {
            apellido1: true,
            apellido2: true,
            cargo: true,
            ciudad: true,
            ciudadActual: true,
            codigoPostal: true,
            codigoPostalActual: true,
            colonia: true,
            coloniaActual: true,
            correoContacto: true,
            curp: true,
            direccionActual: true,
            domicilio: true,
            domicilioActual: true,
            esquemaPago: true,
            estado: true,
            estadoActual: true,
            estatus_colaborador: true,
            fechaCambioEsquema: true,
            fechaIngreso: true,
            fechaNacimiento: true,
            fechaRegistro: true,
            fechaReingreso: true,
            id: true,
            nombres: true,
            rfc: true,
            telefonoContacto: true,

            usersCollaboratorsCreatedUserIdTousers: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/collaboratorsCollaboratorsCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectCollaboratorsCollaboratorsCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: CollaboratorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      collaboratorsCollaboratorsCreatedUserIdTousers: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/collaboratorsCollaboratorsCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateCollaboratorsCollaboratorsCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: CollaboratorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      collaboratorsCollaboratorsCreatedUserIdTousers: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/collaboratorsCollaboratorsCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectCollaboratorsCollaboratorsCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: CollaboratorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      collaboratorsCollaboratorsCreatedUserIdTousers: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/conektaPaymentTransacs")
  @ApiNestedQuery(ConektaPaymentTransacFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "read",
    possession: "any",
  })
  async findConektaPaymentTransacs(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<ConektaPaymentTransac[]> {
    const query = plainToClass(
      ConektaPaymentTransacFindManyArgs,
      request.query
    );
    const results = await this.service.findConektaPaymentTransacs(params.id, {
      ...query,
      select: {
        amount: true,
        authCode: true,
        clabe: true,
        createdAt: true,
        datosPago: true,
        expiresAt: true,
        fechaActualizacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        habilitarPagoRecurrente: true,
        id: true,
        issuer: true,
        last4: true,
        metodoPago: true,
        orderId: true,
        payStatus: true,
        reference: true,
        rutaRef: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/conektaPaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectConektaPaymentTransacs(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: ConektaPaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaPaymentTransacs: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/conektaPaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateConektaPaymentTransacs(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: ConektaPaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaPaymentTransacs: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/conektaPaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectConektaPaymentTransacs(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: ConektaPaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaPaymentTransacs: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customersCustomersCreatedUserIdTousers")
  @ApiNestedQuery(CustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async findCustomersCustomersCreatedUserIdTousers(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<Customer[]> {
    const query = plainToClass(CustomerFindManyArgs, request.query);
    const results =
      await this.service.findCustomersCustomersCreatedUserIdTousers(params.id, {
        ...query,
        select: {
          antiguedadTrabajo: true,
          apellido1Cliente: true,
          apellido2Cliente: true,
          billingCfdiUseId: true,
          billingFiscalRegimeId: true,
          ciudadActualCte: true,
          ciudadCte: true,
          ciudadRazSoc: true,
          clabePaycode: true,
          claveIdCliente: true,
          coloniaActualCte: true,
          coloniaCte: true,
          coloniaRazSoc: true,
          conekta: true,
          correoCte: true,
          correoRazSoc: true,
          cpActualCte: true,
          cpCte: true,
          cpRazSoc: true,
          cte_requiere_factura: true,
          curpCliente: true,
          direccionActualCte: true,
          direccionCte: true,
          direccionRazSoc: true,
          domicilioTrabajo: true,
          edadCliente: true,
          enganchePromoLealtad: true,
          estadoRepActualCte: true,
          estadoRepCte: true,
          estadoRepRazSoc: true,
          estatus_cliente: true,
          estatusSeguroVida: true,
          fechaActivacionSeguro: true,
          fechaAltaCliente: true,
          fechaRegistro: true,
          fechaUltCambio: true,
          folioSeguroVida: true,
          genero_cliente: true,
          id: true,
          ine_direccion_actual: true,
          lugarTrabajo: true,
          montoDisponibleEnganche: true,
          nombreCompletoCliente: true,
          nombresCliente: true,
          nomRef1Cliente: true,
          nomRef2Cliente: true,
          nubariumScore: true,
          numExtCte: true,
          numExtRazSoc: true,
          numIntCte: true,
          numIntRazSoc: true,
          numTelCte: true,
          numTelFijoCte: true,
          numTelRazSoc: true,
          paisRazSoc: true,
          puestoTrabajo: true,
          qidAngaza: true,
          razonSocialCte: true,
          rfcCte: true,
          rfcPersonalCte: true,
          rutaFirma: true,
          salarioMensualTrabajo: true,
          scoreMaxValue: true,
          secondaryTelephoneNumber: true,
          telRef1Cliente: true,
          telRef2Cliente: true,
          tipoIdCliente: true,

          usersCustomersCreatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          usersCustomersUpdatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customersCustomersCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectCustomersCustomersCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customersCustomersCreatedUserIdTousers: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customersCustomersCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateCustomersCustomersCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customersCustomersCreatedUserIdTousers: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customersCustomersCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectCustomersCustomersCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customersCustomersCreatedUserIdTousers: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customersCustomersUpdatedUserIdTousers")
  @ApiNestedQuery(CustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async findCustomersCustomersUpdatedUserIdTousers(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<Customer[]> {
    const query = plainToClass(CustomerFindManyArgs, request.query);
    const results =
      await this.service.findCustomersCustomersUpdatedUserIdTousers(params.id, {
        ...query,
        select: {
          antiguedadTrabajo: true,
          apellido1Cliente: true,
          apellido2Cliente: true,
          billingCfdiUseId: true,
          billingFiscalRegimeId: true,
          ciudadActualCte: true,
          ciudadCte: true,
          ciudadRazSoc: true,
          clabePaycode: true,
          claveIdCliente: true,
          coloniaActualCte: true,
          coloniaCte: true,
          coloniaRazSoc: true,
          conekta: true,
          correoCte: true,
          correoRazSoc: true,
          cpActualCte: true,
          cpCte: true,
          cpRazSoc: true,
          cte_requiere_factura: true,
          curpCliente: true,
          direccionActualCte: true,
          direccionCte: true,
          direccionRazSoc: true,
          domicilioTrabajo: true,
          edadCliente: true,
          enganchePromoLealtad: true,
          estadoRepActualCte: true,
          estadoRepCte: true,
          estadoRepRazSoc: true,
          estatus_cliente: true,
          estatusSeguroVida: true,
          fechaActivacionSeguro: true,
          fechaAltaCliente: true,
          fechaRegistro: true,
          fechaUltCambio: true,
          folioSeguroVida: true,
          genero_cliente: true,
          id: true,
          ine_direccion_actual: true,
          lugarTrabajo: true,
          montoDisponibleEnganche: true,
          nombreCompletoCliente: true,
          nombresCliente: true,
          nomRef1Cliente: true,
          nomRef2Cliente: true,
          nubariumScore: true,
          numExtCte: true,
          numExtRazSoc: true,
          numIntCte: true,
          numIntRazSoc: true,
          numTelCte: true,
          numTelFijoCte: true,
          numTelRazSoc: true,
          paisRazSoc: true,
          puestoTrabajo: true,
          qidAngaza: true,
          razonSocialCte: true,
          rfcCte: true,
          rfcPersonalCte: true,
          rutaFirma: true,
          salarioMensualTrabajo: true,
          scoreMaxValue: true,
          secondaryTelephoneNumber: true,
          telRef1Cliente: true,
          telRef2Cliente: true,
          tipoIdCliente: true,

          usersCustomersCreatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          usersCustomersUpdatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customersCustomersUpdatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectCustomersCustomersUpdatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customersCustomersUpdatedUserIdTousers: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customersCustomersUpdatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateCustomersCustomersUpdatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customersCustomersUpdatedUserIdTousers: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customersCustomersUpdatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectCustomersCustomersUpdatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customersCustomersUpdatedUserIdTousers: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/loanedDevicesLoanedDevicesCreatedUserIdTousers")
  @ApiNestedQuery(LoanedDeviceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LoanedDevice",
    action: "read",
    possession: "any",
  })
  async findLoanedDevicesLoanedDevicesCreatedUserIdTousers(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<LoanedDevice[]> {
    const query = plainToClass(LoanedDeviceFindManyArgs, request.query);
    const results =
      await this.service.findLoanedDevicesLoanedDevicesCreatedUserIdTousers(
        params.id,
        {
          ...query,
          select: {
            codigoSerie: true,
            comentarios: true,

            customers: {
              select: {
                id: true,
              },
            },

            fechaDevolucion: true,
            fechaRegistro: true,

            financedSales: {
              select: {
                id: true,
              },
            },

            id: true,

            items: {
              select: {
                id: true,
              },
            },

            loanStatus: true,

            usersLoanedDevicesCreatedUserIdTousers: {
              select: {
                id: true,
              },
            },

            usersLoanedDevicesReturnedUserIdTousers: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/loanedDevicesLoanedDevicesCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectLoanedDevicesLoanedDevicesCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevicesLoanedDevicesCreatedUserIdTousers: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/loanedDevicesLoanedDevicesCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateLoanedDevicesLoanedDevicesCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevicesLoanedDevicesCreatedUserIdTousers: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/loanedDevicesLoanedDevicesCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectLoanedDevicesLoanedDevicesCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevicesLoanedDevicesCreatedUserIdTousers: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/loanedDevicesLoanedDevicesReturnedUserIdTousers")
  @ApiNestedQuery(LoanedDeviceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LoanedDevice",
    action: "read",
    possession: "any",
  })
  async findLoanedDevicesLoanedDevicesReturnedUserIdTousers(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<LoanedDevice[]> {
    const query = plainToClass(LoanedDeviceFindManyArgs, request.query);
    const results =
      await this.service.findLoanedDevicesLoanedDevicesReturnedUserIdTousers(
        params.id,
        {
          ...query,
          select: {
            codigoSerie: true,
            comentarios: true,

            customers: {
              select: {
                id: true,
              },
            },

            fechaDevolucion: true,
            fechaRegistro: true,

            financedSales: {
              select: {
                id: true,
              },
            },

            id: true,

            items: {
              select: {
                id: true,
              },
            },

            loanStatus: true,

            usersLoanedDevicesCreatedUserIdTousers: {
              select: {
                id: true,
              },
            },

            usersLoanedDevicesReturnedUserIdTousers: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/loanedDevicesLoanedDevicesReturnedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectLoanedDevicesLoanedDevicesReturnedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevicesLoanedDevicesReturnedUserIdTousers: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/loanedDevicesLoanedDevicesReturnedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateLoanedDevicesLoanedDevicesReturnedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevicesLoanedDevicesReturnedUserIdTousers: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/loanedDevicesLoanedDevicesReturnedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectLoanedDevicesLoanedDevicesReturnedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevicesLoanedDevicesReturnedUserIdTousers: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/modifiedPermissions")
  @ApiNestedQuery(ModifiedPermissionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ModifiedPermission",
    action: "read",
    possession: "any",
  })
  async findModifiedPermissions(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<ModifiedPermission[]> {
    const query = plainToClass(ModifiedPermissionFindManyArgs, request.query);
    const results = await this.service.findModifiedPermissions(params.id, {
      ...query,
      select: {
        accion: true,
        createdUserId: true,
        fechaRegistro: true,
        id: true,

        permissions: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/modifiedPermissions")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectModifiedPermissions(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: ModifiedPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedPermissions: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/modifiedPermissions")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateModifiedPermissions(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: ModifiedPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedPermissions: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/modifiedPermissions")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectModifiedPermissions(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: ModifiedPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      modifiedPermissions: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/nubariumValidations")
  @ApiNestedQuery(NubariumValidationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "NubariumValidation",
    action: "read",
    possession: "any",
  })
  async findNubariumValidations(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<NubariumValidation[]> {
    const query = plainToClass(NubariumValidationFindManyArgs, request.query);
    const results = await this.service.findNubariumValidations(params.id, {
      ...query,
      select: {
        claveElectorCliente: true,
        fecha: true,
        id: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/nubariumValidations")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectNubariumValidations(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: NubariumValidationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nubariumValidations: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/nubariumValidations")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateNubariumValidations(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: NubariumValidationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nubariumValidations: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/nubariumValidations")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectNubariumValidations(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: NubariumValidationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nubariumValidations: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/personalLoans")
  @ApiNestedQuery(PersonalLoanFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "read",
    possession: "any",
  })
  async findPersonalLoans(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<PersonalLoan[]> {
    const query = plainToClass(PersonalLoanFindManyArgs, request.query);
    const results = await this.service.findPersonalLoans(params.id, {
      ...query,
      select: {
        codigoBloqueo: true,
        comentarios: true,

        customers: {
          select: {
            id: true,
          },
        },

        deletedUserId: true,
        desctoPagoOportuno: true,
        estatus_prestamo: true,
        fechaCancelacion: true,
        fechaPrestamo: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        id: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        plazo: true,
        requestedUserId: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefonoEnvioToken: true,
        tipo_plazo: true,
        tokenEnviado: true,
        updatedAt: true,
        updatedUserId: true,

        users: {
          select: {
            id: true,
          },
        },

        validaciones_saltadas: true,
        vendorLock: true,

        warehouses: {
          select: {
            id: true,
          },
        },

        warningAlert: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/personalLoans")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectPersonalLoans(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: PersonalLoanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalLoans: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/personalLoans")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updatePersonalLoans(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: PersonalLoanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalLoans: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/personalLoans")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectPersonalLoans(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: PersonalLoanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalLoans: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/protectionCerts")
  @ApiNestedQuery(ProtectionCertFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProtectionCert",
    action: "read",
    possession: "any",
  })
  async findProtectionCerts(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<ProtectionCert[]> {
    const query = plainToClass(ProtectionCertFindManyArgs, request.query);
    const results = await this.service.findProtectionCerts(params.id, {
      ...query,
      select: {
        certFolio: true,
        createdUserId: true,

        customers: {
          select: {
            id: true,
          },
        },

        estatus_cert: true,
        fechaCancelacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        motivoCancelacion: true,
        protec_activadas: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/protectionCerts")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectProtectionCerts(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: ProtectionCertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCerts: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/protectionCerts")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateProtectionCerts(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: ProtectionCertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCerts: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/protectionCerts")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectProtectionCerts(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: ProtectionCertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCerts: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchasesPurchasesCreatedUserIdTousers")
  @ApiNestedQuery(PurchaseFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "any",
  })
  async findPurchasesPurchasesCreatedUserIdTousers(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<Purchase[]> {
    const query = plainToClass(PurchaseFindManyArgs, request.query);
    const results =
      await this.service.findPurchasesPurchasesCreatedUserIdTousers(params.id, {
        ...query,
        select: {
          accountingDepartmentDescription: true,
          accountingDepartmentId: true,
          amount: true,
          comments: true,
          createdAt: true,
          id: true,
          items: true,
          payment_type: true,
          priority: true,
          requestCollaboratorId: true,
          requestDepartmentDesc: true,
          requestDepartmentId: true,
          status_purchase: true,
          superiorCollaboratorId: true,
          updatedAt: true,

          usersPurchasesCreatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          usersPurchasesUpdatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          vendors: {
            select: {
              id: true,
            },
          },
        },
      });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchasesPurchasesCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectPurchasesPurchasesCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchasesPurchasesCreatedUserIdTousers: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchasesPurchasesCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updatePurchasesPurchasesCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchasesPurchasesCreatedUserIdTousers: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchasesPurchasesCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectPurchasesPurchasesCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchasesPurchasesCreatedUserIdTousers: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchasesPurchasesUpdatedUserIdTousers")
  @ApiNestedQuery(PurchaseFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "any",
  })
  async findPurchasesPurchasesUpdatedUserIdTousers(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<Purchase[]> {
    const query = plainToClass(PurchaseFindManyArgs, request.query);
    const results =
      await this.service.findPurchasesPurchasesUpdatedUserIdTousers(params.id, {
        ...query,
        select: {
          accountingDepartmentDescription: true,
          accountingDepartmentId: true,
          amount: true,
          comments: true,
          createdAt: true,
          id: true,
          items: true,
          payment_type: true,
          priority: true,
          requestCollaboratorId: true,
          requestDepartmentDesc: true,
          requestDepartmentId: true,
          status_purchase: true,
          superiorCollaboratorId: true,
          updatedAt: true,

          usersPurchasesCreatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          usersPurchasesUpdatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          vendors: {
            select: {
              id: true,
            },
          },
        },
      });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchasesPurchasesUpdatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectPurchasesPurchasesUpdatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchasesPurchasesUpdatedUserIdTousers: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchasesPurchasesUpdatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updatePurchasesPurchasesUpdatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchasesPurchasesUpdatedUserIdTousers: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchasesPurchasesUpdatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectPurchasesPurchasesUpdatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchasesPurchasesUpdatedUserIdTousers: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userPermissions")
  @ApiNestedQuery(UserPermissionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserPermission",
    action: "read",
    possession: "any",
  })
  async findUserPermissions(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<UserPermission[]> {
    const query = plainToClass(UserPermissionFindManyArgs, request.query);
    const results = await this.service.findUserPermissions(params.id, {
      ...query,
      select: {
        fechaAsignoPermiso: true,
        id: true,
        idUsrAsignoPermiso: true,

        permissions: {
          select: {
            id: true,
          },
        },

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userPermissions")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectUserPermissions(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: UserPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPermissions: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userPermissions")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateUserPermissions(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: UserPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPermissions: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userPermissions")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectUserPermissions(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: UserPermissionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPermissions: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userQualityHistories")
  @ApiNestedQuery(UserQualityHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserQualityHistory",
    action: "read",
    possession: "any",
  })
  async findUserQualityHistories(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<UserQualityHistory[]> {
    const query = plainToClass(UserQualityHistoryFindManyArgs, request.query);
    const results = await this.service.findUserQualityHistories(params.id, {
      ...query,
      select: {
        cantBloqueados30: true,
        cantBloqueados60: true,
        cantFinanc30: true,
        cantFinanc60: true,
        cantFinancUlt37: true,
        cantFinancUlt67: true,
        cantFinancUlt7: true,
        cantFraudes30: true,
        cantFraudes60: true,
        cantVenc530: true,
        cantVenc560: true,
        estatusBloqueo: true,
        fechaDesbloqueo: true,
        id: true,
        idUsrDesbloqueo: true,
        lockedAt: true,
        motivoDesbloqueo: true,
        pctjBloqueados30: true,
        pctjBloqueados60: true,
        pctjFraudes30: true,
        pctjFraudes60: true,
        pctjVenc530: true,
        pctjVenc560: true,
        totalAlertas: true,
        totalExcesos: true,

        users: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userQualityHistories")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectUserQualityHistories(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: UserQualityHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userQualityHistories: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userQualityHistories")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateUserQualityHistories(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: UserQualityHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userQualityHistories: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userQualityHistories")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectUserQualityHistories(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: UserQualityHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userQualityHistories: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/vendorsVendorsCreatedUserIdTousers")
  @ApiNestedQuery(VendorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Vendor",
    action: "read",
    possession: "any",
  })
  async findVendorsVendorsCreatedUserIdTousers(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<Vendor[]> {
    const query = plainToClass(VendorFindManyArgs, request.query);
    const results = await this.service.findVendorsVendorsCreatedUserIdTousers(
      params.id,
      {
        ...query,
        select: {
          addressStreet: true,
          bankDetails: true,
          createdAt: true,
          email: true,
          id: true,
          invoicingSystem: true,
          municipality: true,
          phoneNumber: true,
          postalCode: true,
          state: true,
          status: true,
          suburbName: true,
          updatedAt: true,

          usersVendorsCreatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          usersVendorsUpdatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          vendorName: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/vendorsVendorsCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectVendorsVendorsCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: VendorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vendorsVendorsCreatedUserIdTousers: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/vendorsVendorsCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateVendorsVendorsCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: VendorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vendorsVendorsCreatedUserIdTousers: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/vendorsVendorsCreatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectVendorsVendorsCreatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: VendorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vendorsVendorsCreatedUserIdTousers: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/vendorsVendorsUpdatedUserIdTousers")
  @ApiNestedQuery(VendorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Vendor",
    action: "read",
    possession: "any",
  })
  async findVendorsVendorsUpdatedUserIdTousers(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<Vendor[]> {
    const query = plainToClass(VendorFindManyArgs, request.query);
    const results = await this.service.findVendorsVendorsUpdatedUserIdTousers(
      params.id,
      {
        ...query,
        select: {
          addressStreet: true,
          bankDetails: true,
          createdAt: true,
          email: true,
          id: true,
          invoicingSystem: true,
          municipality: true,
          phoneNumber: true,
          postalCode: true,
          state: true,
          status: true,
          suburbName: true,
          updatedAt: true,

          usersVendorsCreatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          usersVendorsUpdatedUserIdTousers: {
            select: {
              id: true,
            },
          },

          vendorName: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/vendorsVendorsUpdatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectVendorsVendorsUpdatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: VendorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vendorsVendorsUpdatedUserIdTousers: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/vendorsVendorsUpdatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateVendorsVendorsUpdatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: VendorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vendorsVendorsUpdatedUserIdTousers: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/vendorsVendorsUpdatedUserIdTousers")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectVendorsVendorsUpdatedUserIdTousers(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: VendorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vendorsVendorsUpdatedUserIdTousers: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/warehouseGrants")
  @ApiNestedQuery(WarehouseGrantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WarehouseGrant",
    action: "read",
    possession: "any",
  })
  async findWarehouseGrants(
    @common.Req() request: Request,
    @common.Param() params: UserModelWhereUniqueInput
  ): Promise<WarehouseGrant[]> {
    const query = plainToClass(WarehouseGrantFindManyArgs, request.query);
    const results = await this.service.findWarehouseGrants(params.id, {
      ...query,
      select: {
        fechaAsignacion: true,
        id: true,
        mainWhouse: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseGrants")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async connectWarehouseGrants(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: WarehouseGrantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseGrants: {
        connect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseGrants")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateWarehouseGrants(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: WarehouseGrantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseGrants: {
        set: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseGrants")
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async disconnectWarehouseGrants(
    @common.Param() params: UserModelWhereUniqueInput,
    @common.Body() body: WarehouseGrantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseGrants: {
        disconnect: body,
      },
    };
    await this.service.updateUserModel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
