/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccessLevelWhereUniqueInput } from "../../accessLevel/base/AccessLevelWhereUniqueInput";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { BranchManagerListRelationFilter } from "../../branchManager/base/BranchManagerListRelationFilter";
import { BranchOfficeListRelationFilter } from "../../branchOffice/base/BranchOfficeListRelationFilter";
import { CollaboratorListRelationFilter } from "../../collaborator/base/CollaboratorListRelationFilter";
import { CollaboratorWhereUniqueInput } from "../../collaborator/base/CollaboratorWhereUniqueInput";
import { ConektaPaymentTransacListRelationFilter } from "../../conektaPaymentTransac/base/ConektaPaymentTransacListRelationFilter";
import { CustomerListRelationFilter } from "../../customer/base/CustomerListRelationFilter";
import { EnumUserModelEstatusUsuario } from "./EnumUserModelEstatusUsuario";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { IntFilter } from "../../util/IntFilter";
import { LoanedDeviceListRelationFilter } from "../../loanedDevice/base/LoanedDeviceListRelationFilter";
import { ModifiedPermissionListRelationFilter } from "../../modifiedPermission/base/ModifiedPermissionListRelationFilter";
import { NubariumValidationListRelationFilter } from "../../nubariumValidation/base/NubariumValidationListRelationFilter";
import { StringFilter } from "../../util/StringFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { PersonalLoanListRelationFilter } from "../../personalLoan/base/PersonalLoanListRelationFilter";
import { ProtectionCertListRelationFilter } from "../../protectionCert/base/ProtectionCertListRelationFilter";
import { PurchaseListRelationFilter } from "../../purchase/base/PurchaseListRelationFilter";
import { UserPermissionListRelationFilter } from "../../userPermission/base/UserPermissionListRelationFilter";
import { UserQualityHistoryListRelationFilter } from "../../userQualityHistory/base/UserQualityHistoryListRelationFilter";
import { VendorListRelationFilter } from "../../vendor/base/VendorListRelationFilter";
import { WarehouseGrantListRelationFilter } from "../../warehouseGrant/base/WarehouseGrantListRelationFilter";

@InputType()
class UserModelWhereInput {
  @ApiProperty({
    required: false,
    type: () => AccessLevelWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AccessLevelWhereUniqueInput)
  @IsOptional()
  @Field(() => AccessLevelWhereUniqueInput, {
    nullable: true,
  })
  accessLevels?: AccessLevelWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => BranchManagerListRelationFilter,
  })
  @ValidateNested()
  @Type(() => BranchManagerListRelationFilter)
  @IsOptional()
  @Field(() => BranchManagerListRelationFilter, {
    nullable: true,
  })
  branchManagers?: BranchManagerListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => BranchOfficeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => BranchOfficeListRelationFilter)
  @IsOptional()
  @Field(() => BranchOfficeListRelationFilter, {
    nullable: true,
  })
  branchOffices?: BranchOfficeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CollaboratorListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CollaboratorListRelationFilter)
  @IsOptional()
  @Field(() => CollaboratorListRelationFilter, {
    nullable: true,
  })
  collaboratorsCollaboratorsCreatedUserIdTousers?: CollaboratorListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CollaboratorWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CollaboratorWhereUniqueInput)
  @IsOptional()
  @Field(() => CollaboratorWhereUniqueInput, {
    nullable: true,
  })
  collaboratorsUsersCollaboratorIdTocollaborators?: CollaboratorWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ConektaPaymentTransacListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ConektaPaymentTransacListRelationFilter)
  @IsOptional()
  @Field(() => ConektaPaymentTransacListRelationFilter, {
    nullable: true,
  })
  conektaPaymentTransacs?: ConektaPaymentTransacListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CustomerListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CustomerListRelationFilter)
  @IsOptional()
  @Field(() => CustomerListRelationFilter, {
    nullable: true,
  })
  customersCustomersCreatedUserIdTousers?: CustomerListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CustomerListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CustomerListRelationFilter)
  @IsOptional()
  @Field(() => CustomerListRelationFilter, {
    nullable: true,
  })
  customersCustomersUpdatedUserIdTousers?: CustomerListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumUserModelEstatusUsuario,
  })
  @IsEnum(EnumUserModelEstatusUsuario)
  @IsOptional()
  @Field(() => EnumUserModelEstatusUsuario, {
    nullable: true,
  })
  estatus_usuario?: "A" | "I";

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  fechaRegistroUsuario?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  id?: IntFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  idColabRegistroUsuario?: IntFilter;

  @ApiProperty({
    required: false,
    type: () => LoanedDeviceListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LoanedDeviceListRelationFilter)
  @IsOptional()
  @Field(() => LoanedDeviceListRelationFilter, {
    nullable: true,
  })
  loanedDevicesLoanedDevicesCreatedUserIdTousers?: LoanedDeviceListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => LoanedDeviceListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LoanedDeviceListRelationFilter)
  @IsOptional()
  @Field(() => LoanedDeviceListRelationFilter, {
    nullable: true,
  })
  loanedDevicesLoanedDevicesReturnedUserIdTousers?: LoanedDeviceListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ModifiedPermissionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ModifiedPermissionListRelationFilter)
  @IsOptional()
  @Field(() => ModifiedPermissionListRelationFilter, {
    nullable: true,
  })
  modifiedPermissions?: ModifiedPermissionListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => NubariumValidationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => NubariumValidationListRelationFilter)
  @IsOptional()
  @Field(() => NubariumValidationListRelationFilter, {
    nullable: true,
  })
  nubariumValidations?: NubariumValidationListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  passCifrado?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  permisosExcluidos?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => PersonalLoanListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PersonalLoanListRelationFilter)
  @IsOptional()
  @Field(() => PersonalLoanListRelationFilter, {
    nullable: true,
  })
  personalLoans?: PersonalLoanListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ProtectionCertListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProtectionCertListRelationFilter)
  @IsOptional()
  @Field(() => ProtectionCertListRelationFilter, {
    nullable: true,
  })
  protectionCerts?: ProtectionCertListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => PurchaseListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PurchaseListRelationFilter)
  @IsOptional()
  @Field(() => PurchaseListRelationFilter, {
    nullable: true,
  })
  purchasesPurchasesCreatedUserIdTousers?: PurchaseListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => PurchaseListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PurchaseListRelationFilter)
  @IsOptional()
  @Field(() => PurchaseListRelationFilter, {
    nullable: true,
  })
  purchasesPurchasesUpdatedUserIdTousers?: PurchaseListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  userName?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => UserPermissionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserPermissionListRelationFilter)
  @IsOptional()
  @Field(() => UserPermissionListRelationFilter, {
    nullable: true,
  })
  userPermissions?: UserPermissionListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserQualityHistoryListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserQualityHistoryListRelationFilter)
  @IsOptional()
  @Field(() => UserQualityHistoryListRelationFilter, {
    nullable: true,
  })
  userQualityHistories?: UserQualityHistoryListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => VendorListRelationFilter,
  })
  @ValidateNested()
  @Type(() => VendorListRelationFilter)
  @IsOptional()
  @Field(() => VendorListRelationFilter, {
    nullable: true,
  })
  vendorsVendorsCreatedUserIdTousers?: VendorListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => VendorListRelationFilter,
  })
  @ValidateNested()
  @Type(() => VendorListRelationFilter)
  @IsOptional()
  @Field(() => VendorListRelationFilter, {
    nullable: true,
  })
  vendorsVendorsUpdatedUserIdTousers?: VendorListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => WarehouseGrantListRelationFilter,
  })
  @ValidateNested()
  @Type(() => WarehouseGrantListRelationFilter)
  @IsOptional()
  @Field(() => WarehouseGrantListRelationFilter, {
    nullable: true,
  })
  warehouseGrants?: WarehouseGrantListRelationFilter;
}

export { UserModelWhereInput as UserModelWhereInput };
