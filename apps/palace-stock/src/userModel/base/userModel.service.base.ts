/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserModel as PrismaUserModel,
  BranchManager as PrismaBranchManager,
  BranchOffice as PrismaBranchOffice,
  Collaborator as PrismaCollaborator,
  ConektaPaymentTransac as PrismaConektaPaymentTransac,
  Customer as PrismaCustomer,
  LoanedDevice as PrismaLoanedDevice,
  ModifiedPermission as PrismaModifiedPermission,
  NubariumValidation as PrismaNubariumValidation,
  PersonalLoan as PrismaPersonalLoan,
  ProtectionCert as PrismaProtectionCert,
  Purchase as PrismaPurchase,
  UserPermission as PrismaUserPermission,
  UserQualityHistory as PrismaUserQualityHistory,
  Vendor as PrismaVendor,
  WarehouseGrant as PrismaWarehouseGrant,
  AccessLevel as PrismaAccessLevel,
} from "@prisma/client";

export class UserModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userModel.count(args);
  }

  async userModels<T extends Prisma.UserModelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserModelFindManyArgs>
  ): Promise<PrismaUserModel[]> {
    return this.prisma.userModel.findMany<Prisma.UserModelFindManyArgs>(args);
  }
  async userModel<T extends Prisma.UserModelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserModelFindUniqueArgs>
  ): Promise<PrismaUserModel | null> {
    return this.prisma.userModel.findUnique(args);
  }
  async createUserModel<T extends Prisma.UserModelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserModelCreateArgs>
  ): Promise<PrismaUserModel> {
    return this.prisma.userModel.create<T>(args);
  }
  async updateUserModel<T extends Prisma.UserModelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserModelUpdateArgs>
  ): Promise<PrismaUserModel> {
    return this.prisma.userModel.update<T>(args);
  }
  async deleteUserModel<T extends Prisma.UserModelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserModelDeleteArgs>
  ): Promise<PrismaUserModel> {
    return this.prisma.userModel.delete(args);
  }

  async findBranchManagers(
    parentId: number,
    args: Prisma.BranchManagerFindManyArgs
  ): Promise<PrismaBranchManager[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .branchManagers(args);
  }

  async findBranchOffices(
    parentId: number,
    args: Prisma.BranchOfficeFindManyArgs
  ): Promise<PrismaBranchOffice[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .branchOffices(args);
  }

  async findCollaboratorsCollaboratorsCreatedUserIdTousers(
    parentId: number,
    args: Prisma.CollaboratorFindManyArgs
  ): Promise<PrismaCollaborator[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .collaboratorsCollaboratorsCreatedUserIdTousers(args);
  }

  async findConektaPaymentTransacs(
    parentId: number,
    args: Prisma.ConektaPaymentTransacFindManyArgs
  ): Promise<PrismaConektaPaymentTransac[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .conektaPaymentTransacs(args);
  }

  async findCustomersCustomersCreatedUserIdTousers(
    parentId: number,
    args: Prisma.CustomerFindManyArgs
  ): Promise<PrismaCustomer[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customersCustomersCreatedUserIdTousers(args);
  }

  async findCustomersCustomersUpdatedUserIdTousers(
    parentId: number,
    args: Prisma.CustomerFindManyArgs
  ): Promise<PrismaCustomer[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customersCustomersUpdatedUserIdTousers(args);
  }

  async findLoanedDevicesLoanedDevicesCreatedUserIdTousers(
    parentId: number,
    args: Prisma.LoanedDeviceFindManyArgs
  ): Promise<PrismaLoanedDevice[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .loanedDevicesLoanedDevicesCreatedUserIdTousers(args);
  }

  async findLoanedDevicesLoanedDevicesReturnedUserIdTousers(
    parentId: number,
    args: Prisma.LoanedDeviceFindManyArgs
  ): Promise<PrismaLoanedDevice[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .loanedDevicesLoanedDevicesReturnedUserIdTousers(args);
  }

  async findModifiedPermissions(
    parentId: number,
    args: Prisma.ModifiedPermissionFindManyArgs
  ): Promise<PrismaModifiedPermission[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .modifiedPermissions(args);
  }

  async findNubariumValidations(
    parentId: number,
    args: Prisma.NubariumValidationFindManyArgs
  ): Promise<PrismaNubariumValidation[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .nubariumValidations(args);
  }

  async findPersonalLoans(
    parentId: number,
    args: Prisma.PersonalLoanFindManyArgs
  ): Promise<PrismaPersonalLoan[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .personalLoans(args);
  }

  async findProtectionCerts(
    parentId: number,
    args: Prisma.ProtectionCertFindManyArgs
  ): Promise<PrismaProtectionCert[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .protectionCerts(args);
  }

  async findPurchasesPurchasesCreatedUserIdTousers(
    parentId: number,
    args: Prisma.PurchaseFindManyArgs
  ): Promise<PrismaPurchase[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchasesPurchasesCreatedUserIdTousers(args);
  }

  async findPurchasesPurchasesUpdatedUserIdTousers(
    parentId: number,
    args: Prisma.PurchaseFindManyArgs
  ): Promise<PrismaPurchase[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchasesPurchasesUpdatedUserIdTousers(args);
  }

  async findUserPermissions(
    parentId: number,
    args: Prisma.UserPermissionFindManyArgs
  ): Promise<PrismaUserPermission[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userPermissions(args);
  }

  async findUserQualityHistories(
    parentId: number,
    args: Prisma.UserQualityHistoryFindManyArgs
  ): Promise<PrismaUserQualityHistory[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userQualityHistories(args);
  }

  async findVendorsVendorsCreatedUserIdTousers(
    parentId: number,
    args: Prisma.VendorFindManyArgs
  ): Promise<PrismaVendor[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .vendorsVendorsCreatedUserIdTousers(args);
  }

  async findVendorsVendorsUpdatedUserIdTousers(
    parentId: number,
    args: Prisma.VendorFindManyArgs
  ): Promise<PrismaVendor[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .vendorsVendorsUpdatedUserIdTousers(args);
  }

  async findWarehouseGrants(
    parentId: number,
    args: Prisma.WarehouseGrantFindManyArgs
  ): Promise<PrismaWarehouseGrant[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .warehouseGrants(args);
  }

  async getAccessLevels(parentId: number): Promise<PrismaAccessLevel | null> {
    return this.prisma.userModel
      .findUnique({
        where: { id: parentId },
      })
      .accessLevels();
  }

  async getCollaboratorsUsersCollaboratorIdTocollaborators(
    parentId: number
  ): Promise<PrismaCollaborator | null> {
    return this.prisma.userModel
      .findUnique({
        where: { id: parentId },
      })
      .collaboratorsUsersCollaboratorIdTocollaborators();
  }
}
