/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BranchOfficeWhereUniqueInput } from "../../branchOffice/base/BranchOfficeWhereUniqueInput";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { EnumTransactionEstatusTrans } from "./EnumTransactionEstatusTrans";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { FinancedAccessoryListRelationFilter } from "../../financedAccessory/base/FinancedAccessoryListRelationFilter";
import { IntFilter } from "../../util/IntFilter";
import { KardexListRelationFilter } from "../../kardex/base/KardexListRelationFilter";
import { KardexSeryListRelationFilter } from "../../kardexSery/base/KardexSeryListRelationFilter";
import { EnumTransactionMoveType } from "./EnumTransactionMoveType";
import { TransitTransferListRelationFilter } from "../../transitTransfer/base/TransitTransferListRelationFilter";
import { WarehouseWhereUniqueInput } from "../../warehouse/base/WarehouseWhereUniqueInput";

@InputType()
class TransactionWhereInput {
  @ApiProperty({
    required: false,
    type: () => BranchOfficeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BranchOfficeWhereUniqueInput)
  @IsOptional()
  @Field(() => BranchOfficeWhereUniqueInput, {
    nullable: true,
  })
  branchOfficesTransactionsAnotherBranchOfficeIdTobranchOffices?: BranchOfficeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => BranchOfficeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BranchOfficeWhereUniqueInput)
  @IsOptional()
  @Field(() => BranchOfficeWhereUniqueInput, {
    nullable: true,
  })
  branchOfficesTransactionsBranchOfficeIdTobranchOffices?: BranchOfficeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  comentariosTrans?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  createdUserId?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => CustomerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CustomerWhereUniqueInput)
  @IsOptional()
  @Field(() => CustomerWhereUniqueInput, {
    nullable: true,
  })
  customers?: CustomerWhereUniqueInput;

  @ApiProperty({
    required: false,
    enum: EnumTransactionEstatusTrans,
  })
  @IsEnum(EnumTransactionEstatusTrans)
  @IsOptional()
  @Field(() => EnumTransactionEstatusTrans, {
    nullable: true,
  })
  estatus_trans?: "A" | "I";

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  fechaTrans?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: () => FinancedAccessoryListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FinancedAccessoryListRelationFilter)
  @IsOptional()
  @Field(() => FinancedAccessoryListRelationFilter, {
    nullable: true,
  })
  financedAccessories?: FinancedAccessoryListRelationFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  folioDocto?: IntFilter;

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  horaTrans?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  id?: IntFilter;

  @ApiProperty({
    required: false,
    type: () => KardexListRelationFilter,
  })
  @ValidateNested()
  @Type(() => KardexListRelationFilter)
  @IsOptional()
  @Field(() => KardexListRelationFilter, {
    nullable: true,
  })
  kardex?: KardexListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => KardexSeryListRelationFilter,
  })
  @ValidateNested()
  @Type(() => KardexSeryListRelationFilter)
  @IsOptional()
  @Field(() => KardexSeryListRelationFilter, {
    nullable: true,
  })
  kardexSeries?: KardexSeryListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumTransactionMoveType,
  })
  @IsEnum(EnumTransactionMoveType)
  @IsOptional()
  @Field(() => EnumTransactionMoveType, {
    nullable: true,
  })
  move_type?:
    | "IG"
    | "TE"
    | "TR"
    | "EG"
    | "BA"
    | "DE"
    | "PR"
    | "AP"
    | "DP"
    | "EGA"
    | "DA";

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  numProveedor?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  transacFolio?: IntFilter;

  @ApiProperty({
    required: false,
    type: () => TransitTransferListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TransitTransferListRelationFilter)
  @IsOptional()
  @Field(() => TransitTransferListRelationFilter, {
    nullable: true,
  })
  transitTransfers?: TransitTransferListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => WarehouseWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => WarehouseWhereUniqueInput)
  @IsOptional()
  @Field(() => WarehouseWhereUniqueInput, {
    nullable: true,
  })
  warehouses?: WarehouseWhereUniqueInput;
}

export { TransactionWhereInput as TransactionWhereInput };
