/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Transaction as PrismaTransaction,
  FinancedAccessory as PrismaFinancedAccessory,
  Kardex as PrismaKardex,
  KardexSery as PrismaKardexSery,
  TransitTransfer as PrismaTransitTransfer,
  BranchOffice as PrismaBranchOffice,
  Customer as PrismaCustomer,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class TransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transaction.count(args);
  }

  async transactions<T extends Prisma.TransactionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransactionFindManyArgs>
  ): Promise<PrismaTransaction[]> {
    return this.prisma.transaction.findMany<Prisma.TransactionFindManyArgs>(
      args
    );
  }
  async transaction<T extends Prisma.TransactionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransactionFindUniqueArgs>
  ): Promise<PrismaTransaction | null> {
    return this.prisma.transaction.findUnique(args);
  }
  async createTransaction<T extends Prisma.TransactionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransactionCreateArgs>
  ): Promise<PrismaTransaction> {
    return this.prisma.transaction.create<T>(args);
  }
  async updateTransaction<T extends Prisma.TransactionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransactionUpdateArgs>
  ): Promise<PrismaTransaction> {
    return this.prisma.transaction.update<T>(args);
  }
  async deleteTransaction<T extends Prisma.TransactionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransactionDeleteArgs>
  ): Promise<PrismaTransaction> {
    return this.prisma.transaction.delete(args);
  }

  async findFinancedAccessories(
    parentId: number,
    args: Prisma.FinancedAccessoryFindManyArgs
  ): Promise<PrismaFinancedAccessory[]> {
    return this.prisma.transaction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .financedAccessories(args);
  }

  async findKardex(
    parentId: number,
    args: Prisma.KardexFindManyArgs
  ): Promise<PrismaKardex[]> {
    return this.prisma.transaction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .kardex(args);
  }

  async findKardexSeries(
    parentId: number,
    args: Prisma.KardexSeryFindManyArgs
  ): Promise<PrismaKardexSery[]> {
    return this.prisma.transaction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .kardexSeries(args);
  }

  async findTransitTransfers(
    parentId: number,
    args: Prisma.TransitTransferFindManyArgs
  ): Promise<PrismaTransitTransfer[]> {
    return this.prisma.transaction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transitTransfers(args);
  }

  async getBranchOfficesTransactionsAnotherBranchOfficeIdTobranchOffices(
    parentId: number
  ): Promise<PrismaBranchOffice | null> {
    return this.prisma.transaction
      .findUnique({
        where: { id: parentId },
      })
      .branchOfficesTransactionsAnotherBranchOfficeIdTobranchOffices();
  }

  async getBranchOfficesTransactionsBranchOfficeIdTobranchOffices(
    parentId: number
  ): Promise<PrismaBranchOffice | null> {
    return this.prisma.transaction
      .findUnique({
        where: { id: parentId },
      })
      .branchOfficesTransactionsBranchOfficeIdTobranchOffices();
  }

  async getCustomers(parentId: number): Promise<PrismaCustomer | null> {
    return this.prisma.transaction
      .findUnique({
        where: { id: parentId },
      })
      .customers();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.transaction
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
