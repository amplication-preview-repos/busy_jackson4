/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BranchOffice } from "../../branchOffice/base/BranchOffice";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsInt,
  IsEnum,
  IsDate,
} from "class-validator";
import { Type } from "class-transformer";
import { Customer } from "../../customer/base/Customer";
import { EnumTransactionEstatusTrans } from "./EnumTransactionEstatusTrans";
import { FinancedAccessory } from "../../financedAccessory/base/FinancedAccessory";
import { Kardex } from "../../kardex/base/Kardex";
import { KardexSery } from "../../kardexSery/base/KardexSery";
import { EnumTransactionMoveType } from "./EnumTransactionMoveType";
import { TransitTransfer } from "../../transitTransfer/base/TransitTransfer";
import { Warehouse } from "../../warehouse/base/Warehouse";

@ObjectType()
class Transaction {
  @ApiProperty({
    required: false,
    type: () => BranchOffice,
  })
  @ValidateNested()
  @Type(() => BranchOffice)
  @IsOptional()
  branchOfficesTransactionsAnotherBranchOfficeIdTobranchOffices?: BranchOffice | null;

  @ApiProperty({
    required: true,
    type: () => BranchOffice,
  })
  @ValidateNested()
  @Type(() => BranchOffice)
  branchOfficesTransactionsBranchOfficeIdTobranchOffices?: BranchOffice;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comentariosTrans!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  createdUserId!: number | null;

  @ApiProperty({
    required: false,
    type: () => Customer,
  })
  @ValidateNested()
  @Type(() => Customer)
  @IsOptional()
  customers?: Customer | null;

  @ApiProperty({
    required: true,
    enum: EnumTransactionEstatusTrans,
  })
  @IsEnum(EnumTransactionEstatusTrans)
  @Field(() => EnumTransactionEstatusTrans, {
    nullable: true,
  })
  estatus_trans?: "A" | "I";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  fechaTrans!: Date;

  @ApiProperty({
    required: false,
    type: () => [FinancedAccessory],
  })
  @ValidateNested()
  @Type(() => FinancedAccessory)
  @IsOptional()
  financedAccessories?: Array<FinancedAccessory>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  folioDocto!: number;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  horaTrans!: Date;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: false,
    type: () => [Kardex],
  })
  @ValidateNested()
  @Type(() => Kardex)
  @IsOptional()
  kardex?: Array<Kardex>;

  @ApiProperty({
    required: false,
    type: () => [KardexSery],
  })
  @ValidateNested()
  @Type(() => KardexSery)
  @IsOptional()
  kardexSeries?: Array<KardexSery>;

  @ApiProperty({
    required: true,
    enum: EnumTransactionMoveType,
  })
  @IsEnum(EnumTransactionMoveType)
  @Field(() => EnumTransactionMoveType, {
    nullable: true,
  })
  move_type?:
    | "IG"
    | "TE"
    | "TR"
    | "EG"
    | "BA"
    | "DE"
    | "PR"
    | "AP"
    | "DP"
    | "EGA"
    | "DA";

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  numProveedor!: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  transacFolio!: number;

  @ApiProperty({
    required: false,
    type: () => [TransitTransfer],
  })
  @ValidateNested()
  @Type(() => TransitTransfer)
  @IsOptional()
  transitTransfers?: Array<TransitTransfer>;

  @ApiProperty({
    required: false,
    type: () => Warehouse,
  })
  @ValidateNested()
  @Type(() => Warehouse)
  @IsOptional()
  warehouses?: Warehouse | null;
}

export { Transaction as Transaction };
