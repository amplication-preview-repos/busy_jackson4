/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BranchOfficeWhereUniqueInput } from "../../branchOffice/base/BranchOfficeWhereUniqueInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsInt,
  IsEnum,
  IsDate,
} from "class-validator";
import { Type } from "class-transformer";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { EnumTransactionEstatusTrans } from "./EnumTransactionEstatusTrans";
import { FinancedAccessoryCreateNestedManyWithoutTransactionsInput } from "./FinancedAccessoryCreateNestedManyWithoutTransactionsInput";
import { KardexCreateNestedManyWithoutTransactionsInput } from "./KardexCreateNestedManyWithoutTransactionsInput";
import { KardexSeryCreateNestedManyWithoutTransactionsInput } from "./KardexSeryCreateNestedManyWithoutTransactionsInput";
import { EnumTransactionMoveType } from "./EnumTransactionMoveType";
import { TransitTransferCreateNestedManyWithoutTransactionsInput } from "./TransitTransferCreateNestedManyWithoutTransactionsInput";
import { WarehouseWhereUniqueInput } from "../../warehouse/base/WarehouseWhereUniqueInput";

@InputType()
class TransactionCreateInput {
  @ApiProperty({
    required: false,
    type: () => BranchOfficeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BranchOfficeWhereUniqueInput)
  @IsOptional()
  @Field(() => BranchOfficeWhereUniqueInput, {
    nullable: true,
  })
  branchOfficesTransactionsAnotherBranchOfficeIdTobranchOffices?: BranchOfficeWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: () => BranchOfficeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BranchOfficeWhereUniqueInput)
  @Field(() => BranchOfficeWhereUniqueInput)
  branchOfficesTransactionsBranchOfficeIdTobranchOffices!: BranchOfficeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comentariosTrans?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  createdUserId?: number | null;

  @ApiProperty({
    required: false,
    type: () => CustomerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CustomerWhereUniqueInput)
  @IsOptional()
  @Field(() => CustomerWhereUniqueInput, {
    nullable: true,
  })
  customers?: CustomerWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    enum: EnumTransactionEstatusTrans,
  })
  @IsEnum(EnumTransactionEstatusTrans)
  @Field(() => EnumTransactionEstatusTrans)
  estatus_trans!: "A" | "I";

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  fechaTrans!: Date;

  @ApiProperty({
    required: false,
    type: () => FinancedAccessoryCreateNestedManyWithoutTransactionsInput,
  })
  @ValidateNested()
  @Type(() => FinancedAccessoryCreateNestedManyWithoutTransactionsInput)
  @IsOptional()
  @Field(() => FinancedAccessoryCreateNestedManyWithoutTransactionsInput, {
    nullable: true,
  })
  financedAccessories?: FinancedAccessoryCreateNestedManyWithoutTransactionsInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  folioDocto!: number;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  horaTrans!: Date;

  @ApiProperty({
    required: false,
    type: () => KardexCreateNestedManyWithoutTransactionsInput,
  })
  @ValidateNested()
  @Type(() => KardexCreateNestedManyWithoutTransactionsInput)
  @IsOptional()
  @Field(() => KardexCreateNestedManyWithoutTransactionsInput, {
    nullable: true,
  })
  kardex?: KardexCreateNestedManyWithoutTransactionsInput;

  @ApiProperty({
    required: false,
    type: () => KardexSeryCreateNestedManyWithoutTransactionsInput,
  })
  @ValidateNested()
  @Type(() => KardexSeryCreateNestedManyWithoutTransactionsInput)
  @IsOptional()
  @Field(() => KardexSeryCreateNestedManyWithoutTransactionsInput, {
    nullable: true,
  })
  kardexSeries?: KardexSeryCreateNestedManyWithoutTransactionsInput;

  @ApiProperty({
    required: true,
    enum: EnumTransactionMoveType,
  })
  @IsEnum(EnumTransactionMoveType)
  @Field(() => EnumTransactionMoveType)
  move_type!:
    | "IG"
    | "TE"
    | "TR"
    | "EG"
    | "BA"
    | "DE"
    | "PR"
    | "AP"
    | "DP"
    | "EGA"
    | "DA";

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  numProveedor?: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  transacFolio!: number;

  @ApiProperty({
    required: false,
    type: () => TransitTransferCreateNestedManyWithoutTransactionsInput,
  })
  @ValidateNested()
  @Type(() => TransitTransferCreateNestedManyWithoutTransactionsInput)
  @IsOptional()
  @Field(() => TransitTransferCreateNestedManyWithoutTransactionsInput, {
    nullable: true,
  })
  transitTransfers?: TransitTransferCreateNestedManyWithoutTransactionsInput;

  @ApiProperty({
    required: false,
    type: () => WarehouseWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => WarehouseWhereUniqueInput)
  @IsOptional()
  @Field(() => WarehouseWhereUniqueInput, {
    nullable: true,
  })
  warehouses?: WarehouseWhereUniqueInput | null;
}

export { TransactionCreateInput as TransactionCreateInput };
