/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  IsOptional,
  IsNumber,
  IsInt,
  ValidateNested,
  IsEnum,
  IsBoolean,
  IsDate,
} from "class-validator";

import { Decimal } from "decimal.js";
import { BranchManager } from "../../branchManager/base/BranchManager";
import { Type } from "class-transformer";
import { BranchOffice } from "../../branchOffice/base/BranchOffice";
import { EnumWarehouseCargarSoloCapturasCamara } from "./EnumWarehouseCargarSoloCapturasCamara";
import { CashCount } from "../../cashCount/base/CashCount";
import { CashSale } from "../../cashSale/base/CashSale";
import { ConektaPaymentTransac } from "../../conektaPaymentTransac/base/ConektaPaymentTransac";
import { Customer } from "../../customer/base/Customer";
import { EnumWarehouseDeshabilitarValidarOtroFinanc } from "./EnumWarehouseDeshabilitarValidarOtroFinanc";
import { EnumWarehouseEstatusAlmacen } from "./EnumWarehouseEstatusAlmacen";
import { Estimate } from "../../estimate/base/Estimate";
import { FinancedSale } from "../../financedSale/base/FinancedSale";
import { EnumWarehouseHabilitarEnvioSms } from "./EnumWarehouseHabilitarEnvioSms";
import { EnumWarehouseHabilitarEnvioWhatsapp } from "./EnumWarehouseHabilitarEnvioWhatsapp";
import { EnumWarehouseImpresionComprobantesPago } from "./EnumWarehouseImpresionComprobantesPago";
import { Kardex } from "../../kardex/base/Kardex";
import { KardexSery } from "../../kardexSery/base/KardexSery";
import { EnumWarehouseMesaControl } from "./EnumWarehouseMesaControl";
import { EnumWarehouseMetodoEnvioMensaje } from "./EnumWarehouseMetodoEnvioMensaje";
import { NubariumValidation } from "../../nubariumValidation/base/NubariumValidation";
import { OtherCompaniesPayment } from "../../otherCompaniesPayment/base/OtherCompaniesPayment";
import { PaymentInterest } from "../../paymentInterest/base/PaymentInterest";
import { Payment } from "../../payment/base/Payment";
import { PersonalLoan } from "../../personalLoan/base/PersonalLoan";
import { ProtectionCertActivation } from "../../protectionCertActivation/base/ProtectionCertActivation";
import { ProtectionCert } from "../../protectionCert/base/ProtectionCert";
import { Stock } from "../../stock/base/Stock";
import { StockSery } from "../../stockSery/base/StockSery";
import { EnumWarehouseTipoSucursal } from "./EnumWarehouseTipoSucursal";
import { Transaction } from "../../transaction/base/Transaction";
import { WarehouseGrant } from "../../warehouseGrant/base/WarehouseGrant";
import { WarehouseLoanAmount } from "../../warehouseLoanAmount/base/WarehouseLoanAmount";
import { WarehouseMandatoryDoc } from "../../warehouseMandatoryDoc/base/WarehouseMandatoryDoc";

@ObjectType()
class Warehouse {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ajusteDesctoFinanc!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  ajusteMontoFijoEnganche!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  autorizarIneErroneaNubarium!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  autorizarNombresSinCoincidencia!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  autorizarSelfieSinCoincidencia!: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  bloqueoVentaComputadora!: number;

  @ApiProperty({
    required: false,
    type: () => [BranchManager],
  })
  @ValidateNested()
  @Type(() => BranchManager)
  @IsOptional()
  branchManagers?: Array<BranchManager>;

  @ApiProperty({
    required: true,
    type: () => BranchOffice,
  })
  @ValidateNested()
  @Type(() => BranchOffice)
  branchOffices?: BranchOffice;

  @ApiProperty({
    required: true,
    enum: EnumWarehouseCargarSoloCapturasCamara,
  })
  @IsEnum(EnumWarehouseCargarSoloCapturasCamara)
  @Field(() => EnumWarehouseCargarSoloCapturasCamara, {
    nullable: true,
  })
  cargar_solo_capturas_camara?: "A" | "I";

  @ApiProperty({
    required: false,
    type: () => [CashCount],
  })
  @ValidateNested()
  @Type(() => CashCount)
  @IsOptional()
  cashCounts?: Array<CashCount>;

  @ApiProperty({
    required: false,
    type: () => [CashSale],
  })
  @ValidateNested()
  @Type(() => CashSale)
  @IsOptional()
  cashSales?: Array<CashSale>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  catalogoCodigoPostal!: string | null;

  @ApiProperty({
    required: false,
    type: () => [ConektaPaymentTransac],
  })
  @ValidateNested()
  @Type(() => ConektaPaymentTransac)
  @IsOptional()
  conektaPaymentTransacs?: Array<ConektaPaymentTransac>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  confSaltarValidacionesPrestamosPersonales!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  contratoAlmacen!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  contratoAlmacenPdf!: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  createdUserId!: number;

  @ApiProperty({
    required: false,
    type: () => [Customer],
  })
  @ValidateNested()
  @Type(() => Customer)
  @IsOptional()
  customers?: Array<Customer>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  desctoPagoOportuno!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  desctoPagoOportunoPrestamos!: number;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  descuentoEspecial!: number | null;

  @ApiProperty({
    required: false,
    enum: EnumWarehouseDeshabilitarValidarOtroFinanc,
  })
  @IsEnum(EnumWarehouseDeshabilitarValidarOtroFinanc)
  @IsOptional()
  @Field(() => EnumWarehouseDeshabilitarValidarOtroFinanc, {
    nullable: true,
  })
  deshabilitar_validar_otro_financ?: "A" | "I" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  domicilioFiscal!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  dontLockDevices!: boolean | null;

  @ApiProperty({
    required: true,
    enum: EnumWarehouseEstatusAlmacen,
  })
  @IsEnum(EnumWarehouseEstatusAlmacen)
  @Field(() => EnumWarehouseEstatusAlmacen, {
    nullable: true,
  })
  estatus_almacen?: "A" | "I";

  @ApiProperty({
    required: false,
    type: () => [Estimate],
  })
  @ValidateNested()
  @Type(() => Estimate)
  @IsOptional()
  estimates?: Array<Estimate>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  fechaRegistro!: Date;

  @ApiProperty({
    required: false,
    type: () => [FinancedSale],
  })
  @ValidateNested()
  @Type(() => FinancedSale)
  @IsOptional()
  financedSales?: Array<FinancedSale>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  forceAdvancePayments!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  habilitarBloqueoClienteCp!: number | null;

  @ApiProperty({
    required: false,
    enum: EnumWarehouseHabilitarEnvioSms,
  })
  @IsEnum(EnumWarehouseHabilitarEnvioSms)
  @IsOptional()
  @Field(() => EnumWarehouseHabilitarEnvioSms, {
    nullable: true,
  })
  habilitar_envio_sms?: "A" | "I" | null;

  @ApiProperty({
    required: false,
    enum: EnumWarehouseHabilitarEnvioWhatsapp,
  })
  @IsEnum(EnumWarehouseHabilitarEnvioWhatsapp)
  @IsOptional()
  @Field(() => EnumWarehouseHabilitarEnvioWhatsapp, {
    nullable: true,
  })
  habilitar_envio_whatsapp?: "A" | "I" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  habilitarPrestamoEquipos!: number | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  horaInicioPagos!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  horaLimitePagos!: Date | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: false,
    enum: EnumWarehouseImpresionComprobantesPago,
  })
  @IsEnum(EnumWarehouseImpresionComprobantesPago)
  @IsOptional()
  @Field(() => EnumWarehouseImpresionComprobantesPago, {
    nullable: true,
  })
  impresion_comprobantes_pago?: "IC" | "IT" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  incluirEngancheCorte!: number | null;

  @ApiProperty({
    required: false,
    type: () => [Kardex],
  })
  @ValidateNested()
  @Type(() => Kardex)
  @IsOptional()
  kardex?: Array<Kardex>;

  @ApiProperty({
    required: false,
    type: () => [KardexSery],
  })
  @ValidateNested()
  @Type(() => KardexSery)
  @IsOptional()
  kardexSeries?: Array<KardexSery>;

  @ApiProperty({
    required: true,
    enum: EnumWarehouseMesaControl,
  })
  @IsEnum(EnumWarehouseMesaControl)
  @Field(() => EnumWarehouseMesaControl, {
    nullable: true,
  })
  mesa_control?: "A" | "I";

  @ApiProperty({
    required: true,
    enum: EnumWarehouseMetodoEnvioMensaje,
  })
  @IsEnum(EnumWarehouseMetodoEnvioMensaje)
  @Field(() => EnumWarehouseMetodoEnvioMensaje, {
    nullable: true,
  })
  metodo_envio_mensaje?: "SMS" | "WHATSAPP";

  @ApiProperty({
    required: false,
    type: () => [NubariumValidation],
  })
  @ValidateNested()
  @Type(() => NubariumValidation)
  @IsOptional()
  nubariumValidations?: Array<NubariumValidation>;

  @ApiProperty({
    required: false,
    type: () => [OtherCompaniesPayment],
  })
  @ValidateNested()
  @Type(() => OtherCompaniesPayment)
  @IsOptional()
  otherCompaniesPayments?: Array<OtherCompaniesPayment>;

  @ApiProperty({
    required: false,
    type: () => [PaymentInterest],
  })
  @ValidateNested()
  @Type(() => PaymentInterest)
  @IsOptional()
  paymentInterests?: Array<PaymentInterest>;

  @ApiProperty({
    required: false,
    type: () => [Payment],
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payments?: Array<Payment>;

  @ApiProperty({
    required: false,
    type: () => [PersonalLoan],
  })
  @ValidateNested()
  @Type(() => PersonalLoan)
  @IsOptional()
  personalLoans?: Array<PersonalLoan>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  promocionTemporal!: string | null;

  @ApiProperty({
    required: false,
    type: () => [ProtectionCertActivation],
  })
  @ValidateNested()
  @Type(() => ProtectionCertActivation)
  @IsOptional()
  protectionCertActivations?: Array<ProtectionCertActivation>;

  @ApiProperty({
    required: false,
    type: () => [ProtectionCert],
  })
  @ValidateNested()
  @Type(() => ProtectionCert)
  @IsOptional()
  protectionCerts?: Array<ProtectionCert>;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  referenciaPago!: boolean;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  sendSmsUnlinkDevicesNuovo!: number | null;

  @ApiProperty({
    required: false,
    type: () => [Stock],
  })
  @ValidateNested()
  @Type(() => Stock)
  @IsOptional()
  stock?: Array<Stock>;

  @ApiProperty({
    required: false,
    type: () => [StockSery],
  })
  @ValidateNested()
  @Type(() => StockSery)
  @IsOptional()
  stockSeries?: Array<StockSery>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  telefonoValidacion!: string | null;

  @ApiProperty({
    required: true,
    enum: EnumWarehouseTipoSucursal,
  })
  @IsEnum(EnumWarehouseTipoSucursal)
  @Field(() => EnumWarehouseTipoSucursal, {
    nullable: true,
  })
  tipo_sucursal?: "S" | "D";

  @ApiProperty({
    required: false,
    type: () => [Transaction],
  })
  @ValidateNested()
  @Type(() => Transaction)
  @IsOptional()
  transactions?: Array<Transaction>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ubicacion!: string | null;

  @ApiProperty({
    required: false,
    type: () => [WarehouseGrant],
  })
  @ValidateNested()
  @Type(() => WarehouseGrant)
  @IsOptional()
  warehouseGrants?: Array<WarehouseGrant>;

  @ApiProperty({
    required: false,
    type: () => [WarehouseLoanAmount],
  })
  @ValidateNested()
  @Type(() => WarehouseLoanAmount)
  @IsOptional()
  warehouseLoanAmounts?: Array<WarehouseLoanAmount>;

  @ApiProperty({
    required: false,
    type: () => [WarehouseMandatoryDoc],
  })
  @ValidateNested()
  @Type(() => WarehouseMandatoryDoc)
  @IsOptional()
  warehouseMandatoryDocs?: Array<WarehouseMandatoryDoc>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  whouseName!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  whouseNo!: number;
}

export { Warehouse as Warehouse };
