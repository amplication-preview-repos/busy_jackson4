/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { WarehouseService } from "../warehouse.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WarehouseCreateInput } from "./WarehouseCreateInput";
import { Warehouse } from "./Warehouse";
import { WarehouseFindManyArgs } from "./WarehouseFindManyArgs";
import { WarehouseWhereUniqueInput } from "./WarehouseWhereUniqueInput";
import { WarehouseUpdateInput } from "./WarehouseUpdateInput";
import { BranchManagerFindManyArgs } from "../../branchManager/base/BranchManagerFindManyArgs";
import { BranchManager } from "../../branchManager/base/BranchManager";
import { BranchManagerWhereUniqueInput } from "../../branchManager/base/BranchManagerWhereUniqueInput";
import { CashCountFindManyArgs } from "../../cashCount/base/CashCountFindManyArgs";
import { CashCount } from "../../cashCount/base/CashCount";
import { CashCountWhereUniqueInput } from "../../cashCount/base/CashCountWhereUniqueInput";
import { CashSaleFindManyArgs } from "../../cashSale/base/CashSaleFindManyArgs";
import { CashSale } from "../../cashSale/base/CashSale";
import { CashSaleWhereUniqueInput } from "../../cashSale/base/CashSaleWhereUniqueInput";
import { ConektaPaymentTransacFindManyArgs } from "../../conektaPaymentTransac/base/ConektaPaymentTransacFindManyArgs";
import { ConektaPaymentTransac } from "../../conektaPaymentTransac/base/ConektaPaymentTransac";
import { ConektaPaymentTransacWhereUniqueInput } from "../../conektaPaymentTransac/base/ConektaPaymentTransacWhereUniqueInput";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { EstimateFindManyArgs } from "../../estimate/base/EstimateFindManyArgs";
import { Estimate } from "../../estimate/base/Estimate";
import { EstimateWhereUniqueInput } from "../../estimate/base/EstimateWhereUniqueInput";
import { FinancedSaleFindManyArgs } from "../../financedSale/base/FinancedSaleFindManyArgs";
import { FinancedSale } from "../../financedSale/base/FinancedSale";
import { FinancedSaleWhereUniqueInput } from "../../financedSale/base/FinancedSaleWhereUniqueInput";
import { KardexFindManyArgs } from "../../kardex/base/KardexFindManyArgs";
import { Kardex } from "../../kardex/base/Kardex";
import { KardexWhereUniqueInput } from "../../kardex/base/KardexWhereUniqueInput";
import { KardexSeryFindManyArgs } from "../../kardexSery/base/KardexSeryFindManyArgs";
import { KardexSery } from "../../kardexSery/base/KardexSery";
import { KardexSeryWhereUniqueInput } from "../../kardexSery/base/KardexSeryWhereUniqueInput";
import { NubariumValidationFindManyArgs } from "../../nubariumValidation/base/NubariumValidationFindManyArgs";
import { NubariumValidation } from "../../nubariumValidation/base/NubariumValidation";
import { NubariumValidationWhereUniqueInput } from "../../nubariumValidation/base/NubariumValidationWhereUniqueInput";
import { OtherCompaniesPaymentFindManyArgs } from "../../otherCompaniesPayment/base/OtherCompaniesPaymentFindManyArgs";
import { OtherCompaniesPayment } from "../../otherCompaniesPayment/base/OtherCompaniesPayment";
import { OtherCompaniesPaymentWhereUniqueInput } from "../../otherCompaniesPayment/base/OtherCompaniesPaymentWhereUniqueInput";
import { PaymentInterestFindManyArgs } from "../../paymentInterest/base/PaymentInterestFindManyArgs";
import { PaymentInterest } from "../../paymentInterest/base/PaymentInterest";
import { PaymentInterestWhereUniqueInput } from "../../paymentInterest/base/PaymentInterestWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { PersonalLoanFindManyArgs } from "../../personalLoan/base/PersonalLoanFindManyArgs";
import { PersonalLoan } from "../../personalLoan/base/PersonalLoan";
import { PersonalLoanWhereUniqueInput } from "../../personalLoan/base/PersonalLoanWhereUniqueInput";
import { ProtectionCertActivationFindManyArgs } from "../../protectionCertActivation/base/ProtectionCertActivationFindManyArgs";
import { ProtectionCertActivation } from "../../protectionCertActivation/base/ProtectionCertActivation";
import { ProtectionCertActivationWhereUniqueInput } from "../../protectionCertActivation/base/ProtectionCertActivationWhereUniqueInput";
import { ProtectionCertFindManyArgs } from "../../protectionCert/base/ProtectionCertFindManyArgs";
import { ProtectionCert } from "../../protectionCert/base/ProtectionCert";
import { ProtectionCertWhereUniqueInput } from "../../protectionCert/base/ProtectionCertWhereUniqueInput";
import { StockFindManyArgs } from "../../stock/base/StockFindManyArgs";
import { Stock } from "../../stock/base/Stock";
import { StockWhereUniqueInput } from "../../stock/base/StockWhereUniqueInput";
import { StockSeryFindManyArgs } from "../../stockSery/base/StockSeryFindManyArgs";
import { StockSery } from "../../stockSery/base/StockSery";
import { StockSeryWhereUniqueInput } from "../../stockSery/base/StockSeryWhereUniqueInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";
import { WarehouseGrantFindManyArgs } from "../../warehouseGrant/base/WarehouseGrantFindManyArgs";
import { WarehouseGrant } from "../../warehouseGrant/base/WarehouseGrant";
import { WarehouseGrantWhereUniqueInput } from "../../warehouseGrant/base/WarehouseGrantWhereUniqueInput";
import { WarehouseLoanAmountFindManyArgs } from "../../warehouseLoanAmount/base/WarehouseLoanAmountFindManyArgs";
import { WarehouseLoanAmount } from "../../warehouseLoanAmount/base/WarehouseLoanAmount";
import { WarehouseLoanAmountWhereUniqueInput } from "../../warehouseLoanAmount/base/WarehouseLoanAmountWhereUniqueInput";
import { WarehouseMandatoryDocFindManyArgs } from "../../warehouseMandatoryDoc/base/WarehouseMandatoryDocFindManyArgs";
import { WarehouseMandatoryDoc } from "../../warehouseMandatoryDoc/base/WarehouseMandatoryDoc";
import { WarehouseMandatoryDocWhereUniqueInput } from "../../warehouseMandatoryDoc/base/WarehouseMandatoryDocWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class WarehouseControllerBase {
  constructor(
    protected readonly service: WarehouseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Warehouse })
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createWarehouse(
    @common.Body() data: WarehouseCreateInput
  ): Promise<Warehouse> {
    return await this.service.createWarehouse({
      data: {
        ...data,

        branchOffices: {
          connect: data.branchOffices,
        },
      },
      select: {
        ajusteDesctoFinanc: true,
        ajusteMontoFijoEnganche: true,
        autorizarIneErroneaNubarium: true,
        autorizarNombresSinCoincidencia: true,
        autorizarSelfieSinCoincidencia: true,
        bloqueoVentaComputadora: true,

        branchOffices: {
          select: {
            id: true,
          },
        },

        cargar_solo_capturas_camara: true,
        catalogoCodigoPostal: true,
        confSaltarValidacionesPrestamosPersonales: true,
        contratoAlmacen: true,
        contratoAlmacenPdf: true,
        createdUserId: true,
        desctoPagoOportuno: true,
        desctoPagoOportunoPrestamos: true,
        descuentoEspecial: true,
        deshabilitar_validar_otro_financ: true,
        domicilioFiscal: true,
        dontLockDevices: true,
        estatus_almacen: true,
        fechaRegistro: true,
        forceAdvancePayments: true,
        habilitarBloqueoClienteCp: true,
        habilitar_envio_sms: true,
        habilitar_envio_whatsapp: true,
        habilitarPrestamoEquipos: true,
        horaInicioPagos: true,
        horaLimitePagos: true,
        id: true,
        impresion_comprobantes_pago: true,
        incluirEngancheCorte: true,
        mesa_control: true,
        metodo_envio_mensaje: true,
        promocionTemporal: true,
        referenciaPago: true,
        sendSmsUnlinkDevicesNuovo: true,
        telefonoValidacion: true,
        tipo_sucursal: true,
        ubicacion: true,
        whouseName: true,
        whouseNo: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Warehouse] })
  @ApiNestedQuery(WarehouseFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async warehouses(@common.Req() request: Request): Promise<Warehouse[]> {
    const args = plainToClass(WarehouseFindManyArgs, request.query);
    return this.service.warehouses({
      ...args,
      select: {
        ajusteDesctoFinanc: true,
        ajusteMontoFijoEnganche: true,
        autorizarIneErroneaNubarium: true,
        autorizarNombresSinCoincidencia: true,
        autorizarSelfieSinCoincidencia: true,
        bloqueoVentaComputadora: true,

        branchOffices: {
          select: {
            id: true,
          },
        },

        cargar_solo_capturas_camara: true,
        catalogoCodigoPostal: true,
        confSaltarValidacionesPrestamosPersonales: true,
        contratoAlmacen: true,
        contratoAlmacenPdf: true,
        createdUserId: true,
        desctoPagoOportuno: true,
        desctoPagoOportunoPrestamos: true,
        descuentoEspecial: true,
        deshabilitar_validar_otro_financ: true,
        domicilioFiscal: true,
        dontLockDevices: true,
        estatus_almacen: true,
        fechaRegistro: true,
        forceAdvancePayments: true,
        habilitarBloqueoClienteCp: true,
        habilitar_envio_sms: true,
        habilitar_envio_whatsapp: true,
        habilitarPrestamoEquipos: true,
        horaInicioPagos: true,
        horaLimitePagos: true,
        id: true,
        impresion_comprobantes_pago: true,
        incluirEngancheCorte: true,
        mesa_control: true,
        metodo_envio_mensaje: true,
        promocionTemporal: true,
        referenciaPago: true,
        sendSmsUnlinkDevicesNuovo: true,
        telefonoValidacion: true,
        tipo_sucursal: true,
        ubicacion: true,
        whouseName: true,
        whouseNo: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Warehouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async warehouse(
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<Warehouse | null> {
    const result = await this.service.warehouse({
      where: params,
      select: {
        ajusteDesctoFinanc: true,
        ajusteMontoFijoEnganche: true,
        autorizarIneErroneaNubarium: true,
        autorizarNombresSinCoincidencia: true,
        autorizarSelfieSinCoincidencia: true,
        bloqueoVentaComputadora: true,

        branchOffices: {
          select: {
            id: true,
          },
        },

        cargar_solo_capturas_camara: true,
        catalogoCodigoPostal: true,
        confSaltarValidacionesPrestamosPersonales: true,
        contratoAlmacen: true,
        contratoAlmacenPdf: true,
        createdUserId: true,
        desctoPagoOportuno: true,
        desctoPagoOportunoPrestamos: true,
        descuentoEspecial: true,
        deshabilitar_validar_otro_financ: true,
        domicilioFiscal: true,
        dontLockDevices: true,
        estatus_almacen: true,
        fechaRegistro: true,
        forceAdvancePayments: true,
        habilitarBloqueoClienteCp: true,
        habilitar_envio_sms: true,
        habilitar_envio_whatsapp: true,
        habilitarPrestamoEquipos: true,
        horaInicioPagos: true,
        horaLimitePagos: true,
        id: true,
        impresion_comprobantes_pago: true,
        incluirEngancheCorte: true,
        mesa_control: true,
        metodo_envio_mensaje: true,
        promocionTemporal: true,
        referenciaPago: true,
        sendSmsUnlinkDevicesNuovo: true,
        telefonoValidacion: true,
        tipo_sucursal: true,
        ubicacion: true,
        whouseName: true,
        whouseNo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Warehouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateWarehouse(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() data: WarehouseUpdateInput
  ): Promise<Warehouse | null> {
    try {
      return await this.service.updateWarehouse({
        where: params,
        data: {
          ...data,

          branchOffices: {
            connect: data.branchOffices,
          },
        },
        select: {
          ajusteDesctoFinanc: true,
          ajusteMontoFijoEnganche: true,
          autorizarIneErroneaNubarium: true,
          autorizarNombresSinCoincidencia: true,
          autorizarSelfieSinCoincidencia: true,
          bloqueoVentaComputadora: true,

          branchOffices: {
            select: {
              id: true,
            },
          },

          cargar_solo_capturas_camara: true,
          catalogoCodigoPostal: true,
          confSaltarValidacionesPrestamosPersonales: true,
          contratoAlmacen: true,
          contratoAlmacenPdf: true,
          createdUserId: true,
          desctoPagoOportuno: true,
          desctoPagoOportunoPrestamos: true,
          descuentoEspecial: true,
          deshabilitar_validar_otro_financ: true,
          domicilioFiscal: true,
          dontLockDevices: true,
          estatus_almacen: true,
          fechaRegistro: true,
          forceAdvancePayments: true,
          habilitarBloqueoClienteCp: true,
          habilitar_envio_sms: true,
          habilitar_envio_whatsapp: true,
          habilitarPrestamoEquipos: true,
          horaInicioPagos: true,
          horaLimitePagos: true,
          id: true,
          impresion_comprobantes_pago: true,
          incluirEngancheCorte: true,
          mesa_control: true,
          metodo_envio_mensaje: true,
          promocionTemporal: true,
          referenciaPago: true,
          sendSmsUnlinkDevicesNuovo: true,
          telefonoValidacion: true,
          tipo_sucursal: true,
          ubicacion: true,
          whouseName: true,
          whouseNo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Warehouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteWarehouse(
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<Warehouse | null> {
    try {
      return await this.service.deleteWarehouse({
        where: params,
        select: {
          ajusteDesctoFinanc: true,
          ajusteMontoFijoEnganche: true,
          autorizarIneErroneaNubarium: true,
          autorizarNombresSinCoincidencia: true,
          autorizarSelfieSinCoincidencia: true,
          bloqueoVentaComputadora: true,

          branchOffices: {
            select: {
              id: true,
            },
          },

          cargar_solo_capturas_camara: true,
          catalogoCodigoPostal: true,
          confSaltarValidacionesPrestamosPersonales: true,
          contratoAlmacen: true,
          contratoAlmacenPdf: true,
          createdUserId: true,
          desctoPagoOportuno: true,
          desctoPagoOportunoPrestamos: true,
          descuentoEspecial: true,
          deshabilitar_validar_otro_financ: true,
          domicilioFiscal: true,
          dontLockDevices: true,
          estatus_almacen: true,
          fechaRegistro: true,
          forceAdvancePayments: true,
          habilitarBloqueoClienteCp: true,
          habilitar_envio_sms: true,
          habilitar_envio_whatsapp: true,
          habilitarPrestamoEquipos: true,
          horaInicioPagos: true,
          horaLimitePagos: true,
          id: true,
          impresion_comprobantes_pago: true,
          incluirEngancheCorte: true,
          mesa_control: true,
          metodo_envio_mensaje: true,
          promocionTemporal: true,
          referenciaPago: true,
          sendSmsUnlinkDevicesNuovo: true,
          telefonoValidacion: true,
          tipo_sucursal: true,
          ubicacion: true,
          whouseName: true,
          whouseNo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/branchManagers")
  @ApiNestedQuery(BranchManagerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BranchManager",
    action: "read",
    possession: "any",
  })
  async findBranchManagers(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<BranchManager[]> {
    const query = plainToClass(BranchManagerFindManyArgs, request.query);
    const results = await this.service.findBranchManagers(params.id, {
      ...query,
      select: {
        cargo: true,

        collaborators: {
          select: {
            id: true,
          },
        },

        fechaIniciaCargo: true,
        id: true,
        numSucursal: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/branchManagers")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectBranchManagers(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: BranchManagerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchManagers: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/branchManagers")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateBranchManagers(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: BranchManagerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchManagers: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/branchManagers")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectBranchManagers(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: BranchManagerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      branchManagers: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/cashCounts")
  @ApiNestedQuery(CashCountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "read",
    possession: "any",
  })
  async findCashCounts(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<CashCount[]> {
    const query = plainToClass(CashCountFindManyArgs, request.query);
    const results = await this.service.findCashCounts(params.id, {
      ...query,
      select: {
        comentarios: true,
        createdUserId: true,
        estatus_validacion: true,
        fechaRegistro: true,
        fechaValidacion: true,
        fromDate: true,
        id: true,
        toDate: true,
        validUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cashCounts")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectCashCounts(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: CashCountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashCounts: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cashCounts")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateCashCounts(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: CashCountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashCounts: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cashCounts")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectCashCounts(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: CashCountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashCounts: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/cashSales")
  @ApiNestedQuery(CashSaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "read",
    possession: "any",
  })
  async findCashSales(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<CashSale[]> {
    const query = plainToClass(CashSaleFindManyArgs, request.query);
    const results = await this.service.findCashSales(params.id, {
      ...query,
      select: {
        apellido1Cliente: true,
        apellido2Cliente: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        createdUserId: true,
        estatus_venta: true,
        fechaRegistro: true,
        fechaVenta: true,
        id: true,
        metodoPago: true,
        nombreCompletoCliente: true,
        nombresCliente: true,
        totalUnidades: true,
        totalVenta: true,
        ubicacion: true,
        ubicacionLatitud: true,
        ubicacionLongitud: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cashSales")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectCashSales(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: CashSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashSales: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cashSales")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateCashSales(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: CashSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashSales: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cashSales")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectCashSales(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: CashSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashSales: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/conektaPaymentTransacs")
  @ApiNestedQuery(ConektaPaymentTransacFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "read",
    possession: "any",
  })
  async findConektaPaymentTransacs(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<ConektaPaymentTransac[]> {
    const query = plainToClass(
      ConektaPaymentTransacFindManyArgs,
      request.query
    );
    const results = await this.service.findConektaPaymentTransacs(params.id, {
      ...query,
      select: {
        amount: true,
        authCode: true,
        clabe: true,
        createdAt: true,
        datosPago: true,
        expiresAt: true,
        fechaActualizacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        habilitarPagoRecurrente: true,
        id: true,
        issuer: true,
        last4: true,
        metodoPago: true,
        orderId: true,
        payStatus: true,
        reference: true,
        rutaRef: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/conektaPaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectConektaPaymentTransacs(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: ConektaPaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaPaymentTransacs: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/conektaPaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateConektaPaymentTransacs(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: ConektaPaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaPaymentTransacs: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/conektaPaymentTransacs")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectConektaPaymentTransacs(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: ConektaPaymentTransacWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaPaymentTransacs: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customers")
  @ApiNestedQuery(CustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async findCustomers(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<Customer[]> {
    const query = plainToClass(CustomerFindManyArgs, request.query);
    const results = await this.service.findCustomers(params.id, {
      ...query,
      select: {
        antiguedadTrabajo: true,
        apellido1Cliente: true,
        apellido2Cliente: true,
        billingCfdiUseId: true,
        billingFiscalRegimeId: true,
        ciudadActualCte: true,
        ciudadCte: true,
        ciudadRazSoc: true,
        clabePaycode: true,
        claveIdCliente: true,
        coloniaActualCte: true,
        coloniaCte: true,
        coloniaRazSoc: true,
        conekta: true,
        correoCte: true,
        correoRazSoc: true,
        cpActualCte: true,
        cpCte: true,
        cpRazSoc: true,
        cte_requiere_factura: true,
        curpCliente: true,
        direccionActualCte: true,
        direccionCte: true,
        direccionRazSoc: true,
        domicilioTrabajo: true,
        edadCliente: true,
        enganchePromoLealtad: true,
        estadoRepActualCte: true,
        estadoRepCte: true,
        estadoRepRazSoc: true,
        estatus_cliente: true,
        estatusSeguroVida: true,
        fechaActivacionSeguro: true,
        fechaAltaCliente: true,
        fechaRegistro: true,
        fechaUltCambio: true,
        folioSeguroVida: true,
        genero_cliente: true,
        id: true,
        ine_direccion_actual: true,
        lugarTrabajo: true,
        montoDisponibleEnganche: true,
        nombreCompletoCliente: true,
        nombresCliente: true,
        nomRef1Cliente: true,
        nomRef2Cliente: true,
        nubariumScore: true,
        numExtCte: true,
        numExtRazSoc: true,
        numIntCte: true,
        numIntRazSoc: true,
        numTelCte: true,
        numTelFijoCte: true,
        numTelRazSoc: true,
        paisRazSoc: true,
        puestoTrabajo: true,
        qidAngaza: true,
        razonSocialCte: true,
        rfcCte: true,
        rfcPersonalCte: true,
        rutaFirma: true,
        salarioMensualTrabajo: true,
        scoreMaxValue: true,
        secondaryTelephoneNumber: true,
        telRef1Cliente: true,
        telRef2Cliente: true,
        tipoIdCliente: true,

        usersCustomersCreatedUserIdTousers: {
          select: {
            id: true,
          },
        },

        usersCustomersUpdatedUserIdTousers: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectCustomers(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateCustomers(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectCustomers(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/estimates")
  @ApiNestedQuery(EstimateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Estimate",
    action: "read",
    possession: "any",
  })
  async findEstimates(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<Estimate[]> {
    const query = plainToClass(EstimateFindManyArgs, request.query);
    const results = await this.service.findEstimates(params.id, {
      ...query,
      select: {
        aspira_otro_producto: true,
        autoriza_contacto: true,
        createdUserId: true,
        desctoPagoOportuno: true,
        enganche: true,
        fechaCotiz: true,
        id: true,
        interesAnual: true,
        interesSemanalMultiplo: true,

        items: {
          select: {
            id: true,
          },
        },

        montoPago: true,
        motivoRechazo: true,
        nombreCompletoCliente: true,
        numPagos: true,
        observacionesCotizacion: true,
        pagoSemanalIdeal: true,
        plazo: true,
        precioLista: true,
        productoInteres: true,
        rechazo_financ: true,
        telefonoCliente: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/estimates")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectEstimates(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: EstimateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estimates: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/estimates")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateEstimates(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: EstimateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estimates: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/estimates")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectEstimates(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: EstimateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estimates: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/financedSales")
  @ApiNestedQuery(FinancedSaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "read",
    possession: "any",
  })
  async findFinancedSales(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<FinancedSale[]> {
    const query = plainToClass(FinancedSaleFindManyArgs, request.query);
    const results = await this.service.findFinancedSales(params.id, {
      ...query,
      select: {
        adminAppUnregistered: true,
        ajusteEnganche: true,
        ajustePrecioVenta: true,
        altaPagoRecurrente: true,
        authUserId: true,
        bloqueo_confirmado: true,
        bloqueo_permanente: true,
        bloqueoProgramado: true,
        canceledUserId: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        codigoArtIccid: true,
        codigoBloqueo: true,
        comentarios: true,
        comentariosDescuento: true,
        createdUserId: true,
        customerPagoRecurrente: true,

        customers: {
          select: {
            id: true,
          },
        },

        desctoPagoOportuno: true,
        descuentoEspecial: true,
        enganche: true,
        estatus_bloqueo: true,
        estatus_equipo: true,
        estatus_financ: true,
        fechaCancelo: true,
        fechaFinanc: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        forceAdvancePayments: true,
        formaPago: true,
        habilitar_pago_recurrente: true,
        iccid: true,
        id: true,
        idPlan: true,
        imei: true,
        imei2: true,
        ine_verificado: true,

        items: {
          select: {
            id: true,
          },
        },

        mensajeAdvertenciaVenta: true,
        montoDescuento: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        msisdn: true,
        numPagos: true,
        numPagosDescuento: true,
        paymentAgreement: true,
        plazo: true,
        porcentajeDescEng: true,
        precioLista: true,
        promotionId: true,

        protectionCerts: {
          select: {
            id: true,
          },
        },

        proveedorBloqueo: true,
        proveedorPagoRecurrente: true,
        rangoFinalDescuento: true,
        rangoInicialDescuento: true,
        rutaArchivoDescuento: true,
        rutaFirma: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefono: true,
        timeToReconfigNextlock: true,
        tokenPagoRecurrente: true,
        ubicacion: true,
        ubicacionLatitud: true,
        ubicacionLongitud: true,
        ubicacionMapa: true,
        ultimaConexion: true,
        ultimaLocacion: true,
        unenrolledUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/financedSales")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectFinancedSales(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: FinancedSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSales: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/financedSales")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateFinancedSales(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: FinancedSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSales: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/financedSales")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectFinancedSales(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: FinancedSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSales: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/kardex")
  @ApiNestedQuery(KardexFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Kardex",
    action: "read",
    possession: "any",
  })
  async findKardex(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<Kardex[]> {
    const query = plainToClass(KardexFindManyArgs, request.query);
    const results = await this.service.findKardex(params.id, {
      ...query,
      select: {
        cantUnidades: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        ivaUnidad: true,

        payments: {
          select: {
            id: true,
          },
        },

        personalLoans: {
          select: {
            id: true,
          },
        },

        precioUnidad: true,
        tipo_inventario: true,

        transactions: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectKardex(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateKardex(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectKardex(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/kardexSeries")
  @ApiNestedQuery(KardexSeryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "KardexSery",
    action: "read",
    possession: "any",
  })
  async findKardexSeries(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<KardexSery[]> {
    const query = plainToClass(KardexSeryFindManyArgs, request.query);
    const results = await this.service.findKardexSeries(params.id, {
      ...query,
      select: {
        codigoBloqueo: true,
        id: true,

        items: {
          select: {
            id: true,
          },
        },

        otraSerie: true,
        serialCode: true,

        transactions: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/kardexSeries")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectKardexSeries(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: KardexSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardexSeries: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/kardexSeries")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateKardexSeries(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: KardexSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardexSeries: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/kardexSeries")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectKardexSeries(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: KardexSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardexSeries: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/nubariumValidations")
  @ApiNestedQuery(NubariumValidationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "NubariumValidation",
    action: "read",
    possession: "any",
  })
  async findNubariumValidations(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<NubariumValidation[]> {
    const query = plainToClass(NubariumValidationFindManyArgs, request.query);
    const results = await this.service.findNubariumValidations(params.id, {
      ...query,
      select: {
        claveElectorCliente: true,
        fecha: true,
        id: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/nubariumValidations")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectNubariumValidations(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: NubariumValidationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nubariumValidations: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/nubariumValidations")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateNubariumValidations(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: NubariumValidationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nubariumValidations: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/nubariumValidations")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectNubariumValidations(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: NubariumValidationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nubariumValidations: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/otherCompaniesPayments")
  @ApiNestedQuery(OtherCompaniesPaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OtherCompaniesPayment",
    action: "read",
    possession: "any",
  })
  async findOtherCompaniesPayments(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<OtherCompaniesPayment[]> {
    const query = plainToClass(
      OtherCompaniesPaymentFindManyArgs,
      request.query
    );
    const results = await this.service.findOtherCompaniesPayments(params.id, {
      ...query,
      select: {
        abonoExtra: true,
        cambioDevuelto: true,
        cantidadRecibida: true,
        capitalPagado: true,
        codigoBloqueo: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        desctoAplicado: true,
        desdeWebhook: true,
        estatus_pago: true,
        fechaPago: true,
        fechaProxVenc: true,
        fechaVenc: true,
        formaPago: true,
        horaPago: true,
        id: true,
        interesPagado: true,
        numPago: true,
        opcionCambio: true,
        opcionPago: true,
        pagosAdelantados: true,
        receivedUserId: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },

        tipo_pago: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/otherCompaniesPayments")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectOtherCompaniesPayments(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: OtherCompaniesPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherCompaniesPayments: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/otherCompaniesPayments")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateOtherCompaniesPayments(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: OtherCompaniesPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherCompaniesPayments: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/otherCompaniesPayments")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectOtherCompaniesPayments(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: OtherCompaniesPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherCompaniesPayments: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentInterests")
  @ApiNestedQuery(PaymentInterestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentInterest",
    action: "read",
    possession: "any",
  })
  async findPaymentInterests(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<PaymentInterest[]> {
    const query = plainToClass(PaymentInterestFindManyArgs, request.query);
    const results = await this.service.findPaymentInterests(params.id, {
      ...query,
      select: {
        id: true,
        interesAnual: true,
        interesSemanal: true,
        interesSemanalMultiplo: true,
        paymentPeriodId: true,
        rangoFinal: true,
        rangoInicial: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentInterests")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectPaymentInterests(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: PaymentInterestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentInterests: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentInterests")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updatePaymentInterests(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: PaymentInterestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentInterests: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentInterests")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentInterests(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: PaymentInterestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentInterests: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        abonoExtra: true,
        cambioDevuelto: true,
        canceledUserId: true,
        cantidadRecibida: true,
        capitalPagado: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        comentariosPago: true,
        comprobantePago: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        customerId: true,
        desctoAplicado: true,
        desdeWebhook: true,
        fechaCancelo: true,
        fechaPago: true,
        fechaProxVenc: true,
        fechaVenc: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        formaPago: true,
        horaPago: true,
        id: true,
        interesPagado: true,
        opcionCambio: true,
        opcionPago: true,
        pagoRecurrente: true,
        pagosAdelantados: true,
        pathFileDiscount: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        payCount: true,
        pay_status: true,
        pay_type: true,
        percentageDiscountDownPayment: true,

        personalLoans: {
          select: {
            id: true,
          },
        },

        promotionId: true,
        receivedUserId: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectPayments(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updatePayments(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectPayments(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/personalLoans")
  @ApiNestedQuery(PersonalLoanFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "read",
    possession: "any",
  })
  async findPersonalLoans(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<PersonalLoan[]> {
    const query = plainToClass(PersonalLoanFindManyArgs, request.query);
    const results = await this.service.findPersonalLoans(params.id, {
      ...query,
      select: {
        codigoBloqueo: true,
        comentarios: true,

        customers: {
          select: {
            id: true,
          },
        },

        deletedUserId: true,
        desctoPagoOportuno: true,
        estatus_prestamo: true,
        fechaCancelacion: true,
        fechaPrestamo: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        id: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        plazo: true,
        requestedUserId: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefonoEnvioToken: true,
        tipo_plazo: true,
        tokenEnviado: true,
        updatedAt: true,
        updatedUserId: true,

        users: {
          select: {
            id: true,
          },
        },

        validaciones_saltadas: true,
        vendorLock: true,

        warehouses: {
          select: {
            id: true,
          },
        },

        warningAlert: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/personalLoans")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectPersonalLoans(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: PersonalLoanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalLoans: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/personalLoans")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updatePersonalLoans(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: PersonalLoanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalLoans: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/personalLoans")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectPersonalLoans(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: PersonalLoanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      personalLoans: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/protectionCertActivations")
  @ApiNestedQuery(ProtectionCertActivationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProtectionCertActivation",
    action: "read",
    possession: "any",
  })
  async findProtectionCertActivations(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<ProtectionCertActivation[]> {
    const query = plainToClass(
      ProtectionCertActivationFindManyArgs,
      request.query
    );
    const results = await this.service.findProtectionCertActivations(
      params.id,
      {
        ...query,
        select: {
          authUserId: true,
          codigoBloqueo: true,
          codigoBloqueoApartado: true,
          codigoSerie: true,
          codigoSerieApartado: true,
          comentario: true,

          customers: {
            select: {
              id: true,
            },
          },

          deductPaymentId: true,
          devolvioEquipoApartado: true,
          diffPaymentId: true,
          estatus_bloqueo_apartado: true,
          estatusCertProtec: true,
          estatusReparacion: true,
          fechaAct: true,
          fechaAutorizacion: true,
          fechaUltActualizacion: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          id: true,
          idUsrAct: true,

          itemsProtectionCertActivationsItemIdToitems: {
            select: {
              id: true,
            },
          },

          itemsProtectionCertActivationsReservedItemIdToitems: {
            select: {
              id: true,
            },
          },

          pagoDeducible: true,
          pagoDiferencia: true,
          precioLista: true,
          precioListaApartado: true,
          precioReparacion: true,
          protectionCertId: true,
          tipoProtec: true,
          updatedUserId: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/protectionCertActivations")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectProtectionCertActivations(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivations: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/protectionCertActivations")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateProtectionCertActivations(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivations: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/protectionCertActivations")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectProtectionCertActivations(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivations: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/protectionCerts")
  @ApiNestedQuery(ProtectionCertFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProtectionCert",
    action: "read",
    possession: "any",
  })
  async findProtectionCerts(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<ProtectionCert[]> {
    const query = plainToClass(ProtectionCertFindManyArgs, request.query);
    const results = await this.service.findProtectionCerts(params.id, {
      ...query,
      select: {
        certFolio: true,
        createdUserId: true,

        customers: {
          select: {
            id: true,
          },
        },

        estatus_cert: true,
        fechaCancelacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        motivoCancelacion: true,
        protec_activadas: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/protectionCerts")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectProtectionCerts(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: ProtectionCertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCerts: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/protectionCerts")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateProtectionCerts(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: ProtectionCertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCerts: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/protectionCerts")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectProtectionCerts(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: ProtectionCertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCerts: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/stock")
  @ApiNestedQuery(StockFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Stock",
    action: "read",
    possession: "any",
  })
  async findStock(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<Stock[]> {
    const query = plainToClass(StockFindManyArgs, request.query);
    const results = await this.service.findStock(params.id, {
      ...query,
      select: {
        existencias: true,
        existMax: true,
        existMin: true,
        id: true,

        items: {
          select: {
            id: true,
          },
        },

        tipo_inventario: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stock")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectStock(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: StockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stock: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stock")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateStock(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: StockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stock: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stock")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectStock(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: StockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stock: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/stockSeries")
  @ApiNestedQuery(StockSeryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StockSery",
    action: "read",
    possession: "any",
  })
  async findStockSeries(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<StockSery[]> {
    const query = plainToClass(StockSeryFindManyArgs, request.query);
    const results = await this.service.findStockSeries(params.id, {
      ...query,
      select: {
        codigoBloqueo: true,
        estatus_bloqueo: true,
        estatus_serie: true,
        id: true,

        items: {
          select: {
            id: true,
          },
        },

        otraSerie: true,
        proveedorBloqueo: true,
        serialCode: true,
        serieEnrolada: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stockSeries")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectStockSeries(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: StockSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stockSeries: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stockSeries")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateStockSeries(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: StockSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stockSeries: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stockSeries")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectStockSeries(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: StockSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stockSeries: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Transaction",
    action: "read",
    possession: "any",
  })
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        branchOfficesTransactionsAnotherBranchOfficeIdTobranchOffices: {
          select: {
            id: true,
          },
        },

        branchOfficesTransactionsBranchOfficeIdTobranchOffices: {
          select: {
            id: true,
          },
        },

        comentariosTrans: true,
        createdUserId: true,

        customers: {
          select: {
            id: true,
          },
        },

        estatus_trans: true,
        fechaTrans: true,
        folioDocto: true,
        horaTrans: true,
        id: true,
        move_type: true,
        numProveedor: true,
        transacFolio: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectTransactions(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateTransactions(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectTransactions(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/warehouseGrants")
  @ApiNestedQuery(WarehouseGrantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WarehouseGrant",
    action: "read",
    possession: "any",
  })
  async findWarehouseGrants(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<WarehouseGrant[]> {
    const query = plainToClass(WarehouseGrantFindManyArgs, request.query);
    const results = await this.service.findWarehouseGrants(params.id, {
      ...query,
      select: {
        fechaAsignacion: true,
        id: true,
        mainWhouse: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseGrants")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectWarehouseGrants(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseGrantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseGrants: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseGrants")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateWarehouseGrants(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseGrantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseGrants: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseGrants")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectWarehouseGrants(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseGrantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseGrants: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/warehouseLoanAmounts")
  @ApiNestedQuery(WarehouseLoanAmountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WarehouseLoanAmount",
    action: "read",
    possession: "any",
  })
  async findWarehouseLoanAmounts(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<WarehouseLoanAmount[]> {
    const query = plainToClass(WarehouseLoanAmountFindManyArgs, request.query);
    const results = await this.service.findWarehouseLoanAmounts(params.id, {
      ...query,
      select: {
        id: true,

        loanAmounts: {
          select: {
            id: true,
          },
        },

        loyaltyPromotion: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseLoanAmounts")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectWarehouseLoanAmounts(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseLoanAmountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseLoanAmounts: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseLoanAmounts")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateWarehouseLoanAmounts(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseLoanAmountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseLoanAmounts: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseLoanAmounts")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectWarehouseLoanAmounts(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseLoanAmountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseLoanAmounts: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/warehouseMandatoryDocs")
  @ApiNestedQuery(WarehouseMandatoryDocFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WarehouseMandatoryDoc",
    action: "read",
    possession: "any",
  })
  async findWarehouseMandatoryDocs(
    @common.Req() request: Request,
    @common.Param() params: WarehouseWhereUniqueInput
  ): Promise<WarehouseMandatoryDoc[]> {
    const query = plainToClass(
      WarehouseMandatoryDocFindManyArgs,
      request.query
    );
    const results = await this.service.findWarehouseMandatoryDocs(params.id, {
      ...query,
      select: {
        id: true,

        mandatoryDocuments: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseMandatoryDocs")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async connectWarehouseMandatoryDocs(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseMandatoryDocWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseMandatoryDocs: {
        connect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseMandatoryDocs")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async updateWarehouseMandatoryDocs(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseMandatoryDocWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseMandatoryDocs: {
        set: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseMandatoryDocs")
  @nestAccessControl.UseRoles({
    resource: "Warehouse",
    action: "update",
    possession: "any",
  })
  async disconnectWarehouseMandatoryDocs(
    @common.Param() params: WarehouseWhereUniqueInput,
    @common.Body() body: WarehouseMandatoryDocWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseMandatoryDocs: {
        disconnect: body,
      },
    };
    await this.service.updateWarehouse({
      where: params,
      data,
      select: { id: true },
    });
  }
}
