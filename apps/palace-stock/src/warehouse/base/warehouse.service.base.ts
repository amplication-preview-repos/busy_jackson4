/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Warehouse as PrismaWarehouse,
  BranchManager as PrismaBranchManager,
  CashCount as PrismaCashCount,
  CashSale as PrismaCashSale,
  ConektaPaymentTransac as PrismaConektaPaymentTransac,
  Customer as PrismaCustomer,
  Estimate as PrismaEstimate,
  FinancedSale as PrismaFinancedSale,
  Kardex as PrismaKardex,
  KardexSery as PrismaKardexSery,
  NubariumValidation as PrismaNubariumValidation,
  OtherCompaniesPayment as PrismaOtherCompaniesPayment,
  PaymentInterest as PrismaPaymentInterest,
  Payment as PrismaPayment,
  PersonalLoan as PrismaPersonalLoan,
  ProtectionCertActivation as PrismaProtectionCertActivation,
  ProtectionCert as PrismaProtectionCert,
  Stock as PrismaStock,
  StockSery as PrismaStockSery,
  Transaction as PrismaTransaction,
  WarehouseGrant as PrismaWarehouseGrant,
  WarehouseLoanAmount as PrismaWarehouseLoanAmount,
  WarehouseMandatoryDoc as PrismaWarehouseMandatoryDoc,
  BranchOffice as PrismaBranchOffice,
} from "@prisma/client";

export class WarehouseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WarehouseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.warehouse.count(args);
  }

  async warehouses<T extends Prisma.WarehouseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseFindManyArgs>
  ): Promise<PrismaWarehouse[]> {
    return this.prisma.warehouse.findMany<Prisma.WarehouseFindManyArgs>(args);
  }
  async warehouse<T extends Prisma.WarehouseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseFindUniqueArgs>
  ): Promise<PrismaWarehouse | null> {
    return this.prisma.warehouse.findUnique(args);
  }
  async createWarehouse<T extends Prisma.WarehouseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseCreateArgs>
  ): Promise<PrismaWarehouse> {
    return this.prisma.warehouse.create<T>(args);
  }
  async updateWarehouse<T extends Prisma.WarehouseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseUpdateArgs>
  ): Promise<PrismaWarehouse> {
    return this.prisma.warehouse.update<T>(args);
  }
  async deleteWarehouse<T extends Prisma.WarehouseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseDeleteArgs>
  ): Promise<PrismaWarehouse> {
    return this.prisma.warehouse.delete(args);
  }

  async findBranchManagers(
    parentId: number,
    args: Prisma.BranchManagerFindManyArgs
  ): Promise<PrismaBranchManager[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .branchManagers(args);
  }

  async findCashCounts(
    parentId: number,
    args: Prisma.CashCountFindManyArgs
  ): Promise<PrismaCashCount[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cashCounts(args);
  }

  async findCashSales(
    parentId: number,
    args: Prisma.CashSaleFindManyArgs
  ): Promise<PrismaCashSale[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cashSales(args);
  }

  async findConektaPaymentTransacs(
    parentId: number,
    args: Prisma.ConektaPaymentTransacFindManyArgs
  ): Promise<PrismaConektaPaymentTransac[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .conektaPaymentTransacs(args);
  }

  async findCustomers(
    parentId: number,
    args: Prisma.CustomerFindManyArgs
  ): Promise<PrismaCustomer[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customers(args);
  }

  async findEstimates(
    parentId: number,
    args: Prisma.EstimateFindManyArgs
  ): Promise<PrismaEstimate[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .estimates(args);
  }

  async findFinancedSales(
    parentId: number,
    args: Prisma.FinancedSaleFindManyArgs
  ): Promise<PrismaFinancedSale[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .financedSales(args);
  }

  async findKardex(
    parentId: number,
    args: Prisma.KardexFindManyArgs
  ): Promise<PrismaKardex[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .kardex(args);
  }

  async findKardexSeries(
    parentId: number,
    args: Prisma.KardexSeryFindManyArgs
  ): Promise<PrismaKardexSery[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .kardexSeries(args);
  }

  async findNubariumValidations(
    parentId: number,
    args: Prisma.NubariumValidationFindManyArgs
  ): Promise<PrismaNubariumValidation[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .nubariumValidations(args);
  }

  async findOtherCompaniesPayments(
    parentId: number,
    args: Prisma.OtherCompaniesPaymentFindManyArgs
  ): Promise<PrismaOtherCompaniesPayment[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .otherCompaniesPayments(args);
  }

  async findPaymentInterests(
    parentId: number,
    args: Prisma.PaymentInterestFindManyArgs
  ): Promise<PrismaPaymentInterest[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paymentInterests(args);
  }

  async findPayments(
    parentId: number,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async findPersonalLoans(
    parentId: number,
    args: Prisma.PersonalLoanFindManyArgs
  ): Promise<PrismaPersonalLoan[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .personalLoans(args);
  }

  async findProtectionCertActivations(
    parentId: number,
    args: Prisma.ProtectionCertActivationFindManyArgs
  ): Promise<PrismaProtectionCertActivation[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .protectionCertActivations(args);
  }

  async findProtectionCerts(
    parentId: number,
    args: Prisma.ProtectionCertFindManyArgs
  ): Promise<PrismaProtectionCert[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .protectionCerts(args);
  }

  async findStock(
    parentId: number,
    args: Prisma.StockFindManyArgs
  ): Promise<PrismaStock[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .stock(args);
  }

  async findStockSeries(
    parentId: number,
    args: Prisma.StockSeryFindManyArgs
  ): Promise<PrismaStockSery[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .stockSeries(args);
  }

  async findTransactions(
    parentId: number,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async findWarehouseGrants(
    parentId: number,
    args: Prisma.WarehouseGrantFindManyArgs
  ): Promise<PrismaWarehouseGrant[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .warehouseGrants(args);
  }

  async findWarehouseLoanAmounts(
    parentId: number,
    args: Prisma.WarehouseLoanAmountFindManyArgs
  ): Promise<PrismaWarehouseLoanAmount[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .warehouseLoanAmounts(args);
  }

  async findWarehouseMandatoryDocs(
    parentId: number,
    args: Prisma.WarehouseMandatoryDocFindManyArgs
  ): Promise<PrismaWarehouseMandatoryDoc[]> {
    return this.prisma.warehouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .warehouseMandatoryDocs(args);
  }

  async getBranchOffices(parentId: number): Promise<PrismaBranchOffice | null> {
    return this.prisma.warehouse
      .findUnique({
        where: { id: parentId },
      })
      .branchOffices();
  }
}
