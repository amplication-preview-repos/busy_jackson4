/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CashSale as PrismaCashSale,
  Bill as PrismaBill,
  Kardex as PrismaKardex,
  CashCountDetail as PrismaCashCountDetail,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class CashSaleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CashSaleCountArgs, "select">): Promise<number> {
    return this.prisma.cashSale.count(args);
  }

  async cashSales<T extends Prisma.CashSaleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashSaleFindManyArgs>
  ): Promise<PrismaCashSale[]> {
    return this.prisma.cashSale.findMany<Prisma.CashSaleFindManyArgs>(args);
  }
  async cashSale<T extends Prisma.CashSaleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashSaleFindUniqueArgs>
  ): Promise<PrismaCashSale | null> {
    return this.prisma.cashSale.findUnique(args);
  }
  async createCashSale<T extends Prisma.CashSaleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashSaleCreateArgs>
  ): Promise<PrismaCashSale> {
    return this.prisma.cashSale.create<T>(args);
  }
  async updateCashSale<T extends Prisma.CashSaleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashSaleUpdateArgs>
  ): Promise<PrismaCashSale> {
    return this.prisma.cashSale.update<T>(args);
  }
  async deleteCashSale<T extends Prisma.CashSaleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashSaleDeleteArgs>
  ): Promise<PrismaCashSale> {
    return this.prisma.cashSale.delete(args);
  }

  async findBills(
    parentId: number,
    args: Prisma.BillFindManyArgs
  ): Promise<PrismaBill[]> {
    return this.prisma.cashSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bills(args);
  }

  async findKardex(
    parentId: number,
    args: Prisma.KardexFindManyArgs
  ): Promise<PrismaKardex[]> {
    return this.prisma.cashSale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .kardex(args);
  }

  async getCashCountDetails(
    parentId: number
  ): Promise<PrismaCashCountDetail | null> {
    return this.prisma.cashSale
      .findUnique({
        where: { id: parentId },
      })
      .cashCountDetails();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.cashSale
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
