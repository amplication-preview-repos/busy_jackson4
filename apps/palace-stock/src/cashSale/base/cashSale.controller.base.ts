/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CashSaleService } from "../cashSale.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CashSaleCreateInput } from "./CashSaleCreateInput";
import { CashSale } from "./CashSale";
import { CashSaleFindManyArgs } from "./CashSaleFindManyArgs";
import { CashSaleWhereUniqueInput } from "./CashSaleWhereUniqueInput";
import { CashSaleUpdateInput } from "./CashSaleUpdateInput";
import { BillFindManyArgs } from "../../bill/base/BillFindManyArgs";
import { Bill } from "../../bill/base/Bill";
import { BillWhereUniqueInput } from "../../bill/base/BillWhereUniqueInput";
import { KardexFindManyArgs } from "../../kardex/base/KardexFindManyArgs";
import { Kardex } from "../../kardex/base/Kardex";
import { KardexWhereUniqueInput } from "../../kardex/base/KardexWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CashSaleControllerBase {
  constructor(
    protected readonly service: CashSaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CashSale })
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCashSale(
    @common.Body() data: CashSaleCreateInput
  ): Promise<CashSale> {
    return await this.service.createCashSale({
      data: {
        ...data,

        cashCountDetails: data.cashCountDetails
          ? {
              connect: data.cashCountDetails,
            }
          : undefined,

        warehouses: {
          connect: data.warehouses,
        },
      },
      select: {
        apellido1Cliente: true,
        apellido2Cliente: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        createdUserId: true,
        estatus_venta: true,
        fechaRegistro: true,
        fechaVenta: true,
        id: true,
        metodoPago: true,
        nombreCompletoCliente: true,
        nombresCliente: true,
        totalUnidades: true,
        totalVenta: true,
        ubicacion: true,
        ubicacionLatitud: true,
        ubicacionLongitud: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CashSale] })
  @ApiNestedQuery(CashSaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cashSales(@common.Req() request: Request): Promise<CashSale[]> {
    const args = plainToClass(CashSaleFindManyArgs, request.query);
    return this.service.cashSales({
      ...args,
      select: {
        apellido1Cliente: true,
        apellido2Cliente: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        createdUserId: true,
        estatus_venta: true,
        fechaRegistro: true,
        fechaVenta: true,
        id: true,
        metodoPago: true,
        nombreCompletoCliente: true,
        nombresCliente: true,
        totalUnidades: true,
        totalVenta: true,
        ubicacion: true,
        ubicacionLatitud: true,
        ubicacionLongitud: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CashSale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cashSale(
    @common.Param() params: CashSaleWhereUniqueInput
  ): Promise<CashSale | null> {
    const result = await this.service.cashSale({
      where: params,
      select: {
        apellido1Cliente: true,
        apellido2Cliente: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        createdUserId: true,
        estatus_venta: true,
        fechaRegistro: true,
        fechaVenta: true,
        id: true,
        metodoPago: true,
        nombreCompletoCliente: true,
        nombresCliente: true,
        totalUnidades: true,
        totalVenta: true,
        ubicacion: true,
        ubicacionLatitud: true,
        ubicacionLongitud: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CashSale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCashSale(
    @common.Param() params: CashSaleWhereUniqueInput,
    @common.Body() data: CashSaleUpdateInput
  ): Promise<CashSale | null> {
    try {
      return await this.service.updateCashSale({
        where: params,
        data: {
          ...data,

          cashCountDetails: data.cashCountDetails
            ? {
                connect: data.cashCountDetails,
              }
            : undefined,

          warehouses: {
            connect: data.warehouses,
          },
        },
        select: {
          apellido1Cliente: true,
          apellido2Cliente: true,

          cashCountDetails: {
            select: {
              id: true,
            },
          },

          createdUserId: true,
          estatus_venta: true,
          fechaRegistro: true,
          fechaVenta: true,
          id: true,
          metodoPago: true,
          nombreCompletoCliente: true,
          nombresCliente: true,
          totalUnidades: true,
          totalVenta: true,
          ubicacion: true,
          ubicacionLatitud: true,
          ubicacionLongitud: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CashSale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCashSale(
    @common.Param() params: CashSaleWhereUniqueInput
  ): Promise<CashSale | null> {
    try {
      return await this.service.deleteCashSale({
        where: params,
        select: {
          apellido1Cliente: true,
          apellido2Cliente: true,

          cashCountDetails: {
            select: {
              id: true,
            },
          },

          createdUserId: true,
          estatus_venta: true,
          fechaRegistro: true,
          fechaVenta: true,
          id: true,
          metodoPago: true,
          nombreCompletoCliente: true,
          nombresCliente: true,
          totalUnidades: true,
          totalVenta: true,
          ubicacion: true,
          ubicacionLatitud: true,
          ubicacionLongitud: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bills")
  @ApiNestedQuery(BillFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "any",
  })
  async findBills(
    @common.Req() request: Request,
    @common.Param() params: CashSaleWhereUniqueInput
  ): Promise<Bill[]> {
    const query = plainToClass(BillFindManyArgs, request.query);
    const results = await this.service.findBills(params.id, {
      ...query,
      select: {
        billConcept: true,
        billingId: true,
        bill_status: true,
        canceledUserId: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        clientCode: true,
        codigoConcepto: true,
        complementId: true,
        createdUserId: true,
        engancheFinanc: true,
        factura_cerrada: true,
        fechaActualizacion: true,
        fechaCancelacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        folio: true,
        horaRegistro: true,
        id: true,
        mensajeEstatus: true,
        montoFactura: true,

        payments: {
          select: {
            id: true,
          },
        },

        referenceId: true,
        rutaPdf: true,
        rutaXml: true,
        saldoFactura: true,
        saldoFacturaTemp: true,
        serie: true,
        stampedAt: true,
        tipo_docto: true,
        tipo_sucursal: true,
        updatedUserId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bills")
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "update",
    possession: "any",
  })
  async connectBills(
    @common.Param() params: CashSaleWhereUniqueInput,
    @common.Body() body: BillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bills: {
        connect: body,
      },
    };
    await this.service.updateCashSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bills")
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "update",
    possession: "any",
  })
  async updateBills(
    @common.Param() params: CashSaleWhereUniqueInput,
    @common.Body() body: BillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bills: {
        set: body,
      },
    };
    await this.service.updateCashSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bills")
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "update",
    possession: "any",
  })
  async disconnectBills(
    @common.Param() params: CashSaleWhereUniqueInput,
    @common.Body() body: BillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bills: {
        disconnect: body,
      },
    };
    await this.service.updateCashSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/kardex")
  @ApiNestedQuery(KardexFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Kardex",
    action: "read",
    possession: "any",
  })
  async findKardex(
    @common.Req() request: Request,
    @common.Param() params: CashSaleWhereUniqueInput
  ): Promise<Kardex[]> {
    const query = plainToClass(KardexFindManyArgs, request.query);
    const results = await this.service.findKardex(params.id, {
      ...query,
      select: {
        cantUnidades: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        ivaUnidad: true,

        payments: {
          select: {
            id: true,
          },
        },

        personalLoans: {
          select: {
            id: true,
          },
        },

        precioUnidad: true,
        tipo_inventario: true,

        transactions: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "update",
    possession: "any",
  })
  async connectKardex(
    @common.Param() params: CashSaleWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        connect: body,
      },
    };
    await this.service.updateCashSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "update",
    possession: "any",
  })
  async updateKardex(
    @common.Param() params: CashSaleWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        set: body,
      },
    };
    await this.service.updateCashSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "CashSale",
    action: "update",
    possession: "any",
  })
  async disconnectKardex(
    @common.Param() params: CashSaleWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        disconnect: body,
      },
    };
    await this.service.updateCashSale({
      where: params,
      data,
      select: { id: true },
    });
  }
}
