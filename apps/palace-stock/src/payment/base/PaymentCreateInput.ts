/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  ValidateNested,
  IsOptional,
  IsInt,
  IsString,
  IsBoolean,
  IsDate,
  IsEnum,
} from "class-validator";

import { Decimal } from "decimal.js";
import { BillCreateNestedManyWithoutPaymentsInput } from "./BillCreateNestedManyWithoutPaymentsInput";
import { Type } from "class-transformer";
import { CashCountDetailWhereUniqueInput } from "../../cashCountDetail/base/CashCountDetailWhereUniqueInput";
import { ConektaPaymentTransacWhereUniqueInput } from "../../conektaPaymentTransac/base/ConektaPaymentTransacWhereUniqueInput";
import { DocumentCreateNestedManyWithoutPaymentsInput } from "./DocumentCreateNestedManyWithoutPaymentsInput";
import { FinancedSaleWhereUniqueInput } from "../../financedSale/base/FinancedSaleWhereUniqueInput";
import { KardexCreateNestedManyWithoutPaymentsInput } from "./KardexCreateNestedManyWithoutPaymentsInput";
import { ModifiedPaymentCreateNestedManyWithoutPaymentsInput } from "./ModifiedPaymentCreateNestedManyWithoutPaymentsInput";
import { PaycodePaymentTransacWhereUniqueInput } from "../../paycodePaymentTransac/base/PaycodePaymentTransacWhereUniqueInput";
import { EnumPaymentPayStatus } from "./EnumPaymentPayStatus";
import { EnumPaymentPayType } from "./EnumPaymentPayType";
import { PersonalLoanWhereUniqueInput } from "../../personalLoan/base/PersonalLoanWhereUniqueInput";
import { StripePaymentTransacWhereUniqueInput } from "../../stripePaymentTransac/base/StripePaymentTransacWhereUniqueInput";
import { WarehouseWhereUniqueInput } from "../../warehouse/base/WarehouseWhereUniqueInput";

@InputType()
class PaymentCreateInput {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  abonoExtra!: Decimal;

  @ApiProperty({
    required: false,
    type: () => BillCreateNestedManyWithoutPaymentsInput,
  })
  @ValidateNested()
  @Type(() => BillCreateNestedManyWithoutPaymentsInput)
  @IsOptional()
  @Field(() => BillCreateNestedManyWithoutPaymentsInput, {
    nullable: true,
  })
  bills?: BillCreateNestedManyWithoutPaymentsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  cambioDevuelto?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  canceledUserId?: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  cantidadRecibida!: Decimal;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  capitalPagado!: Decimal;

  @ApiProperty({
    required: false,
    type: () => CashCountDetailWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CashCountDetailWhereUniqueInput)
  @IsOptional()
  @Field(() => CashCountDetailWhereUniqueInput, {
    nullable: true,
  })
  cashCountDetails?: CashCountDetailWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comentariosPago?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comprobantePago?: string | null;

  @ApiProperty({
    required: false,
    type: () => ConektaPaymentTransacWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ConektaPaymentTransacWhereUniqueInput)
  @IsOptional()
  @Field(() => ConektaPaymentTransacWhereUniqueInput, {
    nullable: true,
  })
  conektaPaymentTransacs?: ConektaPaymentTransacWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  customerId?: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  desctoAplicado!: Decimal;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  desdeWebhook?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => DocumentCreateNestedManyWithoutPaymentsInput,
  })
  @ValidateNested()
  @Type(() => DocumentCreateNestedManyWithoutPaymentsInput)
  @IsOptional()
  @Field(() => DocumentCreateNestedManyWithoutPaymentsInput, {
    nullable: true,
  })
  documents?: DocumentCreateNestedManyWithoutPaymentsInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaCancelo?: Date | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  fechaPago!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaProxVenc?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaVenc?: Date | null;

  @ApiProperty({
    required: false,
    type: () => FinancedSaleWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => FinancedSaleWhereUniqueInput)
  @IsOptional()
  @Field(() => FinancedSaleWhereUniqueInput, {
    nullable: true,
  })
  financedSales?: FinancedSaleWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  formaPago?: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  horaPago!: Date;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  interesPagado!: Decimal;

  @ApiProperty({
    required: false,
    type: () => KardexCreateNestedManyWithoutPaymentsInput,
  })
  @ValidateNested()
  @Type(() => KardexCreateNestedManyWithoutPaymentsInput)
  @IsOptional()
  @Field(() => KardexCreateNestedManyWithoutPaymentsInput, {
    nullable: true,
  })
  kardex?: KardexCreateNestedManyWithoutPaymentsInput;

  @ApiProperty({
    required: false,
    type: () => ModifiedPaymentCreateNestedManyWithoutPaymentsInput,
  })
  @ValidateNested()
  @Type(() => ModifiedPaymentCreateNestedManyWithoutPaymentsInput)
  @IsOptional()
  @Field(() => ModifiedPaymentCreateNestedManyWithoutPaymentsInput, {
    nullable: true,
  })
  modifiedPayments?: ModifiedPaymentCreateNestedManyWithoutPaymentsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  opcionCambio?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  opcionPago?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  pagoRecurrente?: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  pagosAdelantados?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  pathFileDiscount?: string | null;

  @ApiProperty({
    required: false,
    type: () => PaycodePaymentTransacWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PaycodePaymentTransacWhereUniqueInput)
  @IsOptional()
  @Field(() => PaycodePaymentTransacWhereUniqueInput, {
    nullable: true,
  })
  paycodePaymentTransacs?: PaycodePaymentTransacWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  payCount!: number;

  @ApiProperty({
    required: true,
    enum: EnumPaymentPayStatus,
  })
  @IsEnum(EnumPaymentPayStatus)
  @Field(() => EnumPaymentPayStatus)
  pay_status!: "A" | "C" | "P";

  @ApiProperty({
    required: true,
    enum: EnumPaymentPayType,
  })
  @IsEnum(EnumPaymentPayType)
  @Field(() => EnumPaymentPayType)
  pay_type!: "P" | "A" | "D" | "C" | "E";

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  percentageDiscountDownPayment?: number | null;

  @ApiProperty({
    required: false,
    type: () => PersonalLoanWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PersonalLoanWhereUniqueInput)
  @IsOptional()
  @Field(() => PersonalLoanWhereUniqueInput, {
    nullable: true,
  })
  personalLoans?: PersonalLoanWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  promotionId?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  receivedUserId?: number | null;

  @ApiProperty({
    required: false,
    type: () => StripePaymentTransacWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StripePaymentTransacWhereUniqueInput)
  @IsOptional()
  @Field(() => StripePaymentTransacWhereUniqueInput, {
    nullable: true,
  })
  stripePaymentTransacs?: StripePaymentTransacWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: () => WarehouseWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => WarehouseWhereUniqueInput)
  @Field(() => WarehouseWhereUniqueInput)
  warehouses!: WarehouseWhereUniqueInput;
}

export { PaymentCreateInput as PaymentCreateInput };
