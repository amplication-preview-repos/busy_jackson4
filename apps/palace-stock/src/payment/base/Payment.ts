/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  ValidateNested,
  IsOptional,
  IsInt,
  IsString,
  IsBoolean,
  IsDate,
  IsEnum,
} from "class-validator";

import { Decimal } from "decimal.js";
import { Bill } from "../../bill/base/Bill";
import { Type } from "class-transformer";
import { CashCountDetail } from "../../cashCountDetail/base/CashCountDetail";
import { ConektaPaymentTransac } from "../../conektaPaymentTransac/base/ConektaPaymentTransac";
import { Document } from "../../document/base/Document";
import { FinancedSale } from "../../financedSale/base/FinancedSale";
import { Kardex } from "../../kardex/base/Kardex";
import { ModifiedPayment } from "../../modifiedPayment/base/ModifiedPayment";
import { PaycodePaymentTransac } from "../../paycodePaymentTransac/base/PaycodePaymentTransac";
import { EnumPaymentPayStatus } from "./EnumPaymentPayStatus";
import { EnumPaymentPayType } from "./EnumPaymentPayType";
import { PersonalLoan } from "../../personalLoan/base/PersonalLoan";
import { StripePaymentTransac } from "../../stripePaymentTransac/base/StripePaymentTransac";
import { Warehouse } from "../../warehouse/base/Warehouse";

@ObjectType()
class Payment {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  abonoExtra!: Decimal;

  @ApiProperty({
    required: false,
    type: () => [Bill],
  })
  @ValidateNested()
  @Type(() => Bill)
  @IsOptional()
  bills?: Array<Bill>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  cambioDevuelto!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  canceledUserId!: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  cantidadRecibida!: Decimal;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  capitalPagado!: Decimal;

  @ApiProperty({
    required: false,
    type: () => CashCountDetail,
  })
  @ValidateNested()
  @Type(() => CashCountDetail)
  @IsOptional()
  cashCountDetails?: CashCountDetail | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comentariosPago!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comprobantePago!: string | null;

  @ApiProperty({
    required: false,
    type: () => ConektaPaymentTransac,
  })
  @ValidateNested()
  @Type(() => ConektaPaymentTransac)
  @IsOptional()
  conektaPaymentTransacs?: ConektaPaymentTransac | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  customerId!: number | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  desctoAplicado!: Decimal;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  desdeWebhook!: boolean | null;

  @ApiProperty({
    required: false,
    type: () => [Document],
  })
  @ValidateNested()
  @Type(() => Document)
  @IsOptional()
  documents?: Array<Document>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaCancelo!: Date | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  fechaPago!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaProxVenc!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaVenc!: Date | null;

  @ApiProperty({
    required: false,
    type: () => FinancedSale,
  })
  @ValidateNested()
  @Type(() => FinancedSale)
  @IsOptional()
  financedSales?: FinancedSale | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  formaPago!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  horaPago!: Date;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  interesPagado!: Decimal;

  @ApiProperty({
    required: false,
    type: () => [Kardex],
  })
  @ValidateNested()
  @Type(() => Kardex)
  @IsOptional()
  kardex?: Array<Kardex>;

  @ApiProperty({
    required: false,
    type: () => [ModifiedPayment],
  })
  @ValidateNested()
  @Type(() => ModifiedPayment)
  @IsOptional()
  modifiedPayments?: Array<ModifiedPayment>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  opcionCambio!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  opcionPago!: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  pagoRecurrente!: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  pagosAdelantados!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  pathFileDiscount!: string | null;

  @ApiProperty({
    required: false,
    type: () => PaycodePaymentTransac,
  })
  @ValidateNested()
  @Type(() => PaycodePaymentTransac)
  @IsOptional()
  paycodePaymentTransacs?: PaycodePaymentTransac | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  payCount!: number;

  @ApiProperty({
    required: true,
    enum: EnumPaymentPayStatus,
  })
  @IsEnum(EnumPaymentPayStatus)
  @Field(() => EnumPaymentPayStatus, {
    nullable: true,
  })
  pay_status?: "A" | "C" | "P";

  @ApiProperty({
    required: true,
    enum: EnumPaymentPayType,
  })
  @IsEnum(EnumPaymentPayType)
  @Field(() => EnumPaymentPayType, {
    nullable: true,
  })
  pay_type?: "P" | "A" | "D" | "C" | "E";

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  percentageDiscountDownPayment!: number | null;

  @ApiProperty({
    required: false,
    type: () => PersonalLoan,
  })
  @ValidateNested()
  @Type(() => PersonalLoan)
  @IsOptional()
  personalLoans?: PersonalLoan | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  promotionId!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  receivedUserId!: number | null;

  @ApiProperty({
    required: false,
    type: () => StripePaymentTransac,
  })
  @ValidateNested()
  @Type(() => StripePaymentTransac)
  @IsOptional()
  stripePaymentTransacs?: StripePaymentTransac | null;

  @ApiProperty({
    required: true,
    type: () => Warehouse,
  })
  @ValidateNested()
  @Type(() => Warehouse)
  warehouses?: Warehouse;
}

export { Payment as Payment };
