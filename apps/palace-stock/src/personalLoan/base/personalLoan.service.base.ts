/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PersonalLoan as PrismaPersonalLoan,
  Kardex as PrismaKardex,
  Payment as PrismaPayment,
  Customer as PrismaCustomer,
  UserModel as PrismaUserModel,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class PersonalLoanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PersonalLoanCountArgs, "select">
  ): Promise<number> {
    return this.prisma.personalLoan.count(args);
  }

  async personalLoans<T extends Prisma.PersonalLoanFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonalLoanFindManyArgs>
  ): Promise<PrismaPersonalLoan[]> {
    return this.prisma.personalLoan.findMany<Prisma.PersonalLoanFindManyArgs>(
      args
    );
  }
  async personalLoan<T extends Prisma.PersonalLoanFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonalLoanFindUniqueArgs>
  ): Promise<PrismaPersonalLoan | null> {
    return this.prisma.personalLoan.findUnique(args);
  }
  async createPersonalLoan<T extends Prisma.PersonalLoanCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonalLoanCreateArgs>
  ): Promise<PrismaPersonalLoan> {
    return this.prisma.personalLoan.create<T>(args);
  }
  async updatePersonalLoan<T extends Prisma.PersonalLoanUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonalLoanUpdateArgs>
  ): Promise<PrismaPersonalLoan> {
    return this.prisma.personalLoan.update<T>(args);
  }
  async deletePersonalLoan<T extends Prisma.PersonalLoanDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PersonalLoanDeleteArgs>
  ): Promise<PrismaPersonalLoan> {
    return this.prisma.personalLoan.delete(args);
  }

  async findKardex(
    parentId: number,
    args: Prisma.KardexFindManyArgs
  ): Promise<PrismaKardex[]> {
    return this.prisma.personalLoan
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .kardex(args);
  }

  async findPayments(
    parentId: number,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.personalLoan
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async getCustomers(parentId: number): Promise<PrismaCustomer | null> {
    return this.prisma.personalLoan
      .findUnique({
        where: { id: parentId },
      })
      .customers();
  }

  async getUsers(parentId: number): Promise<PrismaUserModel | null> {
    return this.prisma.personalLoan
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.personalLoan
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
