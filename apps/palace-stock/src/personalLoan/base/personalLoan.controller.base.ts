/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PersonalLoanService } from "../personalLoan.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PersonalLoanCreateInput } from "./PersonalLoanCreateInput";
import { PersonalLoan } from "./PersonalLoan";
import { PersonalLoanFindManyArgs } from "./PersonalLoanFindManyArgs";
import { PersonalLoanWhereUniqueInput } from "./PersonalLoanWhereUniqueInput";
import { PersonalLoanUpdateInput } from "./PersonalLoanUpdateInput";
import { KardexFindManyArgs } from "../../kardex/base/KardexFindManyArgs";
import { Kardex } from "../../kardex/base/Kardex";
import { KardexWhereUniqueInput } from "../../kardex/base/KardexWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PersonalLoanControllerBase {
  constructor(
    protected readonly service: PersonalLoanService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PersonalLoan })
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPersonalLoan(
    @common.Body() data: PersonalLoanCreateInput
  ): Promise<PersonalLoan> {
    return await this.service.createPersonalLoan({
      data: {
        ...data,

        customers: {
          connect: data.customers,
        },

        users: {
          connect: data.users,
        },

        warehouses: {
          connect: data.warehouses,
        },
      },
      select: {
        codigoBloqueo: true,
        comentarios: true,

        customers: {
          select: {
            id: true,
          },
        },

        deletedUserId: true,
        desctoPagoOportuno: true,
        estatus_prestamo: true,
        fechaCancelacion: true,
        fechaPrestamo: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        id: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        plazo: true,
        requestedUserId: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefonoEnvioToken: true,
        tipo_plazo: true,
        tokenEnviado: true,
        updatedAt: true,
        updatedUserId: true,

        users: {
          select: {
            id: true,
          },
        },

        validaciones_saltadas: true,
        vendorLock: true,

        warehouses: {
          select: {
            id: true,
          },
        },

        warningAlert: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PersonalLoan] })
  @ApiNestedQuery(PersonalLoanFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async personalLoans(@common.Req() request: Request): Promise<PersonalLoan[]> {
    const args = plainToClass(PersonalLoanFindManyArgs, request.query);
    return this.service.personalLoans({
      ...args,
      select: {
        codigoBloqueo: true,
        comentarios: true,

        customers: {
          select: {
            id: true,
          },
        },

        deletedUserId: true,
        desctoPagoOportuno: true,
        estatus_prestamo: true,
        fechaCancelacion: true,
        fechaPrestamo: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        id: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        plazo: true,
        requestedUserId: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefonoEnvioToken: true,
        tipo_plazo: true,
        tokenEnviado: true,
        updatedAt: true,
        updatedUserId: true,

        users: {
          select: {
            id: true,
          },
        },

        validaciones_saltadas: true,
        vendorLock: true,

        warehouses: {
          select: {
            id: true,
          },
        },

        warningAlert: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PersonalLoan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async personalLoan(
    @common.Param() params: PersonalLoanWhereUniqueInput
  ): Promise<PersonalLoan | null> {
    const result = await this.service.personalLoan({
      where: params,
      select: {
        codigoBloqueo: true,
        comentarios: true,

        customers: {
          select: {
            id: true,
          },
        },

        deletedUserId: true,
        desctoPagoOportuno: true,
        estatus_prestamo: true,
        fechaCancelacion: true,
        fechaPrestamo: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        id: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        plazo: true,
        requestedUserId: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefonoEnvioToken: true,
        tipo_plazo: true,
        tokenEnviado: true,
        updatedAt: true,
        updatedUserId: true,

        users: {
          select: {
            id: true,
          },
        },

        validaciones_saltadas: true,
        vendorLock: true,

        warehouses: {
          select: {
            id: true,
          },
        },

        warningAlert: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PersonalLoan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePersonalLoan(
    @common.Param() params: PersonalLoanWhereUniqueInput,
    @common.Body() data: PersonalLoanUpdateInput
  ): Promise<PersonalLoan | null> {
    try {
      return await this.service.updatePersonalLoan({
        where: params,
        data: {
          ...data,

          customers: {
            connect: data.customers,
          },

          users: {
            connect: data.users,
          },

          warehouses: {
            connect: data.warehouses,
          },
        },
        select: {
          codigoBloqueo: true,
          comentarios: true,

          customers: {
            select: {
              id: true,
            },
          },

          deletedUserId: true,
          desctoPagoOportuno: true,
          estatus_prestamo: true,
          fechaCancelacion: true,
          fechaPrestamo: true,
          fechaPrimerPago: true,
          fechaRegistro: true,
          id: true,
          montoFinanciado: true,
          montoPago: true,
          montoPagoInicial: true,
          plazo: true,
          requestedUserId: true,
          tasaInteres: true,
          tasaInteresAnual: true,
          telefonoEnvioToken: true,
          tipo_plazo: true,
          tokenEnviado: true,
          updatedAt: true,
          updatedUserId: true,

          users: {
            select: {
              id: true,
            },
          },

          validaciones_saltadas: true,
          vendorLock: true,

          warehouses: {
            select: {
              id: true,
            },
          },

          warningAlert: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PersonalLoan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePersonalLoan(
    @common.Param() params: PersonalLoanWhereUniqueInput
  ): Promise<PersonalLoan | null> {
    try {
      return await this.service.deletePersonalLoan({
        where: params,
        select: {
          codigoBloqueo: true,
          comentarios: true,

          customers: {
            select: {
              id: true,
            },
          },

          deletedUserId: true,
          desctoPagoOportuno: true,
          estatus_prestamo: true,
          fechaCancelacion: true,
          fechaPrestamo: true,
          fechaPrimerPago: true,
          fechaRegistro: true,
          id: true,
          montoFinanciado: true,
          montoPago: true,
          montoPagoInicial: true,
          plazo: true,
          requestedUserId: true,
          tasaInteres: true,
          tasaInteresAnual: true,
          telefonoEnvioToken: true,
          tipo_plazo: true,
          tokenEnviado: true,
          updatedAt: true,
          updatedUserId: true,

          users: {
            select: {
              id: true,
            },
          },

          validaciones_saltadas: true,
          vendorLock: true,

          warehouses: {
            select: {
              id: true,
            },
          },

          warningAlert: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/kardex")
  @ApiNestedQuery(KardexFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Kardex",
    action: "read",
    possession: "any",
  })
  async findKardex(
    @common.Req() request: Request,
    @common.Param() params: PersonalLoanWhereUniqueInput
  ): Promise<Kardex[]> {
    const query = plainToClass(KardexFindManyArgs, request.query);
    const results = await this.service.findKardex(params.id, {
      ...query,
      select: {
        cantUnidades: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        ivaUnidad: true,

        payments: {
          select: {
            id: true,
          },
        },

        personalLoans: {
          select: {
            id: true,
          },
        },

        precioUnidad: true,
        tipo_inventario: true,

        transactions: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "update",
    possession: "any",
  })
  async connectKardex(
    @common.Param() params: PersonalLoanWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        connect: body,
      },
    };
    await this.service.updatePersonalLoan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "update",
    possession: "any",
  })
  async updateKardex(
    @common.Param() params: PersonalLoanWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        set: body,
      },
    };
    await this.service.updatePersonalLoan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "update",
    possession: "any",
  })
  async disconnectKardex(
    @common.Param() params: PersonalLoanWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        disconnect: body,
      },
    };
    await this.service.updatePersonalLoan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: PersonalLoanWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        abonoExtra: true,
        cambioDevuelto: true,
        canceledUserId: true,
        cantidadRecibida: true,
        capitalPagado: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        comentariosPago: true,
        comprobantePago: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        customerId: true,
        desctoAplicado: true,
        desdeWebhook: true,
        fechaCancelo: true,
        fechaPago: true,
        fechaProxVenc: true,
        fechaVenc: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        formaPago: true,
        horaPago: true,
        id: true,
        interesPagado: true,
        opcionCambio: true,
        opcionPago: true,
        pagoRecurrente: true,
        pagosAdelantados: true,
        pathFileDiscount: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        payCount: true,
        pay_status: true,
        pay_type: true,
        percentageDiscountDownPayment: true,

        personalLoans: {
          select: {
            id: true,
          },
        },

        promotionId: true,
        receivedUserId: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "update",
    possession: "any",
  })
  async connectPayments(
    @common.Param() params: PersonalLoanWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updatePersonalLoan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "update",
    possession: "any",
  })
  async updatePayments(
    @common.Param() params: PersonalLoanWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updatePersonalLoan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "PersonalLoan",
    action: "update",
    possession: "any",
  })
  async disconnectPayments(
    @common.Param() params: PersonalLoanWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updatePersonalLoan({
      where: params,
      data,
      select: { id: true },
    });
  }
}
