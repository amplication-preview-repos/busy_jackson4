/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ModifiedPayment as PrismaModifiedPayment,
  FinancedSale as PrismaFinancedSale,
  Payment as PrismaPayment,
} from "@prisma/client";

export class ModifiedPaymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ModifiedPaymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.modifiedPayment.count(args);
  }

  async modifiedPayments<T extends Prisma.ModifiedPaymentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModifiedPaymentFindManyArgs>
  ): Promise<PrismaModifiedPayment[]> {
    return this.prisma.modifiedPayment.findMany<Prisma.ModifiedPaymentFindManyArgs>(
      args
    );
  }
  async modifiedPayment<T extends Prisma.ModifiedPaymentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModifiedPaymentFindUniqueArgs>
  ): Promise<PrismaModifiedPayment | null> {
    return this.prisma.modifiedPayment.findUnique(args);
  }
  async createModifiedPayment<T extends Prisma.ModifiedPaymentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModifiedPaymentCreateArgs>
  ): Promise<PrismaModifiedPayment> {
    return this.prisma.modifiedPayment.create<T>(args);
  }
  async updateModifiedPayment<T extends Prisma.ModifiedPaymentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModifiedPaymentUpdateArgs>
  ): Promise<PrismaModifiedPayment> {
    return this.prisma.modifiedPayment.update<T>(args);
  }
  async deleteModifiedPayment<T extends Prisma.ModifiedPaymentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModifiedPaymentDeleteArgs>
  ): Promise<PrismaModifiedPayment> {
    return this.prisma.modifiedPayment.delete(args);
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.modifiedPayment
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }

  async getPayments(parentId: number): Promise<PrismaPayment | null> {
    return this.prisma.modifiedPayment
      .findUnique({
        where: { id: parentId },
      })
      .payments();
  }
}
