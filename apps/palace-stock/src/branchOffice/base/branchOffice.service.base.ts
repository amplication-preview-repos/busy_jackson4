/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BranchOffice as PrismaBranchOffice,
  TransacError as PrismaTransacError,
  Transaction as PrismaTransaction,
  Warehouse as PrismaWarehouse,
  UserModel as PrismaUserModel,
} from "@prisma/client";

export class BranchOfficeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BranchOfficeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.branchOffice.count(args);
  }

  async branchOffices<T extends Prisma.BranchOfficeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BranchOfficeFindManyArgs>
  ): Promise<PrismaBranchOffice[]> {
    return this.prisma.branchOffice.findMany<Prisma.BranchOfficeFindManyArgs>(
      args
    );
  }
  async branchOffice<T extends Prisma.BranchOfficeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BranchOfficeFindUniqueArgs>
  ): Promise<PrismaBranchOffice | null> {
    return this.prisma.branchOffice.findUnique(args);
  }
  async createBranchOffice<T extends Prisma.BranchOfficeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BranchOfficeCreateArgs>
  ): Promise<PrismaBranchOffice> {
    return this.prisma.branchOffice.create<T>(args);
  }
  async updateBranchOffice<T extends Prisma.BranchOfficeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BranchOfficeUpdateArgs>
  ): Promise<PrismaBranchOffice> {
    return this.prisma.branchOffice.update<T>(args);
  }
  async deleteBranchOffice<T extends Prisma.BranchOfficeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BranchOfficeDeleteArgs>
  ): Promise<PrismaBranchOffice> {
    return this.prisma.branchOffice.delete(args);
  }

  async findTransacErrors(
    parentId: number,
    args: Prisma.TransacErrorFindManyArgs
  ): Promise<PrismaTransacError[]> {
    return this.prisma.branchOffice
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transacErrors(args);
  }

  async findTransactionsTransactionsAnotherBranchOfficeIdTobranchOffices(
    parentId: number,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.branchOffice
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactionsTransactionsAnotherBranchOfficeIdTobranchOffices(args);
  }

  async findTransactionsTransactionsBranchOfficeIdTobranchOffices(
    parentId: number,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.branchOffice
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactionsTransactionsBranchOfficeIdTobranchOffices(args);
  }

  async findWarehouses(
    parentId: number,
    args: Prisma.WarehouseFindManyArgs
  ): Promise<PrismaWarehouse[]> {
    return this.prisma.branchOffice
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .warehouses(args);
  }

  async getUsers(parentId: number): Promise<PrismaUserModel | null> {
    return this.prisma.branchOffice
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
