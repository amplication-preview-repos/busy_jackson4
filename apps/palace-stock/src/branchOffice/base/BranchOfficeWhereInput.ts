/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { IntFilter } from "../../util/IntFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { EnumBranchOfficeEstatusSucursal } from "./EnumBranchOfficeEstatusSucursal";
import { DateTimeFilter } from "../../util/DateTimeFilter";
import { TransacErrorListRelationFilter } from "../../transacError/base/TransacErrorListRelationFilter";
import { TransactionListRelationFilter } from "../../transaction/base/TransactionListRelationFilter";
import { UserModelWhereUniqueInput } from "../../userModel/base/UserModelWhereUniqueInput";
import { WarehouseListRelationFilter } from "../../warehouse/base/WarehouseListRelationFilter";

@InputType()
class BranchOfficeWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  branchName?: StringFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  branchNo?: IntFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  ciudadMunicipio?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  codigoPostal?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  direccion?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  estadoRepublica?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumBranchOfficeEstatusSucursal,
  })
  @IsEnum(EnumBranchOfficeEstatusSucursal)
  @IsOptional()
  @Field(() => EnumBranchOfficeEstatusSucursal, {
    nullable: true,
  })
  estatus_sucursal?: "A" | "I";

  @ApiProperty({
    required: false,
    type: DateTimeFilter,
  })
  @Type(() => DateTimeFilter)
  @IsOptional()
  @Field(() => DateTimeFilter, {
    nullable: true,
  })
  fechaRegistro?: DateTimeFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  id?: IntFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  region?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => TransacErrorListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TransacErrorListRelationFilter)
  @IsOptional()
  @Field(() => TransacErrorListRelationFilter, {
    nullable: true,
  })
  transacErrors?: TransacErrorListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TransactionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TransactionListRelationFilter)
  @IsOptional()
  @Field(() => TransactionListRelationFilter, {
    nullable: true,
  })
  transactionsTransactionsAnotherBranchOfficeIdTobranchOffices?: TransactionListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TransactionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TransactionListRelationFilter)
  @IsOptional()
  @Field(() => TransactionListRelationFilter, {
    nullable: true,
  })
  transactionsTransactionsBranchOfficeIdTobranchOffices?: TransactionListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserModelWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserModelWhereUniqueInput)
  @IsOptional()
  @Field(() => UserModelWhereUniqueInput, {
    nullable: true,
  })
  users?: UserModelWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => WarehouseListRelationFilter,
  })
  @ValidateNested()
  @Type(() => WarehouseListRelationFilter)
  @IsOptional()
  @Field(() => WarehouseListRelationFilter, {
    nullable: true,
  })
  warehouses?: WarehouseListRelationFilter;
}

export { BranchOfficeWhereInput as BranchOfficeWhereInput };
