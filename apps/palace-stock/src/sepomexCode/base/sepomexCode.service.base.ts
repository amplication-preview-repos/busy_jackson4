/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SepomexCode as PrismaSepomexCode } from "@prisma/client";

export class SepomexCodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SepomexCodeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sepomexCode.count(args);
  }

  async sepomexCodes<T extends Prisma.SepomexCodeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SepomexCodeFindManyArgs>
  ): Promise<PrismaSepomexCode[]> {
    return this.prisma.sepomexCode.findMany<Prisma.SepomexCodeFindManyArgs>(
      args
    );
  }
  async sepomexCode<T extends Prisma.SepomexCodeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SepomexCodeFindUniqueArgs>
  ): Promise<PrismaSepomexCode | null> {
    return this.prisma.sepomexCode.findUnique(args);
  }
  async createSepomexCode<T extends Prisma.SepomexCodeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SepomexCodeCreateArgs>
  ): Promise<PrismaSepomexCode> {
    return this.prisma.sepomexCode.create<T>(args);
  }
  async updateSepomexCode<T extends Prisma.SepomexCodeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SepomexCodeUpdateArgs>
  ): Promise<PrismaSepomexCode> {
    return this.prisma.sepomexCode.update<T>(args);
  }
  async deleteSepomexCode<T extends Prisma.SepomexCodeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SepomexCodeDeleteArgs>
  ): Promise<PrismaSepomexCode> {
    return this.prisma.sepomexCode.delete(args);
  }
}
