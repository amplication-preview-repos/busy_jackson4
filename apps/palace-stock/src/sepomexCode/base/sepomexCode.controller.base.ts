/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SepomexCodeService } from "../sepomexCode.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SepomexCodeCreateInput } from "./SepomexCodeCreateInput";
import { SepomexCode } from "./SepomexCode";
import { SepomexCodeFindManyArgs } from "./SepomexCodeFindManyArgs";
import { SepomexCodeWhereUniqueInput } from "./SepomexCodeWhereUniqueInput";
import { SepomexCodeUpdateInput } from "./SepomexCodeUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SepomexCodeControllerBase {
  constructor(
    protected readonly service: SepomexCodeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SepomexCode })
  @nestAccessControl.UseRoles({
    resource: "SepomexCode",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSepomexCode(
    @common.Body() data: SepomexCodeCreateInput
  ): Promise<SepomexCode> {
    return await this.service.createSepomexCode({
      data: data,
      select: {
        cCp: true,
        cCveCiudad: true,
        cEstado: true,
        cMnpio: true,
        cOficina: true,
        cTipoAsenta: true,
        dAsenta: true,
        dCiudad: true,
        dCodigo: true,
        dCp: true,
        dEstado: true,
        dMnpio: true,
        dTipoAsenta: true,
        d_zona: true,
        id: true,
        idAsentaCpcons: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SepomexCode] })
  @ApiNestedQuery(SepomexCodeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SepomexCode",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sepomexCodes(@common.Req() request: Request): Promise<SepomexCode[]> {
    const args = plainToClass(SepomexCodeFindManyArgs, request.query);
    return this.service.sepomexCodes({
      ...args,
      select: {
        cCp: true,
        cCveCiudad: true,
        cEstado: true,
        cMnpio: true,
        cOficina: true,
        cTipoAsenta: true,
        dAsenta: true,
        dCiudad: true,
        dCodigo: true,
        dCp: true,
        dEstado: true,
        dMnpio: true,
        dTipoAsenta: true,
        d_zona: true,
        id: true,
        idAsentaCpcons: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SepomexCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SepomexCode",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sepomexCode(
    @common.Param() params: SepomexCodeWhereUniqueInput
  ): Promise<SepomexCode | null> {
    const result = await this.service.sepomexCode({
      where: params,
      select: {
        cCp: true,
        cCveCiudad: true,
        cEstado: true,
        cMnpio: true,
        cOficina: true,
        cTipoAsenta: true,
        dAsenta: true,
        dCiudad: true,
        dCodigo: true,
        dCp: true,
        dEstado: true,
        dMnpio: true,
        dTipoAsenta: true,
        d_zona: true,
        id: true,
        idAsentaCpcons: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SepomexCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SepomexCode",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSepomexCode(
    @common.Param() params: SepomexCodeWhereUniqueInput,
    @common.Body() data: SepomexCodeUpdateInput
  ): Promise<SepomexCode | null> {
    try {
      return await this.service.updateSepomexCode({
        where: params,
        data: data,
        select: {
          cCp: true,
          cCveCiudad: true,
          cEstado: true,
          cMnpio: true,
          cOficina: true,
          cTipoAsenta: true,
          dAsenta: true,
          dCiudad: true,
          dCodigo: true,
          dCp: true,
          dEstado: true,
          dMnpio: true,
          dTipoAsenta: true,
          d_zona: true,
          id: true,
          idAsentaCpcons: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SepomexCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SepomexCode",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSepomexCode(
    @common.Param() params: SepomexCodeWhereUniqueInput
  ): Promise<SepomexCode | null> {
    try {
      return await this.service.deleteSepomexCode({
        where: params,
        select: {
          cCp: true,
          cCveCiudad: true,
          cEstado: true,
          cMnpio: true,
          cOficina: true,
          cTipoAsenta: true,
          dAsenta: true,
          dCiudad: true,
          dCodigo: true,
          dCp: true,
          dEstado: true,
          dMnpio: true,
          dTipoAsenta: true,
          d_zona: true,
          id: true,
          idAsentaCpcons: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
