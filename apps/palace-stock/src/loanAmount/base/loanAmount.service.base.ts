/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LoanAmount as PrismaLoanAmount,
  WarehouseLoanAmount as PrismaWarehouseLoanAmount,
} from "@prisma/client";

export class LoanAmountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LoanAmountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.loanAmount.count(args);
  }

  async loanAmounts<T extends Prisma.LoanAmountFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanAmountFindManyArgs>
  ): Promise<PrismaLoanAmount[]> {
    return this.prisma.loanAmount.findMany<Prisma.LoanAmountFindManyArgs>(args);
  }
  async loanAmount<T extends Prisma.LoanAmountFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanAmountFindUniqueArgs>
  ): Promise<PrismaLoanAmount | null> {
    return this.prisma.loanAmount.findUnique(args);
  }
  async createLoanAmount<T extends Prisma.LoanAmountCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanAmountCreateArgs>
  ): Promise<PrismaLoanAmount> {
    return this.prisma.loanAmount.create<T>(args);
  }
  async updateLoanAmount<T extends Prisma.LoanAmountUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanAmountUpdateArgs>
  ): Promise<PrismaLoanAmount> {
    return this.prisma.loanAmount.update<T>(args);
  }
  async deleteLoanAmount<T extends Prisma.LoanAmountDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanAmountDeleteArgs>
  ): Promise<PrismaLoanAmount> {
    return this.prisma.loanAmount.delete(args);
  }

  async findWarehouseLoanAmounts(
    parentId: number,
    args: Prisma.WarehouseLoanAmountFindManyArgs
  ): Promise<PrismaWarehouseLoanAmount[]> {
    return this.prisma.loanAmount
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .warehouseLoanAmounts(args);
  }
}
