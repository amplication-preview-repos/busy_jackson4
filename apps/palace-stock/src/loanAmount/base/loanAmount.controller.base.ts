/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { LoanAmountService } from "../loanAmount.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { LoanAmountCreateInput } from "./LoanAmountCreateInput";
import { LoanAmount } from "./LoanAmount";
import { LoanAmountFindManyArgs } from "./LoanAmountFindManyArgs";
import { LoanAmountWhereUniqueInput } from "./LoanAmountWhereUniqueInput";
import { LoanAmountUpdateInput } from "./LoanAmountUpdateInput";
import { WarehouseLoanAmountFindManyArgs } from "../../warehouseLoanAmount/base/WarehouseLoanAmountFindManyArgs";
import { WarehouseLoanAmount } from "../../warehouseLoanAmount/base/WarehouseLoanAmount";
import { WarehouseLoanAmountWhereUniqueInput } from "../../warehouseLoanAmount/base/WarehouseLoanAmountWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class LoanAmountControllerBase {
  constructor(
    protected readonly service: LoanAmountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LoanAmount })
  @nestAccessControl.UseRoles({
    resource: "LoanAmount",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createLoanAmount(
    @common.Body() data: LoanAmountCreateInput
  ): Promise<LoanAmount> {
    return await this.service.createLoanAmount({
      data: data,
      select: {
        amount: true,
        id: true,
        loyaltyPromotion: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [LoanAmount] })
  @ApiNestedQuery(LoanAmountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LoanAmount",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async loanAmounts(@common.Req() request: Request): Promise<LoanAmount[]> {
    const args = plainToClass(LoanAmountFindManyArgs, request.query);
    return this.service.loanAmounts({
      ...args,
      select: {
        amount: true,
        id: true,
        loyaltyPromotion: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LoanAmount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "LoanAmount",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async loanAmount(
    @common.Param() params: LoanAmountWhereUniqueInput
  ): Promise<LoanAmount | null> {
    const result = await this.service.loanAmount({
      where: params,
      select: {
        amount: true,
        id: true,
        loyaltyPromotion: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LoanAmount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "LoanAmount",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateLoanAmount(
    @common.Param() params: LoanAmountWhereUniqueInput,
    @common.Body() data: LoanAmountUpdateInput
  ): Promise<LoanAmount | null> {
    try {
      return await this.service.updateLoanAmount({
        where: params,
        data: data,
        select: {
          amount: true,
          id: true,
          loyaltyPromotion: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LoanAmount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "LoanAmount",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteLoanAmount(
    @common.Param() params: LoanAmountWhereUniqueInput
  ): Promise<LoanAmount | null> {
    try {
      return await this.service.deleteLoanAmount({
        where: params,
        select: {
          amount: true,
          id: true,
          loyaltyPromotion: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/warehouseLoanAmounts")
  @ApiNestedQuery(WarehouseLoanAmountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WarehouseLoanAmount",
    action: "read",
    possession: "any",
  })
  async findWarehouseLoanAmounts(
    @common.Req() request: Request,
    @common.Param() params: LoanAmountWhereUniqueInput
  ): Promise<WarehouseLoanAmount[]> {
    const query = plainToClass(WarehouseLoanAmountFindManyArgs, request.query);
    const results = await this.service.findWarehouseLoanAmounts(params.id, {
      ...query,
      select: {
        id: true,

        loanAmounts: {
          select: {
            id: true,
          },
        },

        loyaltyPromotion: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseLoanAmounts")
  @nestAccessControl.UseRoles({
    resource: "LoanAmount",
    action: "update",
    possession: "any",
  })
  async connectWarehouseLoanAmounts(
    @common.Param() params: LoanAmountWhereUniqueInput,
    @common.Body() body: WarehouseLoanAmountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseLoanAmounts: {
        connect: body,
      },
    };
    await this.service.updateLoanAmount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseLoanAmounts")
  @nestAccessControl.UseRoles({
    resource: "LoanAmount",
    action: "update",
    possession: "any",
  })
  async updateWarehouseLoanAmounts(
    @common.Param() params: LoanAmountWhereUniqueInput,
    @common.Body() body: WarehouseLoanAmountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseLoanAmounts: {
        set: body,
      },
    };
    await this.service.updateLoanAmount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseLoanAmounts")
  @nestAccessControl.UseRoles({
    resource: "LoanAmount",
    action: "update",
    possession: "any",
  })
  async disconnectWarehouseLoanAmounts(
    @common.Param() params: LoanAmountWhereUniqueInput,
    @common.Body() body: WarehouseLoanAmountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseLoanAmounts: {
        disconnect: body,
      },
    };
    await this.service.updateLoanAmount({
      where: params,
      data,
      select: { id: true },
    });
  }
}
