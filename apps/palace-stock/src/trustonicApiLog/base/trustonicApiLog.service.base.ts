/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TrustonicApiLog as PrismaTrustonicApiLog,
} from "@prisma/client";

export class TrustonicApiLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrustonicApiLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trustonicApiLog.count(args);
  }

  async trustonicApiLogs<T extends Prisma.TrustonicApiLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrustonicApiLogFindManyArgs>
  ): Promise<PrismaTrustonicApiLog[]> {
    return this.prisma.trustonicApiLog.findMany<Prisma.TrustonicApiLogFindManyArgs>(
      args
    );
  }
  async trustonicApiLog<T extends Prisma.TrustonicApiLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrustonicApiLogFindUniqueArgs>
  ): Promise<PrismaTrustonicApiLog | null> {
    return this.prisma.trustonicApiLog.findUnique(args);
  }
  async createTrustonicApiLog<T extends Prisma.TrustonicApiLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrustonicApiLogCreateArgs>
  ): Promise<PrismaTrustonicApiLog> {
    return this.prisma.trustonicApiLog.create<T>(args);
  }
  async updateTrustonicApiLog<T extends Prisma.TrustonicApiLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrustonicApiLogUpdateArgs>
  ): Promise<PrismaTrustonicApiLog> {
    return this.prisma.trustonicApiLog.update<T>(args);
  }
  async deleteTrustonicApiLog<T extends Prisma.TrustonicApiLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TrustonicApiLogDeleteArgs>
  ): Promise<PrismaTrustonicApiLog> {
    return this.prisma.trustonicApiLog.delete(args);
  }
}
