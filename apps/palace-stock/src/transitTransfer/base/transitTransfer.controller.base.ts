/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TransitTransferService } from "../transitTransfer.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TransitTransferCreateInput } from "./TransitTransferCreateInput";
import { TransitTransfer } from "./TransitTransfer";
import { TransitTransferFindManyArgs } from "./TransitTransferFindManyArgs";
import { TransitTransferWhereUniqueInput } from "./TransitTransferWhereUniqueInput";
import { TransitTransferUpdateInput } from "./TransitTransferUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TransitTransferControllerBase {
  constructor(
    protected readonly service: TransitTransferService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TransitTransfer })
  @nestAccessControl.UseRoles({
    resource: "TransitTransfer",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTransitTransfer(
    @common.Body() data: TransitTransferCreateInput
  ): Promise<TransitTransfer> {
    return await this.service.createTransitTransfer({
      data: {
        ...data,

        transactions: data.transactions
          ? {
              connect: data.transactions,
            }
          : undefined,
      },
      select: {
        id: true,

        transactions: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TransitTransfer] })
  @ApiNestedQuery(TransitTransferFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TransitTransfer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async transitTransfers(
    @common.Req() request: Request
  ): Promise<TransitTransfer[]> {
    const args = plainToClass(TransitTransferFindManyArgs, request.query);
    return this.service.transitTransfers({
      ...args,
      select: {
        id: true,

        transactions: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TransitTransfer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TransitTransfer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async transitTransfer(
    @common.Param() params: TransitTransferWhereUniqueInput
  ): Promise<TransitTransfer | null> {
    const result = await this.service.transitTransfer({
      where: params,
      select: {
        id: true,

        transactions: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TransitTransfer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TransitTransfer",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTransitTransfer(
    @common.Param() params: TransitTransferWhereUniqueInput,
    @common.Body() data: TransitTransferUpdateInput
  ): Promise<TransitTransfer | null> {
    try {
      return await this.service.updateTransitTransfer({
        where: params,
        data: {
          ...data,

          transactions: data.transactions
            ? {
                connect: data.transactions,
              }
            : undefined,
        },
        select: {
          id: true,

          transactions: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TransitTransfer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TransitTransfer",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTransitTransfer(
    @common.Param() params: TransitTransferWhereUniqueInput
  ): Promise<TransitTransfer | null> {
    try {
      return await this.service.deleteTransitTransfer({
        where: params,
        select: {
          id: true,

          transactions: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
