/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TransitTransfer as PrismaTransitTransfer,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class TransitTransferServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransitTransferCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transitTransfer.count(args);
  }

  async transitTransfers<T extends Prisma.TransitTransferFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransitTransferFindManyArgs>
  ): Promise<PrismaTransitTransfer[]> {
    return this.prisma.transitTransfer.findMany<Prisma.TransitTransferFindManyArgs>(
      args
    );
  }
  async transitTransfer<T extends Prisma.TransitTransferFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransitTransferFindUniqueArgs>
  ): Promise<PrismaTransitTransfer | null> {
    return this.prisma.transitTransfer.findUnique(args);
  }
  async createTransitTransfer<T extends Prisma.TransitTransferCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransitTransferCreateArgs>
  ): Promise<PrismaTransitTransfer> {
    return this.prisma.transitTransfer.create<T>(args);
  }
  async updateTransitTransfer<T extends Prisma.TransitTransferUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransitTransferUpdateArgs>
  ): Promise<PrismaTransitTransfer> {
    return this.prisma.transitTransfer.update<T>(args);
  }
  async deleteTransitTransfer<T extends Prisma.TransitTransferDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransitTransferDeleteArgs>
  ): Promise<PrismaTransitTransfer> {
    return this.prisma.transitTransfer.delete(args);
  }

  async getTransactions(parentId: number): Promise<PrismaTransaction | null> {
    return this.prisma.transitTransfer
      .findUnique({
        where: { id: parentId },
      })
      .transactions();
  }
}
