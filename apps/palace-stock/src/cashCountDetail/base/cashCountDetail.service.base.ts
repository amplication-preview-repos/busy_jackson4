/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CashCountDetail as PrismaCashCountDetail,
  CashCount as PrismaCashCount,
  CashSale as PrismaCashSale,
  FinancedSale as PrismaFinancedSale,
  Payment as PrismaPayment,
} from "@prisma/client";

export class CashCountDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CashCountDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cashCountDetail.count(args);
  }

  async cashCountDetails<T extends Prisma.CashCountDetailFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashCountDetailFindManyArgs>
  ): Promise<PrismaCashCountDetail[]> {
    return this.prisma.cashCountDetail.findMany<Prisma.CashCountDetailFindManyArgs>(
      args
    );
  }
  async cashCountDetail<T extends Prisma.CashCountDetailFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashCountDetailFindUniqueArgs>
  ): Promise<PrismaCashCountDetail | null> {
    return this.prisma.cashCountDetail.findUnique(args);
  }
  async createCashCountDetail<T extends Prisma.CashCountDetailCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashCountDetailCreateArgs>
  ): Promise<PrismaCashCountDetail> {
    return this.prisma.cashCountDetail.create<T>(args);
  }
  async updateCashCountDetail<T extends Prisma.CashCountDetailUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashCountDetailUpdateArgs>
  ): Promise<PrismaCashCountDetail> {
    return this.prisma.cashCountDetail.update<T>(args);
  }
  async deleteCashCountDetail<T extends Prisma.CashCountDetailDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashCountDetailDeleteArgs>
  ): Promise<PrismaCashCountDetail> {
    return this.prisma.cashCountDetail.delete(args);
  }

  async getCashCounts(parentId: number): Promise<PrismaCashCount | null> {
    return this.prisma.cashCountDetail
      .findUnique({
        where: { id: parentId },
      })
      .cashCounts();
  }

  async getCashSales(parentId: number): Promise<PrismaCashSale | null> {
    return this.prisma.cashCountDetail
      .findUnique({
        where: { id: parentId },
      })
      .cashSales();
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.cashCountDetail
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }

  async getPayments(parentId: number): Promise<PrismaPayment | null> {
    return this.prisma.cashCountDetail
      .findUnique({
        where: { id: parentId },
      })
      .payments();
  }
}
