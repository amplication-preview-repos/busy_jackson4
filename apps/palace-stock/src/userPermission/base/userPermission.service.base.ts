/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserPermission as PrismaUserPermission,
  Permission as PrismaPermission,
  UserModel as PrismaUserModel,
} from "@prisma/client";

export class UserPermissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserPermissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userPermission.count(args);
  }

  async userPermissions<T extends Prisma.UserPermissionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserPermissionFindManyArgs>
  ): Promise<PrismaUserPermission[]> {
    return this.prisma.userPermission.findMany<Prisma.UserPermissionFindManyArgs>(
      args
    );
  }
  async userPermission<T extends Prisma.UserPermissionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserPermissionFindUniqueArgs>
  ): Promise<PrismaUserPermission | null> {
    return this.prisma.userPermission.findUnique(args);
  }
  async createUserPermission<T extends Prisma.UserPermissionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserPermissionCreateArgs>
  ): Promise<PrismaUserPermission> {
    return this.prisma.userPermission.create<T>(args);
  }
  async updateUserPermission<T extends Prisma.UserPermissionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserPermissionUpdateArgs>
  ): Promise<PrismaUserPermission> {
    return this.prisma.userPermission.update<T>(args);
  }
  async deleteUserPermission<T extends Prisma.UserPermissionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserPermissionDeleteArgs>
  ): Promise<PrismaUserPermission> {
    return this.prisma.userPermission.delete(args);
  }

  async getPermissions(parentId: number): Promise<PrismaPermission | null> {
    return this.prisma.userPermission
      .findUnique({
        where: { id: parentId },
      })
      .permissions();
  }

  async getUsers(parentId: number): Promise<PrismaUserModel | null> {
    return this.prisma.userPermission
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
