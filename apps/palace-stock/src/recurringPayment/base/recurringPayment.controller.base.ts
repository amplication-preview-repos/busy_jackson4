/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RecurringPaymentService } from "../recurringPayment.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RecurringPaymentCreateInput } from "./RecurringPaymentCreateInput";
import { RecurringPayment } from "./RecurringPayment";
import { RecurringPaymentFindManyArgs } from "./RecurringPaymentFindManyArgs";
import { RecurringPaymentWhereUniqueInput } from "./RecurringPaymentWhereUniqueInput";
import { RecurringPaymentUpdateInput } from "./RecurringPaymentUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RecurringPaymentControllerBase {
  constructor(
    protected readonly service: RecurringPaymentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecurringPayment })
  @nestAccessControl.UseRoles({
    resource: "RecurringPayment",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRecurringPayment(
    @common.Body() data: RecurringPaymentCreateInput
  ): Promise<RecurringPayment> {
    return await this.service.createRecurringPayment({
      data: {
        ...data,

        conektaPaymentTransacs: data.conektaPaymentTransacs
          ? {
              connect: data.conektaPaymentTransacs,
            }
          : undefined,

        financedSales: {
          connect: data.financedSales,
        },

        paycodePaymentTransacs: data.paycodePaymentTransacs
          ? {
              connect: data.paycodePaymentTransacs,
            }
          : undefined,

        stripePaymentTransacs: data.stripePaymentTransacs
          ? {
              connect: data.stripePaymentTransacs,
            }
          : undefined,
      },
      select: {
        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        estatus_intento: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        horaRegistro: true,
        id: true,
        mensajeIntento: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [RecurringPayment] })
  @ApiNestedQuery(RecurringPaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RecurringPayment",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async recurringPayments(
    @common.Req() request: Request
  ): Promise<RecurringPayment[]> {
    const args = plainToClass(RecurringPaymentFindManyArgs, request.query);
    return this.service.recurringPayments({
      ...args,
      select: {
        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        estatus_intento: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        horaRegistro: true,
        id: true,
        mensajeIntento: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecurringPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RecurringPayment",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async recurringPayment(
    @common.Param() params: RecurringPaymentWhereUniqueInput
  ): Promise<RecurringPayment | null> {
    const result = await this.service.recurringPayment({
      where: params,
      select: {
        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        estatus_intento: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        horaRegistro: true,
        id: true,
        mensajeIntento: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecurringPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RecurringPayment",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRecurringPayment(
    @common.Param() params: RecurringPaymentWhereUniqueInput,
    @common.Body() data: RecurringPaymentUpdateInput
  ): Promise<RecurringPayment | null> {
    try {
      return await this.service.updateRecurringPayment({
        where: params,
        data: {
          ...data,

          conektaPaymentTransacs: data.conektaPaymentTransacs
            ? {
                connect: data.conektaPaymentTransacs,
              }
            : undefined,

          financedSales: {
            connect: data.financedSales,
          },

          paycodePaymentTransacs: data.paycodePaymentTransacs
            ? {
                connect: data.paycodePaymentTransacs,
              }
            : undefined,

          stripePaymentTransacs: data.stripePaymentTransacs
            ? {
                connect: data.stripePaymentTransacs,
              }
            : undefined,
        },
        select: {
          conektaPaymentTransacs: {
            select: {
              id: true,
            },
          },

          estatus_intento: true,
          fechaRegistro: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          horaRegistro: true,
          id: true,
          mensajeIntento: true,

          paycodePaymentTransacs: {
            select: {
              id: true,
            },
          },

          stripePaymentTransacs: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecurringPayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RecurringPayment",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRecurringPayment(
    @common.Param() params: RecurringPaymentWhereUniqueInput
  ): Promise<RecurringPayment | null> {
    try {
      return await this.service.deleteRecurringPayment({
        where: params,
        select: {
          conektaPaymentTransacs: {
            select: {
              id: true,
            },
          },

          estatus_intento: true,
          fechaRegistro: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          horaRegistro: true,
          id: true,
          mensajeIntento: true,

          paycodePaymentTransacs: {
            select: {
              id: true,
            },
          },

          stripePaymentTransacs: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
