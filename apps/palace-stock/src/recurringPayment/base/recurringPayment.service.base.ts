/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RecurringPayment as PrismaRecurringPayment,
  ConektaPaymentTransac as PrismaConektaPaymentTransac,
  FinancedSale as PrismaFinancedSale,
  PaycodePaymentTransac as PrismaPaycodePaymentTransac,
  StripePaymentTransac as PrismaStripePaymentTransac,
} from "@prisma/client";

export class RecurringPaymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecurringPaymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recurringPayment.count(args);
  }

  async recurringPayments<T extends Prisma.RecurringPaymentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecurringPaymentFindManyArgs>
  ): Promise<PrismaRecurringPayment[]> {
    return this.prisma.recurringPayment.findMany<Prisma.RecurringPaymentFindManyArgs>(
      args
    );
  }
  async recurringPayment<T extends Prisma.RecurringPaymentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecurringPaymentFindUniqueArgs>
  ): Promise<PrismaRecurringPayment | null> {
    return this.prisma.recurringPayment.findUnique(args);
  }
  async createRecurringPayment<T extends Prisma.RecurringPaymentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecurringPaymentCreateArgs>
  ): Promise<PrismaRecurringPayment> {
    return this.prisma.recurringPayment.create<T>(args);
  }
  async updateRecurringPayment<T extends Prisma.RecurringPaymentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecurringPaymentUpdateArgs>
  ): Promise<PrismaRecurringPayment> {
    return this.prisma.recurringPayment.update<T>(args);
  }
  async deleteRecurringPayment<T extends Prisma.RecurringPaymentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecurringPaymentDeleteArgs>
  ): Promise<PrismaRecurringPayment> {
    return this.prisma.recurringPayment.delete(args);
  }

  async getConektaPaymentTransacs(
    parentId: number
  ): Promise<PrismaConektaPaymentTransac | null> {
    return this.prisma.recurringPayment
      .findUnique({
        where: { id: parentId },
      })
      .conektaPaymentTransacs();
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.recurringPayment
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }

  async getPaycodePaymentTransacs(
    parentId: number
  ): Promise<PrismaPaycodePaymentTransac | null> {
    return this.prisma.recurringPayment
      .findUnique({
        where: { id: parentId },
      })
      .paycodePaymentTransacs();
  }

  async getStripePaymentTransacs(
    parentId: number
  ): Promise<PrismaStripePaymentTransac | null> {
    return this.prisma.recurringPayment
      .findUnique({
        where: { id: parentId },
      })
      .stripePaymentTransacs();
  }
}
