/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StockSery as PrismaStockSery,
  Item as PrismaItem,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class StockSeryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StockSeryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.stockSery.count(args);
  }

  async stockSeries<T extends Prisma.StockSeryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockSeryFindManyArgs>
  ): Promise<PrismaStockSery[]> {
    return this.prisma.stockSery.findMany<Prisma.StockSeryFindManyArgs>(args);
  }
  async stockSery<T extends Prisma.StockSeryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockSeryFindUniqueArgs>
  ): Promise<PrismaStockSery | null> {
    return this.prisma.stockSery.findUnique(args);
  }
  async createStockSery<T extends Prisma.StockSeryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockSeryCreateArgs>
  ): Promise<PrismaStockSery> {
    return this.prisma.stockSery.create<T>(args);
  }
  async updateStockSery<T extends Prisma.StockSeryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockSeryUpdateArgs>
  ): Promise<PrismaStockSery> {
    return this.prisma.stockSery.update<T>(args);
  }
  async deleteStockSery<T extends Prisma.StockSeryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockSeryDeleteArgs>
  ): Promise<PrismaStockSery> {
    return this.prisma.stockSery.delete(args);
  }

  async getItems(parentId: number): Promise<PrismaItem | null> {
    return this.prisma.stockSery
      .findUnique({
        where: { id: parentId },
      })
      .items();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.stockSery
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
