/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StripePaymentTransac as PrismaStripePaymentTransac,
  OtherCompaniesPayment as PrismaOtherCompaniesPayment,
  Payment as PrismaPayment,
  RecurringPayment as PrismaRecurringPayment,
  StripeApiLog as PrismaStripeApiLog,
  FinancedSale as PrismaFinancedSale,
} from "@prisma/client";

export class StripePaymentTransacServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StripePaymentTransacCountArgs, "select">
  ): Promise<number> {
    return this.prisma.stripePaymentTransac.count(args);
  }

  async stripePaymentTransacs<
    T extends Prisma.StripePaymentTransacFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StripePaymentTransacFindManyArgs>
  ): Promise<PrismaStripePaymentTransac[]> {
    return this.prisma.stripePaymentTransac.findMany<Prisma.StripePaymentTransacFindManyArgs>(
      args
    );
  }
  async stripePaymentTransac<
    T extends Prisma.StripePaymentTransacFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StripePaymentTransacFindUniqueArgs>
  ): Promise<PrismaStripePaymentTransac | null> {
    return this.prisma.stripePaymentTransac.findUnique(args);
  }
  async createStripePaymentTransac<
    T extends Prisma.StripePaymentTransacCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StripePaymentTransacCreateArgs>
  ): Promise<PrismaStripePaymentTransac> {
    return this.prisma.stripePaymentTransac.create<T>(args);
  }
  async updateStripePaymentTransac<
    T extends Prisma.StripePaymentTransacUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StripePaymentTransacUpdateArgs>
  ): Promise<PrismaStripePaymentTransac> {
    return this.prisma.stripePaymentTransac.update<T>(args);
  }
  async deleteStripePaymentTransac<
    T extends Prisma.StripePaymentTransacDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.StripePaymentTransacDeleteArgs>
  ): Promise<PrismaStripePaymentTransac> {
    return this.prisma.stripePaymentTransac.delete(args);
  }

  async findOtherCompaniesPayments(
    parentId: number,
    args: Prisma.OtherCompaniesPaymentFindManyArgs
  ): Promise<PrismaOtherCompaniesPayment[]> {
    return this.prisma.stripePaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .otherCompaniesPayments(args);
  }

  async findPayments(
    parentId: number,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.stripePaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async findRecurringPayments(
    parentId: number,
    args: Prisma.RecurringPaymentFindManyArgs
  ): Promise<PrismaRecurringPayment[]> {
    return this.prisma.stripePaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recurringPayments(args);
  }

  async findStripeApiLog(
    parentId: number,
    args: Prisma.StripeApiLogFindManyArgs
  ): Promise<PrismaStripeApiLog[]> {
    return this.prisma.stripePaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .stripeApiLog(args);
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.stripePaymentTransac
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }
}
