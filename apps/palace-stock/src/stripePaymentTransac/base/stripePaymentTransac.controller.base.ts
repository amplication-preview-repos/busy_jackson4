/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { StripePaymentTransacService } from "../stripePaymentTransac.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { StripePaymentTransacCreateInput } from "./StripePaymentTransacCreateInput";
import { StripePaymentTransac } from "./StripePaymentTransac";
import { StripePaymentTransacFindManyArgs } from "./StripePaymentTransacFindManyArgs";
import { StripePaymentTransacWhereUniqueInput } from "./StripePaymentTransacWhereUniqueInput";
import { StripePaymentTransacUpdateInput } from "./StripePaymentTransacUpdateInput";
import { OtherCompaniesPaymentFindManyArgs } from "../../otherCompaniesPayment/base/OtherCompaniesPaymentFindManyArgs";
import { OtherCompaniesPayment } from "../../otherCompaniesPayment/base/OtherCompaniesPayment";
import { OtherCompaniesPaymentWhereUniqueInput } from "../../otherCompaniesPayment/base/OtherCompaniesPaymentWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { RecurringPaymentFindManyArgs } from "../../recurringPayment/base/RecurringPaymentFindManyArgs";
import { RecurringPayment } from "../../recurringPayment/base/RecurringPayment";
import { RecurringPaymentWhereUniqueInput } from "../../recurringPayment/base/RecurringPaymentWhereUniqueInput";
import { StripeApiLogFindManyArgs } from "../../stripeApiLog/base/StripeApiLogFindManyArgs";
import { StripeApiLog } from "../../stripeApiLog/base/StripeApiLog";
import { StripeApiLogWhereUniqueInput } from "../../stripeApiLog/base/StripeApiLogWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class StripePaymentTransacControllerBase {
  constructor(
    protected readonly service: StripePaymentTransacService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StripePaymentTransac })
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createStripePaymentTransac(
    @common.Body() data: StripePaymentTransacCreateInput
  ): Promise<StripePaymentTransac> {
    return await this.service.createStripePaymentTransac({
      data: {
        ...data,

        financedSales: {
          connect: data.financedSales,
        },
      },
      select: {
        amount: true,
        created: true,
        datosPago: true,
        eventStatus: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        habilitarPagoRecurrente: true,
        id: true,
        linkVoucher: true,
        metodoPago: true,
        paymentIntent: true,
        stripeClientSecret: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [StripePaymentTransac] })
  @ApiNestedQuery(StripePaymentTransacFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async stripePaymentTransacs(
    @common.Req() request: Request
  ): Promise<StripePaymentTransac[]> {
    const args = plainToClass(StripePaymentTransacFindManyArgs, request.query);
    return this.service.stripePaymentTransacs({
      ...args,
      select: {
        amount: true,
        created: true,
        datosPago: true,
        eventStatus: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        habilitarPagoRecurrente: true,
        id: true,
        linkVoucher: true,
        metodoPago: true,
        paymentIntent: true,
        stripeClientSecret: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StripePaymentTransac })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async stripePaymentTransac(
    @common.Param() params: StripePaymentTransacWhereUniqueInput
  ): Promise<StripePaymentTransac | null> {
    const result = await this.service.stripePaymentTransac({
      where: params,
      select: {
        amount: true,
        created: true,
        datosPago: true,
        eventStatus: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        habilitarPagoRecurrente: true,
        id: true,
        linkVoucher: true,
        metodoPago: true,
        paymentIntent: true,
        stripeClientSecret: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StripePaymentTransac })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateStripePaymentTransac(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() data: StripePaymentTransacUpdateInput
  ): Promise<StripePaymentTransac | null> {
    try {
      return await this.service.updateStripePaymentTransac({
        where: params,
        data: {
          ...data,

          financedSales: {
            connect: data.financedSales,
          },
        },
        select: {
          amount: true,
          created: true,
          datosPago: true,
          eventStatus: true,
          fechaRegistro: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          habilitarPagoRecurrente: true,
          id: true,
          linkVoucher: true,
          metodoPago: true,
          paymentIntent: true,
          stripeClientSecret: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StripePaymentTransac })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteStripePaymentTransac(
    @common.Param() params: StripePaymentTransacWhereUniqueInput
  ): Promise<StripePaymentTransac | null> {
    try {
      return await this.service.deleteStripePaymentTransac({
        where: params,
        select: {
          amount: true,
          created: true,
          datosPago: true,
          eventStatus: true,
          fechaRegistro: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          habilitarPagoRecurrente: true,
          id: true,
          linkVoucher: true,
          metodoPago: true,
          paymentIntent: true,
          stripeClientSecret: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/otherCompaniesPayments")
  @ApiNestedQuery(OtherCompaniesPaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OtherCompaniesPayment",
    action: "read",
    possession: "any",
  })
  async findOtherCompaniesPayments(
    @common.Req() request: Request,
    @common.Param() params: StripePaymentTransacWhereUniqueInput
  ): Promise<OtherCompaniesPayment[]> {
    const query = plainToClass(
      OtherCompaniesPaymentFindManyArgs,
      request.query
    );
    const results = await this.service.findOtherCompaniesPayments(params.id, {
      ...query,
      select: {
        abonoExtra: true,
        cambioDevuelto: true,
        cantidadRecibida: true,
        capitalPagado: true,
        codigoBloqueo: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        desctoAplicado: true,
        desdeWebhook: true,
        estatus_pago: true,
        fechaPago: true,
        fechaProxVenc: true,
        fechaVenc: true,
        formaPago: true,
        horaPago: true,
        id: true,
        interesPagado: true,
        numPago: true,
        opcionCambio: true,
        opcionPago: true,
        pagosAdelantados: true,
        receivedUserId: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },

        tipo_pago: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/otherCompaniesPayments")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async connectOtherCompaniesPayments(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: OtherCompaniesPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherCompaniesPayments: {
        connect: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/otherCompaniesPayments")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async updateOtherCompaniesPayments(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: OtherCompaniesPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherCompaniesPayments: {
        set: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/otherCompaniesPayments")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async disconnectOtherCompaniesPayments(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: OtherCompaniesPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherCompaniesPayments: {
        disconnect: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: StripePaymentTransacWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        abonoExtra: true,
        cambioDevuelto: true,
        canceledUserId: true,
        cantidadRecibida: true,
        capitalPagado: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        comentariosPago: true,
        comprobantePago: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        customerId: true,
        desctoAplicado: true,
        desdeWebhook: true,
        fechaCancelo: true,
        fechaPago: true,
        fechaProxVenc: true,
        fechaVenc: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        formaPago: true,
        horaPago: true,
        id: true,
        interesPagado: true,
        opcionCambio: true,
        opcionPago: true,
        pagoRecurrente: true,
        pagosAdelantados: true,
        pathFileDiscount: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        payCount: true,
        pay_status: true,
        pay_type: true,
        percentageDiscountDownPayment: true,

        personalLoans: {
          select: {
            id: true,
          },
        },

        promotionId: true,
        receivedUserId: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async connectPayments(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async updatePayments(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async disconnectPayments(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/recurringPayments")
  @ApiNestedQuery(RecurringPaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RecurringPayment",
    action: "read",
    possession: "any",
  })
  async findRecurringPayments(
    @common.Req() request: Request,
    @common.Param() params: StripePaymentTransacWhereUniqueInput
  ): Promise<RecurringPayment[]> {
    const query = plainToClass(RecurringPaymentFindManyArgs, request.query);
    const results = await this.service.findRecurringPayments(params.id, {
      ...query,
      select: {
        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        estatus_intento: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        horaRegistro: true,
        id: true,
        mensajeIntento: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recurringPayments")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async connectRecurringPayments(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: RecurringPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recurringPayments: {
        connect: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recurringPayments")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async updateRecurringPayments(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: RecurringPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recurringPayments: {
        set: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recurringPayments")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async disconnectRecurringPayments(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: RecurringPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recurringPayments: {
        disconnect: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/stripeApiLog")
  @ApiNestedQuery(StripeApiLogFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StripeApiLog",
    action: "read",
    possession: "any",
  })
  async findStripeApiLog(
    @common.Req() request: Request,
    @common.Param() params: StripePaymentTransacWhereUniqueInput
  ): Promise<StripeApiLog[]> {
    const query = plainToClass(StripeApiLogFindManyArgs, request.query);
    const results = await this.service.findStripeApiLog(params.id, {
      ...query,
      select: {
        callDate: true,
        calledMethod: true,
        callTime: true,
        calltrace: true,
        dataSend: true,
        id: true,
        response: true,
        responseDatetime: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stripeApiLog")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async connectStripeApiLog(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: StripeApiLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stripeApiLog: {
        connect: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stripeApiLog")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async updateStripeApiLog(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: StripeApiLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stripeApiLog: {
        set: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stripeApiLog")
  @nestAccessControl.UseRoles({
    resource: "StripePaymentTransac",
    action: "update",
    possession: "any",
  })
  async disconnectStripeApiLog(
    @common.Param() params: StripePaymentTransacWhereUniqueInput,
    @common.Body() body: StripeApiLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stripeApiLog: {
        disconnect: body,
      },
    };
    await this.service.updateStripePaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }
}
