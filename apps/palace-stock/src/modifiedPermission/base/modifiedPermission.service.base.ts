/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ModifiedPermission as PrismaModifiedPermission,
  Permission as PrismaPermission,
  UserModel as PrismaUserModel,
} from "@prisma/client";

export class ModifiedPermissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ModifiedPermissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.modifiedPermission.count(args);
  }

  async modifiedPermissions<T extends Prisma.ModifiedPermissionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModifiedPermissionFindManyArgs>
  ): Promise<PrismaModifiedPermission[]> {
    return this.prisma.modifiedPermission.findMany<Prisma.ModifiedPermissionFindManyArgs>(
      args
    );
  }
  async modifiedPermission<T extends Prisma.ModifiedPermissionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModifiedPermissionFindUniqueArgs>
  ): Promise<PrismaModifiedPermission | null> {
    return this.prisma.modifiedPermission.findUnique(args);
  }
  async createModifiedPermission<T extends Prisma.ModifiedPermissionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModifiedPermissionCreateArgs>
  ): Promise<PrismaModifiedPermission> {
    return this.prisma.modifiedPermission.create<T>(args);
  }
  async updateModifiedPermission<T extends Prisma.ModifiedPermissionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModifiedPermissionUpdateArgs>
  ): Promise<PrismaModifiedPermission> {
    return this.prisma.modifiedPermission.update<T>(args);
  }
  async deleteModifiedPermission<T extends Prisma.ModifiedPermissionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModifiedPermissionDeleteArgs>
  ): Promise<PrismaModifiedPermission> {
    return this.prisma.modifiedPermission.delete(args);
  }

  async getPermissions(parentId: number): Promise<PrismaPermission | null> {
    return this.prisma.modifiedPermission
      .findUnique({
        where: { id: parentId },
      })
      .permissions();
  }

  async getUsers(parentId: number): Promise<PrismaUserModel | null> {
    return this.prisma.modifiedPermission
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }
}
