/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AngazaAccount as PrismaAngazaAccount,
  Customer as PrismaCustomer,
  FinancedSale as PrismaFinancedSale,
} from "@prisma/client";

export class AngazaAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AngazaAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.angazaAccount.count(args);
  }

  async angazaAccounts<T extends Prisma.AngazaAccountFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AngazaAccountFindManyArgs>
  ): Promise<PrismaAngazaAccount[]> {
    return this.prisma.angazaAccount.findMany<Prisma.AngazaAccountFindManyArgs>(
      args
    );
  }
  async angazaAccount<T extends Prisma.AngazaAccountFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AngazaAccountFindUniqueArgs>
  ): Promise<PrismaAngazaAccount | null> {
    return this.prisma.angazaAccount.findUnique(args);
  }
  async createAngazaAccount<T extends Prisma.AngazaAccountCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AngazaAccountCreateArgs>
  ): Promise<PrismaAngazaAccount> {
    return this.prisma.angazaAccount.create<T>(args);
  }
  async updateAngazaAccount<T extends Prisma.AngazaAccountUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AngazaAccountUpdateArgs>
  ): Promise<PrismaAngazaAccount> {
    return this.prisma.angazaAccount.update<T>(args);
  }
  async deleteAngazaAccount<T extends Prisma.AngazaAccountDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AngazaAccountDeleteArgs>
  ): Promise<PrismaAngazaAccount> {
    return this.prisma.angazaAccount.delete(args);
  }

  async getCustomers(parentId: number): Promise<PrismaCustomer | null> {
    return this.prisma.angazaAccount
      .findUnique({
        where: { id: parentId },
      })
      .customers();
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.angazaAccount
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }
}
