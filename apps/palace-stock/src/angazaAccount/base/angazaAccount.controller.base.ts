/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AngazaAccountService } from "../angazaAccount.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AngazaAccountCreateInput } from "./AngazaAccountCreateInput";
import { AngazaAccount } from "./AngazaAccount";
import { AngazaAccountFindManyArgs } from "./AngazaAccountFindManyArgs";
import { AngazaAccountWhereUniqueInput } from "./AngazaAccountWhereUniqueInput";
import { AngazaAccountUpdateInput } from "./AngazaAccountUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AngazaAccountControllerBase {
  constructor(
    protected readonly service: AngazaAccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AngazaAccount })
  @nestAccessControl.UseRoles({
    resource: "AngazaAccount",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAngazaAccount(
    @common.Body() data: AngazaAccountCreateInput
  ): Promise<AngazaAccount> {
    return await this.service.createAngazaAccount({
      data: {
        ...data,

        customers: {
          connect: data.customers,
        },

        financedSales: {
          connect: data.financedSales,
        },
      },
      select: {
        billingModel: true,
        clientQids: true,
        cumulativeDaysDisabled: true,
        currency: true,

        customers: {
          select: {
            id: true,
          },
        },

        downPayment: true,
        downPaymentDaysIncluded: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        fullPrice: true,
        id: true,
        latestPaymentWhen: true,
        minimumPayment: true,
        paymentAmountPerPeriod: true,
        paymentDueDate: true,
        paymentPeriodInDays: true,
        qid: true,
        registrationDate: true,
        status: true,
        totalPaid: true,
        unitNumber: true,
        uuidIdentifier: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AngazaAccount] })
  @ApiNestedQuery(AngazaAccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AngazaAccount",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async angazaAccounts(
    @common.Req() request: Request
  ): Promise<AngazaAccount[]> {
    const args = plainToClass(AngazaAccountFindManyArgs, request.query);
    return this.service.angazaAccounts({
      ...args,
      select: {
        billingModel: true,
        clientQids: true,
        cumulativeDaysDisabled: true,
        currency: true,

        customers: {
          select: {
            id: true,
          },
        },

        downPayment: true,
        downPaymentDaysIncluded: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        fullPrice: true,
        id: true,
        latestPaymentWhen: true,
        minimumPayment: true,
        paymentAmountPerPeriod: true,
        paymentDueDate: true,
        paymentPeriodInDays: true,
        qid: true,
        registrationDate: true,
        status: true,
        totalPaid: true,
        unitNumber: true,
        uuidIdentifier: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AngazaAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AngazaAccount",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async angazaAccount(
    @common.Param() params: AngazaAccountWhereUniqueInput
  ): Promise<AngazaAccount | null> {
    const result = await this.service.angazaAccount({
      where: params,
      select: {
        billingModel: true,
        clientQids: true,
        cumulativeDaysDisabled: true,
        currency: true,

        customers: {
          select: {
            id: true,
          },
        },

        downPayment: true,
        downPaymentDaysIncluded: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        fullPrice: true,
        id: true,
        latestPaymentWhen: true,
        minimumPayment: true,
        paymentAmountPerPeriod: true,
        paymentDueDate: true,
        paymentPeriodInDays: true,
        qid: true,
        registrationDate: true,
        status: true,
        totalPaid: true,
        unitNumber: true,
        uuidIdentifier: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AngazaAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AngazaAccount",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAngazaAccount(
    @common.Param() params: AngazaAccountWhereUniqueInput,
    @common.Body() data: AngazaAccountUpdateInput
  ): Promise<AngazaAccount | null> {
    try {
      return await this.service.updateAngazaAccount({
        where: params,
        data: {
          ...data,

          customers: {
            connect: data.customers,
          },

          financedSales: {
            connect: data.financedSales,
          },
        },
        select: {
          billingModel: true,
          clientQids: true,
          cumulativeDaysDisabled: true,
          currency: true,

          customers: {
            select: {
              id: true,
            },
          },

          downPayment: true,
          downPaymentDaysIncluded: true,
          fechaRegistro: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          fullPrice: true,
          id: true,
          latestPaymentWhen: true,
          minimumPayment: true,
          paymentAmountPerPeriod: true,
          paymentDueDate: true,
          paymentPeriodInDays: true,
          qid: true,
          registrationDate: true,
          status: true,
          totalPaid: true,
          unitNumber: true,
          uuidIdentifier: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AngazaAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AngazaAccount",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAngazaAccount(
    @common.Param() params: AngazaAccountWhereUniqueInput
  ): Promise<AngazaAccount | null> {
    try {
      return await this.service.deleteAngazaAccount({
        where: params,
        select: {
          billingModel: true,
          clientQids: true,
          cumulativeDaysDisabled: true,
          currency: true,

          customers: {
            select: {
              id: true,
            },
          },

          downPayment: true,
          downPaymentDaysIncluded: true,
          fechaRegistro: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          fullPrice: true,
          id: true,
          latestPaymentWhen: true,
          minimumPayment: true,
          paymentAmountPerPeriod: true,
          paymentDueDate: true,
          paymentPeriodInDays: true,
          qid: true,
          registrationDate: true,
          status: true,
          totalPaid: true,
          unitNumber: true,
          uuidIdentifier: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
