/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SimPlan as PrismaSimPlan } from "@prisma/client";

export class SimPlanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SimPlanCountArgs, "select">): Promise<number> {
    return this.prisma.simPlan.count(args);
  }

  async simPlans<T extends Prisma.SimPlanFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SimPlanFindManyArgs>
  ): Promise<PrismaSimPlan[]> {
    return this.prisma.simPlan.findMany<Prisma.SimPlanFindManyArgs>(args);
  }
  async simPlan<T extends Prisma.SimPlanFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SimPlanFindUniqueArgs>
  ): Promise<PrismaSimPlan | null> {
    return this.prisma.simPlan.findUnique(args);
  }
  async createSimPlan<T extends Prisma.SimPlanCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SimPlanCreateArgs>
  ): Promise<PrismaSimPlan> {
    return this.prisma.simPlan.create<T>(args);
  }
  async updateSimPlan<T extends Prisma.SimPlanUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SimPlanUpdateArgs>
  ): Promise<PrismaSimPlan> {
    return this.prisma.simPlan.update<T>(args);
  }
  async deleteSimPlan<T extends Prisma.SimPlanDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SimPlanDeleteArgs>
  ): Promise<PrismaSimPlan> {
    return this.prisma.simPlan.delete(args);
  }
}
