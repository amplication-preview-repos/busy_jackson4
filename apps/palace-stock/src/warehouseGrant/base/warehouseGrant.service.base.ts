/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WarehouseGrant as PrismaWarehouseGrant,
  UserModel as PrismaUserModel,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class WarehouseGrantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WarehouseGrantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.warehouseGrant.count(args);
  }

  async warehouseGrants<T extends Prisma.WarehouseGrantFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseGrantFindManyArgs>
  ): Promise<PrismaWarehouseGrant[]> {
    return this.prisma.warehouseGrant.findMany<Prisma.WarehouseGrantFindManyArgs>(
      args
    );
  }
  async warehouseGrant<T extends Prisma.WarehouseGrantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseGrantFindUniqueArgs>
  ): Promise<PrismaWarehouseGrant | null> {
    return this.prisma.warehouseGrant.findUnique(args);
  }
  async createWarehouseGrant<T extends Prisma.WarehouseGrantCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseGrantCreateArgs>
  ): Promise<PrismaWarehouseGrant> {
    return this.prisma.warehouseGrant.create<T>(args);
  }
  async updateWarehouseGrant<T extends Prisma.WarehouseGrantUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseGrantUpdateArgs>
  ): Promise<PrismaWarehouseGrant> {
    return this.prisma.warehouseGrant.update<T>(args);
  }
  async deleteWarehouseGrant<T extends Prisma.WarehouseGrantDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WarehouseGrantDeleteArgs>
  ): Promise<PrismaWarehouseGrant> {
    return this.prisma.warehouseGrant.delete(args);
  }

  async getUsers(parentId: number): Promise<PrismaUserModel | null> {
    return this.prisma.warehouseGrant
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.warehouseGrant
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
