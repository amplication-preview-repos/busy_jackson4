/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WarehouseMandatoryDoc as PrismaWarehouseMandatoryDoc,
  MandatoryDocument as PrismaMandatoryDocument,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class WarehouseMandatoryDocServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WarehouseMandatoryDocCountArgs, "select">
  ): Promise<number> {
    return this.prisma.warehouseMandatoryDoc.count(args);
  }

  async warehouseMandatoryDocs<
    T extends Prisma.WarehouseMandatoryDocFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WarehouseMandatoryDocFindManyArgs>
  ): Promise<PrismaWarehouseMandatoryDoc[]> {
    return this.prisma.warehouseMandatoryDoc.findMany<Prisma.WarehouseMandatoryDocFindManyArgs>(
      args
    );
  }
  async warehouseMandatoryDoc<
    T extends Prisma.WarehouseMandatoryDocFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WarehouseMandatoryDocFindUniqueArgs>
  ): Promise<PrismaWarehouseMandatoryDoc | null> {
    return this.prisma.warehouseMandatoryDoc.findUnique(args);
  }
  async createWarehouseMandatoryDoc<
    T extends Prisma.WarehouseMandatoryDocCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WarehouseMandatoryDocCreateArgs>
  ): Promise<PrismaWarehouseMandatoryDoc> {
    return this.prisma.warehouseMandatoryDoc.create<T>(args);
  }
  async updateWarehouseMandatoryDoc<
    T extends Prisma.WarehouseMandatoryDocUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WarehouseMandatoryDocUpdateArgs>
  ): Promise<PrismaWarehouseMandatoryDoc> {
    return this.prisma.warehouseMandatoryDoc.update<T>(args);
  }
  async deleteWarehouseMandatoryDoc<
    T extends Prisma.WarehouseMandatoryDocDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WarehouseMandatoryDocDeleteArgs>
  ): Promise<PrismaWarehouseMandatoryDoc> {
    return this.prisma.warehouseMandatoryDoc.delete(args);
  }

  async getMandatoryDocuments(
    parentId: number
  ): Promise<PrismaMandatoryDocument | null> {
    return this.prisma.warehouseMandatoryDoc
      .findUnique({
        where: { id: parentId },
      })
      .mandatoryDocuments();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.warehouseMandatoryDoc
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
