/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ConektaApiLog as PrismaConektaApiLog,
  ConektaPaymentTransac as PrismaConektaPaymentTransac,
} from "@prisma/client";

export class ConektaApiLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConektaApiLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conektaApiLog.count(args);
  }

  async conektaApiLogs<T extends Prisma.ConektaApiLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConektaApiLogFindManyArgs>
  ): Promise<PrismaConektaApiLog[]> {
    return this.prisma.conektaApiLog.findMany<Prisma.ConektaApiLogFindManyArgs>(
      args
    );
  }
  async conektaApiLog<T extends Prisma.ConektaApiLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConektaApiLogFindUniqueArgs>
  ): Promise<PrismaConektaApiLog | null> {
    return this.prisma.conektaApiLog.findUnique(args);
  }
  async createConektaApiLog<T extends Prisma.ConektaApiLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConektaApiLogCreateArgs>
  ): Promise<PrismaConektaApiLog> {
    return this.prisma.conektaApiLog.create<T>(args);
  }
  async updateConektaApiLog<T extends Prisma.ConektaApiLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConektaApiLogUpdateArgs>
  ): Promise<PrismaConektaApiLog> {
    return this.prisma.conektaApiLog.update<T>(args);
  }
  async deleteConektaApiLog<T extends Prisma.ConektaApiLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConektaApiLogDeleteArgs>
  ): Promise<PrismaConektaApiLog> {
    return this.prisma.conektaApiLog.delete(args);
  }

  async getConektaPaymentTransacs(
    parentId: number
  ): Promise<PrismaConektaPaymentTransac | null> {
    return this.prisma.conektaApiLog
      .findUnique({
        where: { id: parentId },
      })
      .conektaPaymentTransacs();
  }
}
