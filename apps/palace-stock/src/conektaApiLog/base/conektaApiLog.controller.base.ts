/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ConektaApiLogService } from "../conektaApiLog.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ConektaApiLogCreateInput } from "./ConektaApiLogCreateInput";
import { ConektaApiLog } from "./ConektaApiLog";
import { ConektaApiLogFindManyArgs } from "./ConektaApiLogFindManyArgs";
import { ConektaApiLogWhereUniqueInput } from "./ConektaApiLogWhereUniqueInput";
import { ConektaApiLogUpdateInput } from "./ConektaApiLogUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ConektaApiLogControllerBase {
  constructor(
    protected readonly service: ConektaApiLogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConektaApiLog })
  @nestAccessControl.UseRoles({
    resource: "ConektaApiLog",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createConektaApiLog(
    @common.Body() data: ConektaApiLogCreateInput
  ): Promise<ConektaApiLog> {
    return await this.service.createConektaApiLog({
      data: {
        ...data,

        conektaPaymentTransacs: data.conektaPaymentTransacs
          ? {
              connect: data.conektaPaymentTransacs,
            }
          : undefined,
      },
      select: {
        callDate: true,
        calledMethod: true,
        callTime: true,
        calltrace: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        dataSend: true,
        id: true,
        response: true,
        responseDatetime: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ConektaApiLog] })
  @ApiNestedQuery(ConektaApiLogFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ConektaApiLog",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async conektaApiLogs(
    @common.Req() request: Request
  ): Promise<ConektaApiLog[]> {
    const args = plainToClass(ConektaApiLogFindManyArgs, request.query);
    return this.service.conektaApiLogs({
      ...args,
      select: {
        callDate: true,
        calledMethod: true,
        callTime: true,
        calltrace: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        dataSend: true,
        id: true,
        response: true,
        responseDatetime: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConektaApiLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ConektaApiLog",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async conektaApiLog(
    @common.Param() params: ConektaApiLogWhereUniqueInput
  ): Promise<ConektaApiLog | null> {
    const result = await this.service.conektaApiLog({
      where: params,
      select: {
        callDate: true,
        calledMethod: true,
        callTime: true,
        calltrace: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        dataSend: true,
        id: true,
        response: true,
        responseDatetime: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConektaApiLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ConektaApiLog",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateConektaApiLog(
    @common.Param() params: ConektaApiLogWhereUniqueInput,
    @common.Body() data: ConektaApiLogUpdateInput
  ): Promise<ConektaApiLog | null> {
    try {
      return await this.service.updateConektaApiLog({
        where: params,
        data: {
          ...data,

          conektaPaymentTransacs: data.conektaPaymentTransacs
            ? {
                connect: data.conektaPaymentTransacs,
              }
            : undefined,
        },
        select: {
          callDate: true,
          calledMethod: true,
          callTime: true,
          calltrace: true,

          conektaPaymentTransacs: {
            select: {
              id: true,
            },
          },

          dataSend: true,
          id: true,
          response: true,
          responseDatetime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConektaApiLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ConektaApiLog",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteConektaApiLog(
    @common.Param() params: ConektaApiLogWhereUniqueInput
  ): Promise<ConektaApiLog | null> {
    try {
      return await this.service.deleteConektaApiLog({
        where: params,
        select: {
          callDate: true,
          calledMethod: true,
          callTime: true,
          calltrace: true,

          conektaPaymentTransacs: {
            select: {
              id: true,
            },
          },

          dataSend: true,
          id: true,
          response: true,
          responseDatetime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
