/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DocumentTypeService } from "../documentType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DocumentTypeCreateInput } from "./DocumentTypeCreateInput";
import { DocumentType } from "./DocumentType";
import { DocumentTypeFindManyArgs } from "./DocumentTypeFindManyArgs";
import { DocumentTypeWhereUniqueInput } from "./DocumentTypeWhereUniqueInput";
import { DocumentTypeUpdateInput } from "./DocumentTypeUpdateInput";
import { MandatoryDocumentFindManyArgs } from "../../mandatoryDocument/base/MandatoryDocumentFindManyArgs";
import { MandatoryDocument } from "../../mandatoryDocument/base/MandatoryDocument";
import { MandatoryDocumentWhereUniqueInput } from "../../mandatoryDocument/base/MandatoryDocumentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DocumentTypeControllerBase {
  constructor(
    protected readonly service: DocumentTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DocumentType })
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDocumentType(
    @common.Body() data: DocumentTypeCreateInput
  ): Promise<DocumentType> {
    return await this.service.createDocumentType({
      data: data,
      select: {
        claveDocto: true,
        descripcion: true,
        id: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DocumentType] })
  @ApiNestedQuery(DocumentTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async documentTypes(@common.Req() request: Request): Promise<DocumentType[]> {
    const args = plainToClass(DocumentTypeFindManyArgs, request.query);
    return this.service.documentTypes({
      ...args,
      select: {
        claveDocto: true,
        descripcion: true,
        id: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DocumentType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async documentType(
    @common.Param() params: DocumentTypeWhereUniqueInput
  ): Promise<DocumentType | null> {
    const result = await this.service.documentType({
      where: params,
      select: {
        claveDocto: true,
        descripcion: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DocumentType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDocumentType(
    @common.Param() params: DocumentTypeWhereUniqueInput,
    @common.Body() data: DocumentTypeUpdateInput
  ): Promise<DocumentType | null> {
    try {
      return await this.service.updateDocumentType({
        where: params,
        data: data,
        select: {
          claveDocto: true,
          descripcion: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DocumentType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDocumentType(
    @common.Param() params: DocumentTypeWhereUniqueInput
  ): Promise<DocumentType | null> {
    try {
      return await this.service.deleteDocumentType({
        where: params,
        select: {
          claveDocto: true,
          descripcion: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/mandatoryDocuments")
  @ApiNestedQuery(MandatoryDocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MandatoryDocument",
    action: "read",
    possession: "any",
  })
  async findMandatoryDocuments(
    @common.Req() request: Request,
    @common.Param() params: DocumentTypeWhereUniqueInput
  ): Promise<MandatoryDocument[]> {
    const query = plainToClass(MandatoryDocumentFindManyArgs, request.query);
    const results = await this.service.findMandatoryDocuments(params.id, {
      ...query,
      select: {
        documentTypes: {
          select: {
            id: true,
          },
        },

        id: true,
        processType: true,
        relationship: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mandatoryDocuments")
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "update",
    possession: "any",
  })
  async connectMandatoryDocuments(
    @common.Param() params: DocumentTypeWhereUniqueInput,
    @common.Body() body: MandatoryDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mandatoryDocuments: {
        connect: body,
      },
    };
    await this.service.updateDocumentType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mandatoryDocuments")
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "update",
    possession: "any",
  })
  async updateMandatoryDocuments(
    @common.Param() params: DocumentTypeWhereUniqueInput,
    @common.Body() body: MandatoryDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mandatoryDocuments: {
        set: body,
      },
    };
    await this.service.updateDocumentType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mandatoryDocuments")
  @nestAccessControl.UseRoles({
    resource: "DocumentType",
    action: "update",
    possession: "any",
  })
  async disconnectMandatoryDocuments(
    @common.Param() params: DocumentTypeWhereUniqueInput,
    @common.Body() body: MandatoryDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mandatoryDocuments: {
        disconnect: body,
      },
    };
    await this.service.updateDocumentType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
