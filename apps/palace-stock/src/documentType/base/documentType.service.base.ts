/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DocumentType as PrismaDocumentType,
  MandatoryDocument as PrismaMandatoryDocument,
} from "@prisma/client";

export class DocumentTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DocumentTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.documentType.count(args);
  }

  async documentTypes<T extends Prisma.DocumentTypeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocumentTypeFindManyArgs>
  ): Promise<PrismaDocumentType[]> {
    return this.prisma.documentType.findMany<Prisma.DocumentTypeFindManyArgs>(
      args
    );
  }
  async documentType<T extends Prisma.DocumentTypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocumentTypeFindUniqueArgs>
  ): Promise<PrismaDocumentType | null> {
    return this.prisma.documentType.findUnique(args);
  }
  async createDocumentType<T extends Prisma.DocumentTypeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocumentTypeCreateArgs>
  ): Promise<PrismaDocumentType> {
    return this.prisma.documentType.create<T>(args);
  }
  async updateDocumentType<T extends Prisma.DocumentTypeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocumentTypeUpdateArgs>
  ): Promise<PrismaDocumentType> {
    return this.prisma.documentType.update<T>(args);
  }
  async deleteDocumentType<T extends Prisma.DocumentTypeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DocumentTypeDeleteArgs>
  ): Promise<PrismaDocumentType> {
    return this.prisma.documentType.delete(args);
  }

  async findMandatoryDocuments(
    parentId: number,
    args: Prisma.MandatoryDocumentFindManyArgs
  ): Promise<PrismaMandatoryDocument[]> {
    return this.prisma.documentType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mandatoryDocuments(args);
  }
}
