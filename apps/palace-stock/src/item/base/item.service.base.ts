/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Item as PrismaItem,
  BillDetail as PrismaBillDetail,
  CashSaleDetail as PrismaCashSaleDetail,
  Estimate as PrismaEstimate,
  FinancedAccessory as PrismaFinancedAccessory,
  FinancedSale as PrismaFinancedSale,
  ItemPrice as PrismaItemPrice,
  Kardex as PrismaKardex,
  KardexSery as PrismaKardexSery,
  LoanedDevice as PrismaLoanedDevice,
  ProtectionCertActivation as PrismaProtectionCertActivation,
  Stock as PrismaStock,
  StockSery as PrismaStockSery,
  Category as PrismaCategory,
  MeasuringUnit as PrismaMeasuringUnit,
} from "@prisma/client";

export class ItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ItemCountArgs, "select">): Promise<number> {
    return this.prisma.item.count(args);
  }

  async items<T extends Prisma.ItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemFindManyArgs>
  ): Promise<PrismaItem[]> {
    return this.prisma.item.findMany<Prisma.ItemFindManyArgs>(args);
  }
  async item<T extends Prisma.ItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemFindUniqueArgs>
  ): Promise<PrismaItem | null> {
    return this.prisma.item.findUnique(args);
  }
  async createItem<T extends Prisma.ItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemCreateArgs>
  ): Promise<PrismaItem> {
    return this.prisma.item.create<T>(args);
  }
  async updateItem<T extends Prisma.ItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemUpdateArgs>
  ): Promise<PrismaItem> {
    return this.prisma.item.update<T>(args);
  }
  async deleteItem<T extends Prisma.ItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemDeleteArgs>
  ): Promise<PrismaItem> {
    return this.prisma.item.delete(args);
  }

  async findBillDetails(
    parentId: number,
    args: Prisma.BillDetailFindManyArgs
  ): Promise<PrismaBillDetail[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .billDetails(args);
  }

  async findCashSaleDetails(
    parentId: number,
    args: Prisma.CashSaleDetailFindManyArgs
  ): Promise<PrismaCashSaleDetail[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cashSaleDetails(args);
  }

  async findEstimates(
    parentId: number,
    args: Prisma.EstimateFindManyArgs
  ): Promise<PrismaEstimate[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .estimates(args);
  }

  async findFinancedAccessories(
    parentId: number,
    args: Prisma.FinancedAccessoryFindManyArgs
  ): Promise<PrismaFinancedAccessory[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .financedAccessories(args);
  }

  async findFinancedSales(
    parentId: number,
    args: Prisma.FinancedSaleFindManyArgs
  ): Promise<PrismaFinancedSale[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .financedSales(args);
  }

  async findItemPrices(
    parentId: number,
    args: Prisma.ItemPriceFindManyArgs
  ): Promise<PrismaItemPrice[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .itemPrices(args);
  }

  async findKardex(
    parentId: number,
    args: Prisma.KardexFindManyArgs
  ): Promise<PrismaKardex[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .kardex(args);
  }

  async findKardexSeries(
    parentId: number,
    args: Prisma.KardexSeryFindManyArgs
  ): Promise<PrismaKardexSery[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .kardexSeries(args);
  }

  async findLoanedDevices(
    parentId: number,
    args: Prisma.LoanedDeviceFindManyArgs
  ): Promise<PrismaLoanedDevice[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .loanedDevices(args);
  }

  async findProtectionCertActivationsProtectionCertActivationsItemIdToitems(
    parentId: number,
    args: Prisma.ProtectionCertActivationFindManyArgs
  ): Promise<PrismaProtectionCertActivation[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .protectionCertActivationsProtectionCertActivationsItemIdToitems(args);
  }

  async findProtectionCertActivationsProtectionCertActivationsReservedItemIdToitems(
    parentId: number,
    args: Prisma.ProtectionCertActivationFindManyArgs
  ): Promise<PrismaProtectionCertActivation[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .protectionCertActivationsProtectionCertActivationsReservedItemIdToitems(
        args
      );
  }

  async findStock(
    parentId: number,
    args: Prisma.StockFindManyArgs
  ): Promise<PrismaStock[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .stock(args);
  }

  async findStockSeries(
    parentId: number,
    args: Prisma.StockSeryFindManyArgs
  ): Promise<PrismaStockSery[]> {
    return this.prisma.item
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .stockSeries(args);
  }

  async getCategories(parentId: number): Promise<PrismaCategory | null> {
    return this.prisma.item
      .findUnique({
        where: { id: parentId },
      })
      .categories();
  }

  async getMeasuringUnits(
    parentId: number
  ): Promise<PrismaMeasuringUnit | null> {
    return this.prisma.item
      .findUnique({
        where: { id: parentId },
      })
      .measuringUnits();
  }
}
