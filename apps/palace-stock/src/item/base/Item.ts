/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BillDetail } from "../../billDetail/base/BillDetail";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsInt,
  IsEnum,
  IsDate,
} from "class-validator";
import { Type } from "class-transformer";
import { CashSaleDetail } from "../../cashSaleDetail/base/CashSaleDetail";
import { Category } from "../../category/base/Category";
import { EnumItemEstatusArt } from "./EnumItemEstatusArt";
import { Estimate } from "../../estimate/base/Estimate";
import { FinancedAccessory } from "../../financedAccessory/base/FinancedAccessory";
import { FinancedSale } from "../../financedSale/base/FinancedSale";
import { ItemPrice } from "../../itemPrice/base/ItemPrice";
import { Kardex } from "../../kardex/base/Kardex";
import { KardexSery } from "../../kardexSery/base/KardexSery";
import { LoanedDevice } from "../../loanedDevice/base/LoanedDevice";
import { MeasuringUnit } from "../../measuringUnit/base/MeasuringUnit";
import { EnumItemOfrecerPlanes } from "./EnumItemOfrecerPlanes";
import { ProtectionCertActivation } from "../../protectionCertActivation/base/ProtectionCertActivation";
import { Stock } from "../../stock/base/Stock";
import { StockSery } from "../../stockSery/base/StockSery";
import { EnumItemTipoArt } from "./EnumItemTipoArt";
import { EnumItemTipoInventario } from "./EnumItemTipoInventario";

@ObjectType()
class Item {
  @ApiProperty({
    required: false,
    type: () => [BillDetail],
  })
  @ValidateNested()
  @Type(() => BillDetail)
  @IsOptional()
  billDetails?: Array<BillDetail>;

  @ApiProperty({
    required: false,
    type: () => [CashSaleDetail],
  })
  @ValidateNested()
  @Type(() => CashSaleDetail)
  @IsOptional()
  cashSaleDetails?: Array<CashSaleDetail>;

  @ApiProperty({
    required: false,
    type: () => Category,
  })
  @ValidateNested()
  @Type(() => Category)
  @IsOptional()
  categories?: Category | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  codigoArt!: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  createdUserId!: number | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  descripcionArt!: string;

  @ApiProperty({
    required: true,
    enum: EnumItemEstatusArt,
  })
  @IsEnum(EnumItemEstatusArt)
  @Field(() => EnumItemEstatusArt, {
    nullable: true,
  })
  estatus_art?: "A" | "I";

  @ApiProperty({
    required: false,
    type: () => [Estimate],
  })
  @ValidateNested()
  @Type(() => Estimate)
  @IsOptional()
  estimates?: Array<Estimate>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaModificado!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaRegistro!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [FinancedAccessory],
  })
  @ValidateNested()
  @Type(() => FinancedAccessory)
  @IsOptional()
  financedAccessories?: Array<FinancedAccessory>;

  @ApiProperty({
    required: false,
    type: () => [FinancedSale],
  })
  @ValidateNested()
  @Type(() => FinancedSale)
  @IsOptional()
  financedSales?: Array<FinancedSale>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  ignorarPlazos!: string | null;

  @ApiProperty({
    required: false,
    type: () => [ItemPrice],
  })
  @ValidateNested()
  @Type(() => ItemPrice)
  @IsOptional()
  itemPrices?: Array<ItemPrice>;

  @ApiProperty({
    required: false,
    type: () => [Kardex],
  })
  @ValidateNested()
  @Type(() => Kardex)
  @IsOptional()
  kardex?: Array<Kardex>;

  @ApiProperty({
    required: false,
    type: () => [KardexSery],
  })
  @ValidateNested()
  @Type(() => KardexSery)
  @IsOptional()
  kardexSeries?: Array<KardexSery>;

  @ApiProperty({
    required: false,
    type: () => [LoanedDevice],
  })
  @ValidateNested()
  @Type(() => LoanedDevice)
  @IsOptional()
  loanedDevices?: Array<LoanedDevice>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  marca!: string | null;

  @ApiProperty({
    required: false,
    type: () => MeasuringUnit,
  })
  @ValidateNested()
  @Type(() => MeasuringUnit)
  @IsOptional()
  measuringUnits?: MeasuringUnit | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  modelo!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  nombreArchivo!: string | null;

  @ApiProperty({
    required: true,
    enum: EnumItemOfrecerPlanes,
  })
  @IsEnum(EnumItemOfrecerPlanes)
  @Field(() => EnumItemOfrecerPlanes, {
    nullable: true,
  })
  ofrecer_planes?: "I" | "A";

  @ApiProperty({
    required: false,
    type: () => [ProtectionCertActivation],
  })
  @ValidateNested()
  @Type(() => ProtectionCertActivation)
  @IsOptional()
  protectionCertActivationsProtectionCertActivationsItemIdToitems?: Array<ProtectionCertActivation>;

  @ApiProperty({
    required: false,
    type: () => [ProtectionCertActivation],
  })
  @ValidateNested()
  @Type(() => ProtectionCertActivation)
  @IsOptional()
  protectionCertActivationsProtectionCertActivationsReservedItemIdToitems?: Array<ProtectionCertActivation>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rutaArchivo!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Stock],
  })
  @ValidateNested()
  @Type(() => Stock)
  @IsOptional()
  stock?: Array<Stock>;

  @ApiProperty({
    required: false,
    type: () => [StockSery],
  })
  @ValidateNested()
  @Type(() => StockSery)
  @IsOptional()
  stockSeries?: Array<StockSery>;

  @ApiProperty({
    required: true,
    enum: EnumItemTipoArt,
  })
  @IsEnum(EnumItemTipoArt)
  @Field(() => EnumItemTipoArt, {
    nullable: true,
  })
  tipo_art?: "P" | "S";

  @ApiProperty({
    required: true,
    enum: EnumItemTipoInventario,
  })
  @IsEnum(EnumItemTipoInventario)
  @Field(() => EnumItemTipoInventario, {
    nullable: true,
  })
  tipo_inventario?: "T" | "S";

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  updatedUserId!: number | null;
}

export { Item as Item };
