/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ItemService } from "../item.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ItemCreateInput } from "./ItemCreateInput";
import { Item } from "./Item";
import { ItemFindManyArgs } from "./ItemFindManyArgs";
import { ItemWhereUniqueInput } from "./ItemWhereUniqueInput";
import { ItemUpdateInput } from "./ItemUpdateInput";
import { BillDetailFindManyArgs } from "../../billDetail/base/BillDetailFindManyArgs";
import { BillDetail } from "../../billDetail/base/BillDetail";
import { BillDetailWhereUniqueInput } from "../../billDetail/base/BillDetailWhereUniqueInput";
import { CashSaleDetailFindManyArgs } from "../../cashSaleDetail/base/CashSaleDetailFindManyArgs";
import { CashSaleDetail } from "../../cashSaleDetail/base/CashSaleDetail";
import { CashSaleDetailWhereUniqueInput } from "../../cashSaleDetail/base/CashSaleDetailWhereUniqueInput";
import { EstimateFindManyArgs } from "../../estimate/base/EstimateFindManyArgs";
import { Estimate } from "../../estimate/base/Estimate";
import { EstimateWhereUniqueInput } from "../../estimate/base/EstimateWhereUniqueInput";
import { FinancedAccessoryFindManyArgs } from "../../financedAccessory/base/FinancedAccessoryFindManyArgs";
import { FinancedAccessory } from "../../financedAccessory/base/FinancedAccessory";
import { FinancedAccessoryWhereUniqueInput } from "../../financedAccessory/base/FinancedAccessoryWhereUniqueInput";
import { FinancedSaleFindManyArgs } from "../../financedSale/base/FinancedSaleFindManyArgs";
import { FinancedSale } from "../../financedSale/base/FinancedSale";
import { FinancedSaleWhereUniqueInput } from "../../financedSale/base/FinancedSaleWhereUniqueInput";
import { ItemPriceFindManyArgs } from "../../itemPrice/base/ItemPriceFindManyArgs";
import { ItemPrice } from "../../itemPrice/base/ItemPrice";
import { ItemPriceWhereUniqueInput } from "../../itemPrice/base/ItemPriceWhereUniqueInput";
import { KardexFindManyArgs } from "../../kardex/base/KardexFindManyArgs";
import { Kardex } from "../../kardex/base/Kardex";
import { KardexWhereUniqueInput } from "../../kardex/base/KardexWhereUniqueInput";
import { KardexSeryFindManyArgs } from "../../kardexSery/base/KardexSeryFindManyArgs";
import { KardexSery } from "../../kardexSery/base/KardexSery";
import { KardexSeryWhereUniqueInput } from "../../kardexSery/base/KardexSeryWhereUniqueInput";
import { LoanedDeviceFindManyArgs } from "../../loanedDevice/base/LoanedDeviceFindManyArgs";
import { LoanedDevice } from "../../loanedDevice/base/LoanedDevice";
import { LoanedDeviceWhereUniqueInput } from "../../loanedDevice/base/LoanedDeviceWhereUniqueInput";
import { ProtectionCertActivationFindManyArgs } from "../../protectionCertActivation/base/ProtectionCertActivationFindManyArgs";
import { ProtectionCertActivation } from "../../protectionCertActivation/base/ProtectionCertActivation";
import { ProtectionCertActivationWhereUniqueInput } from "../../protectionCertActivation/base/ProtectionCertActivationWhereUniqueInput";
import { StockFindManyArgs } from "../../stock/base/StockFindManyArgs";
import { Stock } from "../../stock/base/Stock";
import { StockWhereUniqueInput } from "../../stock/base/StockWhereUniqueInput";
import { StockSeryFindManyArgs } from "../../stockSery/base/StockSeryFindManyArgs";
import { StockSery } from "../../stockSery/base/StockSery";
import { StockSeryWhereUniqueInput } from "../../stockSery/base/StockSeryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ItemControllerBase {
  constructor(
    protected readonly service: ItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Item })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createItem(@common.Body() data: ItemCreateInput): Promise<Item> {
    return await this.service.createItem({
      data: {
        ...data,

        categories: data.categories
          ? {
              connect: data.categories,
            }
          : undefined,

        measuringUnits: data.measuringUnits
          ? {
              connect: data.measuringUnits,
            }
          : undefined,
      },
      select: {
        categories: {
          select: {
            id: true,
          },
        },

        codigoArt: true,
        createdUserId: true,
        descripcionArt: true,
        estatus_art: true,
        fechaModificado: true,
        fechaRegistro: true,
        id: true,
        ignorarPlazos: true,
        marca: true,

        measuringUnits: {
          select: {
            id: true,
          },
        },

        modelo: true,
        nombreArchivo: true,
        ofrecer_planes: true,
        rutaArchivo: true,
        tipo_art: true,
        tipo_inventario: true,
        updatedUserId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Item] })
  @ApiNestedQuery(ItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async items(@common.Req() request: Request): Promise<Item[]> {
    const args = plainToClass(ItemFindManyArgs, request.query);
    return this.service.items({
      ...args,
      select: {
        categories: {
          select: {
            id: true,
          },
        },

        codigoArt: true,
        createdUserId: true,
        descripcionArt: true,
        estatus_art: true,
        fechaModificado: true,
        fechaRegistro: true,
        id: true,
        ignorarPlazos: true,
        marca: true,

        measuringUnits: {
          select: {
            id: true,
          },
        },

        modelo: true,
        nombreArchivo: true,
        ofrecer_planes: true,
        rutaArchivo: true,
        tipo_art: true,
        tipo_inventario: true,
        updatedUserId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Item })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async item(
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<Item | null> {
    const result = await this.service.item({
      where: params,
      select: {
        categories: {
          select: {
            id: true,
          },
        },

        codigoArt: true,
        createdUserId: true,
        descripcionArt: true,
        estatus_art: true,
        fechaModificado: true,
        fechaRegistro: true,
        id: true,
        ignorarPlazos: true,
        marca: true,

        measuringUnits: {
          select: {
            id: true,
          },
        },

        modelo: true,
        nombreArchivo: true,
        ofrecer_planes: true,
        rutaArchivo: true,
        tipo_art: true,
        tipo_inventario: true,
        updatedUserId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Item })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateItem(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() data: ItemUpdateInput
  ): Promise<Item | null> {
    try {
      return await this.service.updateItem({
        where: params,
        data: {
          ...data,

          categories: data.categories
            ? {
                connect: data.categories,
              }
            : undefined,

          measuringUnits: data.measuringUnits
            ? {
                connect: data.measuringUnits,
              }
            : undefined,
        },
        select: {
          categories: {
            select: {
              id: true,
            },
          },

          codigoArt: true,
          createdUserId: true,
          descripcionArt: true,
          estatus_art: true,
          fechaModificado: true,
          fechaRegistro: true,
          id: true,
          ignorarPlazos: true,
          marca: true,

          measuringUnits: {
            select: {
              id: true,
            },
          },

          modelo: true,
          nombreArchivo: true,
          ofrecer_planes: true,
          rutaArchivo: true,
          tipo_art: true,
          tipo_inventario: true,
          updatedUserId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Item })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteItem(
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<Item | null> {
    try {
      return await this.service.deleteItem({
        where: params,
        select: {
          categories: {
            select: {
              id: true,
            },
          },

          codigoArt: true,
          createdUserId: true,
          descripcionArt: true,
          estatus_art: true,
          fechaModificado: true,
          fechaRegistro: true,
          id: true,
          ignorarPlazos: true,
          marca: true,

          measuringUnits: {
            select: {
              id: true,
            },
          },

          modelo: true,
          nombreArchivo: true,
          ofrecer_planes: true,
          rutaArchivo: true,
          tipo_art: true,
          tipo_inventario: true,
          updatedUserId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/billDetails")
  @ApiNestedQuery(BillDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BillDetail",
    action: "read",
    possession: "any",
  })
  async findBillDetails(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<BillDetail[]> {
    const query = plainToClass(BillDetailFindManyArgs, request.query);
    const results = await this.service.findBillDetails(params.id, {
      ...query,
      select: {
        codigoSerie: true,
        createdUserId: true,
        desctoUnidad: true,
        fechaRegistro: true,
        id: true,
        idFactura: true,

        items: {
          select: {
            id: true,
          },
        },

        precioUnidad: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/billDetails")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectBillDetails(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: BillDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billDetails: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/billDetails")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateBillDetails(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: BillDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billDetails: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/billDetails")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectBillDetails(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: BillDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billDetails: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/cashSaleDetails")
  @ApiNestedQuery(CashSaleDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CashSaleDetail",
    action: "read",
    possession: "any",
  })
  async findCashSaleDetails(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<CashSaleDetail[]> {
    const query = plainToClass(CashSaleDetailFindManyArgs, request.query);
    const results = await this.service.findCashSaleDetails(params.id, {
      ...query,
      select: {
        cantUnidades: true,
        cashSaleId: true,
        codigoBloqueo: true,
        codigoSerie: true,
        desctoAplicado: true,
        id: true,

        items: {
          select: {
            id: true,
          },
        },

        ivaUnidad: true,
        porcentajeDescto: true,
        precioUnidad: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cashSaleDetails")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectCashSaleDetails(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: CashSaleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashSaleDetails: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cashSaleDetails")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateCashSaleDetails(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: CashSaleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashSaleDetails: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cashSaleDetails")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectCashSaleDetails(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: CashSaleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashSaleDetails: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/estimates")
  @ApiNestedQuery(EstimateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Estimate",
    action: "read",
    possession: "any",
  })
  async findEstimates(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<Estimate[]> {
    const query = plainToClass(EstimateFindManyArgs, request.query);
    const results = await this.service.findEstimates(params.id, {
      ...query,
      select: {
        aspira_otro_producto: true,
        autoriza_contacto: true,
        createdUserId: true,
        desctoPagoOportuno: true,
        enganche: true,
        fechaCotiz: true,
        id: true,
        interesAnual: true,
        interesSemanalMultiplo: true,

        items: {
          select: {
            id: true,
          },
        },

        montoPago: true,
        motivoRechazo: true,
        nombreCompletoCliente: true,
        numPagos: true,
        observacionesCotizacion: true,
        pagoSemanalIdeal: true,
        plazo: true,
        precioLista: true,
        productoInteres: true,
        rechazo_financ: true,
        telefonoCliente: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/estimates")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectEstimates(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: EstimateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estimates: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/estimates")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateEstimates(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: EstimateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estimates: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/estimates")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectEstimates(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: EstimateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      estimates: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/financedAccessories")
  @ApiNestedQuery(FinancedAccessoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FinancedAccessory",
    action: "read",
    possession: "any",
  })
  async findFinancedAccessories(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<FinancedAccessory[]> {
    const query = plainToClass(FinancedAccessoryFindManyArgs, request.query);
    const results = await this.service.findFinancedAccessories(params.id, {
      ...query,
      select: {
        cantUnidades: true,
        engancheAccesorio: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        precioVenta: true,

        transactions: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/financedAccessories")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectFinancedAccessories(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: FinancedAccessoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedAccessories: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/financedAccessories")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateFinancedAccessories(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: FinancedAccessoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedAccessories: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/financedAccessories")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectFinancedAccessories(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: FinancedAccessoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedAccessories: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/financedSales")
  @ApiNestedQuery(FinancedSaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FinancedSale",
    action: "read",
    possession: "any",
  })
  async findFinancedSales(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<FinancedSale[]> {
    const query = plainToClass(FinancedSaleFindManyArgs, request.query);
    const results = await this.service.findFinancedSales(params.id, {
      ...query,
      select: {
        adminAppUnregistered: true,
        ajusteEnganche: true,
        ajustePrecioVenta: true,
        altaPagoRecurrente: true,
        authUserId: true,
        bloqueo_confirmado: true,
        bloqueo_permanente: true,
        bloqueoProgramado: true,
        canceledUserId: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        codigoArtIccid: true,
        codigoBloqueo: true,
        comentarios: true,
        comentariosDescuento: true,
        createdUserId: true,
        customerPagoRecurrente: true,

        customers: {
          select: {
            id: true,
          },
        },

        desctoPagoOportuno: true,
        descuentoEspecial: true,
        enganche: true,
        estatus_bloqueo: true,
        estatus_equipo: true,
        estatus_financ: true,
        fechaCancelo: true,
        fechaFinanc: true,
        fechaPrimerPago: true,
        fechaRegistro: true,
        forceAdvancePayments: true,
        formaPago: true,
        habilitar_pago_recurrente: true,
        iccid: true,
        id: true,
        idPlan: true,
        imei: true,
        imei2: true,
        ine_verificado: true,

        items: {
          select: {
            id: true,
          },
        },

        mensajeAdvertenciaVenta: true,
        montoDescuento: true,
        montoFinanciado: true,
        montoPago: true,
        montoPagoInicial: true,
        msisdn: true,
        numPagos: true,
        numPagosDescuento: true,
        paymentAgreement: true,
        plazo: true,
        porcentajeDescEng: true,
        precioLista: true,
        promotionId: true,

        protectionCerts: {
          select: {
            id: true,
          },
        },

        proveedorBloqueo: true,
        proveedorPagoRecurrente: true,
        rangoFinalDescuento: true,
        rangoInicialDescuento: true,
        rutaArchivoDescuento: true,
        rutaFirma: true,
        tasaInteres: true,
        tasaInteresAnual: true,
        telefono: true,
        timeToReconfigNextlock: true,
        tokenPagoRecurrente: true,
        ubicacion: true,
        ubicacionLatitud: true,
        ubicacionLongitud: true,
        ubicacionMapa: true,
        ultimaConexion: true,
        ultimaLocacion: true,
        unenrolledUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/financedSales")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectFinancedSales(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: FinancedSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSales: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/financedSales")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateFinancedSales(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: FinancedSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSales: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/financedSales")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectFinancedSales(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: FinancedSaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financedSales: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/itemPrices")
  @ApiNestedQuery(ItemPriceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ItemPrice",
    action: "read",
    possession: "any",
  })
  async findItemPrices(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<ItemPrice[]> {
    const query = plainToClass(ItemPriceFindManyArgs, request.query);
    const results = await this.service.findItemPrices(params.id, {
      ...query,
      select: {
        comisionInmediata: true,
        createdUserId: true,
        descripcionArt: true,
        enganche: true,
        fechaLanzamiento: true,
        gamma: true,
        id: true,

        items: {
          select: {
            id: true,
          },
        },

        modelo: true,
        precioVenta: true,
        tipo_venta: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/itemPrices")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectItemPrices(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ItemPriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemPrices: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/itemPrices")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateItemPrices(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ItemPriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemPrices: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/itemPrices")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectItemPrices(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ItemPriceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemPrices: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/kardex")
  @ApiNestedQuery(KardexFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Kardex",
    action: "read",
    possession: "any",
  })
  async findKardex(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<Kardex[]> {
    const query = plainToClass(KardexFindManyArgs, request.query);
    const results = await this.service.findKardex(params.id, {
      ...query,
      select: {
        cantUnidades: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        ivaUnidad: true,

        payments: {
          select: {
            id: true,
          },
        },

        personalLoans: {
          select: {
            id: true,
          },
        },

        precioUnidad: true,
        tipo_inventario: true,

        transactions: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectKardex(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateKardex(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/kardex")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectKardex(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: KardexWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardex: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/kardexSeries")
  @ApiNestedQuery(KardexSeryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "KardexSery",
    action: "read",
    possession: "any",
  })
  async findKardexSeries(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<KardexSery[]> {
    const query = plainToClass(KardexSeryFindManyArgs, request.query);
    const results = await this.service.findKardexSeries(params.id, {
      ...query,
      select: {
        codigoBloqueo: true,
        id: true,

        items: {
          select: {
            id: true,
          },
        },

        otraSerie: true,
        serialCode: true,

        transactions: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/kardexSeries")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectKardexSeries(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: KardexSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardexSeries: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/kardexSeries")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateKardexSeries(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: KardexSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardexSeries: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/kardexSeries")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectKardexSeries(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: KardexSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      kardexSeries: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/loanedDevices")
  @ApiNestedQuery(LoanedDeviceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LoanedDevice",
    action: "read",
    possession: "any",
  })
  async findLoanedDevices(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<LoanedDevice[]> {
    const query = plainToClass(LoanedDeviceFindManyArgs, request.query);
    const results = await this.service.findLoanedDevices(params.id, {
      ...query,
      select: {
        codigoSerie: true,
        comentarios: true,

        customers: {
          select: {
            id: true,
          },
        },

        fechaDevolucion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        loanStatus: true,

        usersLoanedDevicesCreatedUserIdTousers: {
          select: {
            id: true,
          },
        },

        usersLoanedDevicesReturnedUserIdTousers: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/loanedDevices")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectLoanedDevices(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevices: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/loanedDevices")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateLoanedDevices(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevices: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/loanedDevices")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectLoanedDevices(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: LoanedDeviceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loanedDevices: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get(
    "/:id/protectionCertActivationsProtectionCertActivationsItemIdToitems"
  )
  @ApiNestedQuery(ProtectionCertActivationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProtectionCertActivation",
    action: "read",
    possession: "any",
  })
  async findProtectionCertActivationsProtectionCertActivationsItemIdToitems(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<ProtectionCertActivation[]> {
    const query = plainToClass(
      ProtectionCertActivationFindManyArgs,
      request.query
    );
    const results =
      await this.service.findProtectionCertActivationsProtectionCertActivationsItemIdToitems(
        params.id,
        {
          ...query,
          select: {
            authUserId: true,
            codigoBloqueo: true,
            codigoBloqueoApartado: true,
            codigoSerie: true,
            codigoSerieApartado: true,
            comentario: true,

            customers: {
              select: {
                id: true,
              },
            },

            deductPaymentId: true,
            devolvioEquipoApartado: true,
            diffPaymentId: true,
            estatus_bloqueo_apartado: true,
            estatusCertProtec: true,
            estatusReparacion: true,
            fechaAct: true,
            fechaAutorizacion: true,
            fechaUltActualizacion: true,

            financedSales: {
              select: {
                id: true,
              },
            },

            id: true,
            idUsrAct: true,

            itemsProtectionCertActivationsItemIdToitems: {
              select: {
                id: true,
              },
            },

            itemsProtectionCertActivationsReservedItemIdToitems: {
              select: {
                id: true,
              },
            },

            pagoDeducible: true,
            pagoDiferencia: true,
            precioLista: true,
            precioListaApartado: true,
            precioReparacion: true,
            protectionCertId: true,
            tipoProtec: true,
            updatedUserId: true,

            warehouses: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post(
    "/:id/protectionCertActivationsProtectionCertActivationsItemIdToitems"
  )
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectProtectionCertActivationsProtectionCertActivationsItemIdToitems(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivationsProtectionCertActivationsItemIdToitems: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch(
    "/:id/protectionCertActivationsProtectionCertActivationsItemIdToitems"
  )
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateProtectionCertActivationsProtectionCertActivationsItemIdToitems(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivationsProtectionCertActivationsItemIdToitems: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete(
    "/:id/protectionCertActivationsProtectionCertActivationsItemIdToitems"
  )
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectProtectionCertActivationsProtectionCertActivationsItemIdToitems(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivationsProtectionCertActivationsItemIdToitems: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get(
    "/:id/protectionCertActivationsProtectionCertActivationsReservedItemIdToitems"
  )
  @ApiNestedQuery(ProtectionCertActivationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProtectionCertActivation",
    action: "read",
    possession: "any",
  })
  async findProtectionCertActivationsProtectionCertActivationsReservedItemIdToitems(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<ProtectionCertActivation[]> {
    const query = plainToClass(
      ProtectionCertActivationFindManyArgs,
      request.query
    );
    const results =
      await this.service.findProtectionCertActivationsProtectionCertActivationsReservedItemIdToitems(
        params.id,
        {
          ...query,
          select: {
            authUserId: true,
            codigoBloqueo: true,
            codigoBloqueoApartado: true,
            codigoSerie: true,
            codigoSerieApartado: true,
            comentario: true,

            customers: {
              select: {
                id: true,
              },
            },

            deductPaymentId: true,
            devolvioEquipoApartado: true,
            diffPaymentId: true,
            estatus_bloqueo_apartado: true,
            estatusCertProtec: true,
            estatusReparacion: true,
            fechaAct: true,
            fechaAutorizacion: true,
            fechaUltActualizacion: true,

            financedSales: {
              select: {
                id: true,
              },
            },

            id: true,
            idUsrAct: true,

            itemsProtectionCertActivationsItemIdToitems: {
              select: {
                id: true,
              },
            },

            itemsProtectionCertActivationsReservedItemIdToitems: {
              select: {
                id: true,
              },
            },

            pagoDeducible: true,
            pagoDiferencia: true,
            precioLista: true,
            precioListaApartado: true,
            precioReparacion: true,
            protectionCertId: true,
            tipoProtec: true,
            updatedUserId: true,

            warehouses: {
              select: {
                id: true,
              },
            },
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post(
    "/:id/protectionCertActivationsProtectionCertActivationsReservedItemIdToitems"
  )
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectProtectionCertActivationsProtectionCertActivationsReservedItemIdToitems(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivationsProtectionCertActivationsReservedItemIdToitems: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch(
    "/:id/protectionCertActivationsProtectionCertActivationsReservedItemIdToitems"
  )
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateProtectionCertActivationsProtectionCertActivationsReservedItemIdToitems(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivationsProtectionCertActivationsReservedItemIdToitems: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete(
    "/:id/protectionCertActivationsProtectionCertActivationsReservedItemIdToitems"
  )
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectProtectionCertActivationsProtectionCertActivationsReservedItemIdToitems(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ProtectionCertActivationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      protectionCertActivationsProtectionCertActivationsReservedItemIdToitems: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/stock")
  @ApiNestedQuery(StockFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Stock",
    action: "read",
    possession: "any",
  })
  async findStock(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<Stock[]> {
    const query = plainToClass(StockFindManyArgs, request.query);
    const results = await this.service.findStock(params.id, {
      ...query,
      select: {
        existencias: true,
        existMax: true,
        existMin: true,
        id: true,

        items: {
          select: {
            id: true,
          },
        },

        tipo_inventario: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stock")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectStock(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: StockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stock: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stock")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateStock(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: StockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stock: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stock")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectStock(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: StockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stock: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/stockSeries")
  @ApiNestedQuery(StockSeryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StockSery",
    action: "read",
    possession: "any",
  })
  async findStockSeries(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<StockSery[]> {
    const query = plainToClass(StockSeryFindManyArgs, request.query);
    const results = await this.service.findStockSeries(params.id, {
      ...query,
      select: {
        codigoBloqueo: true,
        estatus_bloqueo: true,
        estatus_serie: true,
        id: true,

        items: {
          select: {
            id: true,
          },
        },

        otraSerie: true,
        proveedorBloqueo: true,
        serialCode: true,
        serieEnrolada: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stockSeries")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectStockSeries(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: StockSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stockSeries: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stockSeries")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateStockSeries(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: StockSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stockSeries: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stockSeries")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectStockSeries(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: StockSeryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stockSeries: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }
}
