/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BillingConceptCodeService } from "../billingConceptCode.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BillingConceptCodeCreateInput } from "./BillingConceptCodeCreateInput";
import { BillingConceptCode } from "./BillingConceptCode";
import { BillingConceptCodeFindManyArgs } from "./BillingConceptCodeFindManyArgs";
import { BillingConceptCodeWhereUniqueInput } from "./BillingConceptCodeWhereUniqueInput";
import { BillingConceptCodeUpdateInput } from "./BillingConceptCodeUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BillingConceptCodeControllerBase {
  constructor(
    protected readonly service: BillingConceptCodeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BillingConceptCode })
  @nestAccessControl.UseRoles({
    resource: "BillingConceptCode",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBillingConceptCode(
    @common.Body() data: BillingConceptCodeCreateInput
  ): Promise<BillingConceptCode> {
    return await this.service.createBillingConceptCode({
      data: data,
      select: {
        codigoConcepto: true,
        descripcion: true,
        id: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [BillingConceptCode] })
  @ApiNestedQuery(BillingConceptCodeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BillingConceptCode",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async billingConceptCodes(
    @common.Req() request: Request
  ): Promise<BillingConceptCode[]> {
    const args = plainToClass(BillingConceptCodeFindManyArgs, request.query);
    return this.service.billingConceptCodes({
      ...args,
      select: {
        codigoConcepto: true,
        descripcion: true,
        id: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BillingConceptCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BillingConceptCode",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async billingConceptCode(
    @common.Param() params: BillingConceptCodeWhereUniqueInput
  ): Promise<BillingConceptCode | null> {
    const result = await this.service.billingConceptCode({
      where: params,
      select: {
        codigoConcepto: true,
        descripcion: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BillingConceptCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BillingConceptCode",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBillingConceptCode(
    @common.Param() params: BillingConceptCodeWhereUniqueInput,
    @common.Body() data: BillingConceptCodeUpdateInput
  ): Promise<BillingConceptCode | null> {
    try {
      return await this.service.updateBillingConceptCode({
        where: params,
        data: data,
        select: {
          codigoConcepto: true,
          descripcion: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BillingConceptCode })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BillingConceptCode",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBillingConceptCode(
    @common.Param() params: BillingConceptCodeWhereUniqueInput
  ): Promise<BillingConceptCode | null> {
    try {
      return await this.service.deleteBillingConceptCode({
        where: params,
        select: {
          codigoConcepto: true,
          descripcion: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
