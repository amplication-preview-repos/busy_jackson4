/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BankReceiptCreateNestedManyWithoutCashCountsInput } from "./BankReceiptCreateNestedManyWithoutCashCountsInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsInt,
  IsEnum,
  IsDate,
} from "class-validator";
import { Type } from "class-transformer";
import { CashCountDetailCreateNestedManyWithoutCashCountsInput } from "./CashCountDetailCreateNestedManyWithoutCashCountsInput";
import { EnumCashCountEstatusValidacion } from "./EnumCashCountEstatusValidacion";
import { WarehouseWhereUniqueInput } from "../../warehouse/base/WarehouseWhereUniqueInput";

@InputType()
class CashCountCreateInput {
  @ApiProperty({
    required: false,
    type: () => BankReceiptCreateNestedManyWithoutCashCountsInput,
  })
  @ValidateNested()
  @Type(() => BankReceiptCreateNestedManyWithoutCashCountsInput)
  @IsOptional()
  @Field(() => BankReceiptCreateNestedManyWithoutCashCountsInput, {
    nullable: true,
  })
  bankReceipts?: BankReceiptCreateNestedManyWithoutCashCountsInput;

  @ApiProperty({
    required: false,
    type: () => CashCountDetailCreateNestedManyWithoutCashCountsInput,
  })
  @ValidateNested()
  @Type(() => CashCountDetailCreateNestedManyWithoutCashCountsInput)
  @IsOptional()
  @Field(() => CashCountDetailCreateNestedManyWithoutCashCountsInput, {
    nullable: true,
  })
  cashCountDetails?: CashCountDetailCreateNestedManyWithoutCashCountsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  comentarios?: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  createdUserId!: number;

  @ApiProperty({
    required: false,
    enum: EnumCashCountEstatusValidacion,
  })
  @IsEnum(EnumCashCountEstatusValidacion)
  @IsOptional()
  @Field(() => EnumCashCountEstatusValidacion, {
    nullable: true,
  })
  estatus_validacion?: "SV" | "NE" | "I" | "C" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  fechaValidacion?: Date | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  fromDate!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  toDate!: Date;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  validUserId?: number | null;

  @ApiProperty({
    required: true,
    type: () => WarehouseWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => WarehouseWhereUniqueInput)
  @Field(() => WarehouseWhereUniqueInput)
  warehouses!: WarehouseWhereUniqueInput;
}

export { CashCountCreateInput as CashCountCreateInput };
