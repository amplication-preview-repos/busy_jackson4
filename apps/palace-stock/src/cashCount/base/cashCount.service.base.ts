/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CashCount as PrismaCashCount,
  BankReceipt as PrismaBankReceipt,
  CashCountDetail as PrismaCashCountDetail,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class CashCountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CashCountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cashCount.count(args);
  }

  async cashCounts<T extends Prisma.CashCountFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashCountFindManyArgs>
  ): Promise<PrismaCashCount[]> {
    return this.prisma.cashCount.findMany<Prisma.CashCountFindManyArgs>(args);
  }
  async cashCount<T extends Prisma.CashCountFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashCountFindUniqueArgs>
  ): Promise<PrismaCashCount | null> {
    return this.prisma.cashCount.findUnique(args);
  }
  async createCashCount<T extends Prisma.CashCountCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashCountCreateArgs>
  ): Promise<PrismaCashCount> {
    return this.prisma.cashCount.create<T>(args);
  }
  async updateCashCount<T extends Prisma.CashCountUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashCountUpdateArgs>
  ): Promise<PrismaCashCount> {
    return this.prisma.cashCount.update<T>(args);
  }
  async deleteCashCount<T extends Prisma.CashCountDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CashCountDeleteArgs>
  ): Promise<PrismaCashCount> {
    return this.prisma.cashCount.delete(args);
  }

  async findBankReceipts(
    parentId: number,
    args: Prisma.BankReceiptFindManyArgs
  ): Promise<PrismaBankReceipt[]> {
    return this.prisma.cashCount
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bankReceipts(args);
  }

  async findCashCountDetails(
    parentId: number,
    args: Prisma.CashCountDetailFindManyArgs
  ): Promise<PrismaCashCountDetail[]> {
    return this.prisma.cashCount
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cashCountDetails(args);
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.cashCount
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
