/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CashCountService } from "../cashCount.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CashCountCreateInput } from "./CashCountCreateInput";
import { CashCount } from "./CashCount";
import { CashCountFindManyArgs } from "./CashCountFindManyArgs";
import { CashCountWhereUniqueInput } from "./CashCountWhereUniqueInput";
import { CashCountUpdateInput } from "./CashCountUpdateInput";
import { BankReceiptFindManyArgs } from "../../bankReceipt/base/BankReceiptFindManyArgs";
import { BankReceipt } from "../../bankReceipt/base/BankReceipt";
import { BankReceiptWhereUniqueInput } from "../../bankReceipt/base/BankReceiptWhereUniqueInput";
import { CashCountDetailFindManyArgs } from "../../cashCountDetail/base/CashCountDetailFindManyArgs";
import { CashCountDetail } from "../../cashCountDetail/base/CashCountDetail";
import { CashCountDetailWhereUniqueInput } from "../../cashCountDetail/base/CashCountDetailWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CashCountControllerBase {
  constructor(
    protected readonly service: CashCountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CashCount })
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCashCount(
    @common.Body() data: CashCountCreateInput
  ): Promise<CashCount> {
    return await this.service.createCashCount({
      data: {
        ...data,

        warehouses: {
          connect: data.warehouses,
        },
      },
      select: {
        comentarios: true,
        createdUserId: true,
        estatus_validacion: true,
        fechaRegistro: true,
        fechaValidacion: true,
        fromDate: true,
        id: true,
        toDate: true,
        validUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CashCount] })
  @ApiNestedQuery(CashCountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cashCounts(@common.Req() request: Request): Promise<CashCount[]> {
    const args = plainToClass(CashCountFindManyArgs, request.query);
    return this.service.cashCounts({
      ...args,
      select: {
        comentarios: true,
        createdUserId: true,
        estatus_validacion: true,
        fechaRegistro: true,
        fechaValidacion: true,
        fromDate: true,
        id: true,
        toDate: true,
        validUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CashCount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cashCount(
    @common.Param() params: CashCountWhereUniqueInput
  ): Promise<CashCount | null> {
    const result = await this.service.cashCount({
      where: params,
      select: {
        comentarios: true,
        createdUserId: true,
        estatus_validacion: true,
        fechaRegistro: true,
        fechaValidacion: true,
        fromDate: true,
        id: true,
        toDate: true,
        validUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CashCount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCashCount(
    @common.Param() params: CashCountWhereUniqueInput,
    @common.Body() data: CashCountUpdateInput
  ): Promise<CashCount | null> {
    try {
      return await this.service.updateCashCount({
        where: params,
        data: {
          ...data,

          warehouses: {
            connect: data.warehouses,
          },
        },
        select: {
          comentarios: true,
          createdUserId: true,
          estatus_validacion: true,
          fechaRegistro: true,
          fechaValidacion: true,
          fromDate: true,
          id: true,
          toDate: true,
          validUserId: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CashCount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCashCount(
    @common.Param() params: CashCountWhereUniqueInput
  ): Promise<CashCount | null> {
    try {
      return await this.service.deleteCashCount({
        where: params,
        select: {
          comentarios: true,
          createdUserId: true,
          estatus_validacion: true,
          fechaRegistro: true,
          fechaValidacion: true,
          fromDate: true,
          id: true,
          toDate: true,
          validUserId: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bankReceipts")
  @ApiNestedQuery(BankReceiptFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BankReceipt",
    action: "read",
    possession: "any",
  })
  async findBankReceipts(
    @common.Req() request: Request,
    @common.Param() params: CashCountWhereUniqueInput
  ): Promise<BankReceipt[]> {
    const query = plainToClass(BankReceiptFindManyArgs, request.query);
    const results = await this.service.findBankReceipts(params.id, {
      ...query,
      select: {
        autorizacion: true,
        banco: true,

        cashCounts: {
          select: {
            id: true,
          },
        },

        createdUserId: true,
        estatus_ficha: true,
        estatus_validacion: true,
        fechaDeposito: true,
        fechaRegistro: true,
        fechaValidacion: true,
        folio: true,
        id: true,
        idBanco: true,
        montoDeposito: true,
        tipo_deposito: true,
        validUserId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bankReceipts")
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "update",
    possession: "any",
  })
  async connectBankReceipts(
    @common.Param() params: CashCountWhereUniqueInput,
    @common.Body() body: BankReceiptWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankReceipts: {
        connect: body,
      },
    };
    await this.service.updateCashCount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bankReceipts")
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "update",
    possession: "any",
  })
  async updateBankReceipts(
    @common.Param() params: CashCountWhereUniqueInput,
    @common.Body() body: BankReceiptWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankReceipts: {
        set: body,
      },
    };
    await this.service.updateCashCount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bankReceipts")
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "update",
    possession: "any",
  })
  async disconnectBankReceipts(
    @common.Param() params: CashCountWhereUniqueInput,
    @common.Body() body: BankReceiptWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankReceipts: {
        disconnect: body,
      },
    };
    await this.service.updateCashCount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/cashCountDetails")
  @ApiNestedQuery(CashCountDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CashCountDetail",
    action: "read",
    possession: "any",
  })
  async findCashCountDetails(
    @common.Req() request: Request,
    @common.Param() params: CashCountWhereUniqueInput
  ): Promise<CashCountDetail[]> {
    const query = plainToClass(CashCountDetailFindManyArgs, request.query);
    const results = await this.service.findCashCountDetails(params.id, {
      ...query,
      select: {
        cashCounts: {
          select: {
            id: true,
          },
        },

        cashSales: {
          select: {
            id: true,
          },
        },

        estatus_desglose: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        ingreso: true,

        payments: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cashCountDetails")
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "update",
    possession: "any",
  })
  async connectCashCountDetails(
    @common.Param() params: CashCountWhereUniqueInput,
    @common.Body() body: CashCountDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashCountDetails: {
        connect: body,
      },
    };
    await this.service.updateCashCount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cashCountDetails")
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "update",
    possession: "any",
  })
  async updateCashCountDetails(
    @common.Param() params: CashCountWhereUniqueInput,
    @common.Body() body: CashCountDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashCountDetails: {
        set: body,
      },
    };
    await this.service.updateCashCount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cashCountDetails")
  @nestAccessControl.UseRoles({
    resource: "CashCount",
    action: "update",
    possession: "any",
  })
  async disconnectCashCountDetails(
    @common.Param() params: CashCountWhereUniqueInput,
    @common.Body() body: CashCountDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashCountDetails: {
        disconnect: body,
      },
    };
    await this.service.updateCashCount({
      where: params,
      data,
      select: { id: true },
    });
  }
}
