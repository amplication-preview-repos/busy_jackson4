/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ConfigurationService } from "../configuration.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ConfigurationCreateInput } from "./ConfigurationCreateInput";
import { Configuration } from "./Configuration";
import { ConfigurationFindManyArgs } from "./ConfigurationFindManyArgs";
import { ConfigurationWhereUniqueInput } from "./ConfigurationWhereUniqueInput";
import { ConfigurationUpdateInput } from "./ConfigurationUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ConfigurationControllerBase {
  constructor(
    protected readonly service: ConfigurationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Configuration })
  @nestAccessControl.UseRoles({
    resource: "Configuration",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createConfiguration(
    @common.Body() data: ConfigurationCreateInput
  ): Promise<Configuration> {
    return await this.service.createConfiguration({
      data: data,
      select: {
        angazaConf: true,
        aspectoConf: true,
        cartaLiquidacionDeuda: true,
        claveEmpresa: true,
        conektaConf: true,
        contactoAutSuperior: true,
        contratoEmpresa: true,
        contratoEmpresaPdf: true,
        correoEmpresa: true,
        correoEnviosConf: true,
        createdUserId: true,
        descripcionEmpresa: true,
        desctoEspecialConf: true,
        direccionEmpresa: true,
        escrituraPublica: true,
        facturacionConf: true,
        fechaRegistro: true,
        firmaRepresentante: true,
        googleConf: true,
        id: true,
        linkSucursalesMaps: true,
        mediosContacto: true,
        nombreEmpresa: true,
        notarioPublico: true,
        nubariumConf: true,
        nuovoConf: true,
        pagosConf: true,
        paycodeConf: true,
        razonSocialEmpresa: true,
        recompraAppConf: true,
        registroPublico: true,
        representanteEmpresa: true,
        rfcEmpresa: true,
        scoreMaxConf: true,
        sistemaConf: true,
        sitioEmpresa: true,
        smsMasivosConf: true,
        stripeConf: true,
        wtelecomRecargasConf: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Configuration] })
  @ApiNestedQuery(ConfigurationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Configuration",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async configurations(
    @common.Req() request: Request
  ): Promise<Configuration[]> {
    const args = plainToClass(ConfigurationFindManyArgs, request.query);
    return this.service.configurations({
      ...args,
      select: {
        angazaConf: true,
        aspectoConf: true,
        cartaLiquidacionDeuda: true,
        claveEmpresa: true,
        conektaConf: true,
        contactoAutSuperior: true,
        contratoEmpresa: true,
        contratoEmpresaPdf: true,
        correoEmpresa: true,
        correoEnviosConf: true,
        createdUserId: true,
        descripcionEmpresa: true,
        desctoEspecialConf: true,
        direccionEmpresa: true,
        escrituraPublica: true,
        facturacionConf: true,
        fechaRegistro: true,
        firmaRepresentante: true,
        googleConf: true,
        id: true,
        linkSucursalesMaps: true,
        mediosContacto: true,
        nombreEmpresa: true,
        notarioPublico: true,
        nubariumConf: true,
        nuovoConf: true,
        pagosConf: true,
        paycodeConf: true,
        razonSocialEmpresa: true,
        recompraAppConf: true,
        registroPublico: true,
        representanteEmpresa: true,
        rfcEmpresa: true,
        scoreMaxConf: true,
        sistemaConf: true,
        sitioEmpresa: true,
        smsMasivosConf: true,
        stripeConf: true,
        wtelecomRecargasConf: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Configuration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Configuration",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async configuration(
    @common.Param() params: ConfigurationWhereUniqueInput
  ): Promise<Configuration | null> {
    const result = await this.service.configuration({
      where: params,
      select: {
        angazaConf: true,
        aspectoConf: true,
        cartaLiquidacionDeuda: true,
        claveEmpresa: true,
        conektaConf: true,
        contactoAutSuperior: true,
        contratoEmpresa: true,
        contratoEmpresaPdf: true,
        correoEmpresa: true,
        correoEnviosConf: true,
        createdUserId: true,
        descripcionEmpresa: true,
        desctoEspecialConf: true,
        direccionEmpresa: true,
        escrituraPublica: true,
        facturacionConf: true,
        fechaRegistro: true,
        firmaRepresentante: true,
        googleConf: true,
        id: true,
        linkSucursalesMaps: true,
        mediosContacto: true,
        nombreEmpresa: true,
        notarioPublico: true,
        nubariumConf: true,
        nuovoConf: true,
        pagosConf: true,
        paycodeConf: true,
        razonSocialEmpresa: true,
        recompraAppConf: true,
        registroPublico: true,
        representanteEmpresa: true,
        rfcEmpresa: true,
        scoreMaxConf: true,
        sistemaConf: true,
        sitioEmpresa: true,
        smsMasivosConf: true,
        stripeConf: true,
        wtelecomRecargasConf: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Configuration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Configuration",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateConfiguration(
    @common.Param() params: ConfigurationWhereUniqueInput,
    @common.Body() data: ConfigurationUpdateInput
  ): Promise<Configuration | null> {
    try {
      return await this.service.updateConfiguration({
        where: params,
        data: data,
        select: {
          angazaConf: true,
          aspectoConf: true,
          cartaLiquidacionDeuda: true,
          claveEmpresa: true,
          conektaConf: true,
          contactoAutSuperior: true,
          contratoEmpresa: true,
          contratoEmpresaPdf: true,
          correoEmpresa: true,
          correoEnviosConf: true,
          createdUserId: true,
          descripcionEmpresa: true,
          desctoEspecialConf: true,
          direccionEmpresa: true,
          escrituraPublica: true,
          facturacionConf: true,
          fechaRegistro: true,
          firmaRepresentante: true,
          googleConf: true,
          id: true,
          linkSucursalesMaps: true,
          mediosContacto: true,
          nombreEmpresa: true,
          notarioPublico: true,
          nubariumConf: true,
          nuovoConf: true,
          pagosConf: true,
          paycodeConf: true,
          razonSocialEmpresa: true,
          recompraAppConf: true,
          registroPublico: true,
          representanteEmpresa: true,
          rfcEmpresa: true,
          scoreMaxConf: true,
          sistemaConf: true,
          sitioEmpresa: true,
          smsMasivosConf: true,
          stripeConf: true,
          wtelecomRecargasConf: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Configuration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Configuration",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteConfiguration(
    @common.Param() params: ConfigurationWhereUniqueInput
  ): Promise<Configuration | null> {
    try {
      return await this.service.deleteConfiguration({
        where: params,
        select: {
          angazaConf: true,
          aspectoConf: true,
          cartaLiquidacionDeuda: true,
          claveEmpresa: true,
          conektaConf: true,
          contactoAutSuperior: true,
          contratoEmpresa: true,
          contratoEmpresaPdf: true,
          correoEmpresa: true,
          correoEnviosConf: true,
          createdUserId: true,
          descripcionEmpresa: true,
          desctoEspecialConf: true,
          direccionEmpresa: true,
          escrituraPublica: true,
          facturacionConf: true,
          fechaRegistro: true,
          firmaRepresentante: true,
          googleConf: true,
          id: true,
          linkSucursalesMaps: true,
          mediosContacto: true,
          nombreEmpresa: true,
          notarioPublico: true,
          nubariumConf: true,
          nuovoConf: true,
          pagosConf: true,
          paycodeConf: true,
          razonSocialEmpresa: true,
          recompraAppConf: true,
          registroPublico: true,
          representanteEmpresa: true,
          rfcEmpresa: true,
          scoreMaxConf: true,
          sistemaConf: true,
          sitioEmpresa: true,
          smsMasivosConf: true,
          stripeConf: true,
          wtelecomRecargasConf: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
