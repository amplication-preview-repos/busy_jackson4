/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MeasuringUnit as PrismaMeasuringUnit,
  Item as PrismaItem,
} from "@prisma/client";

export class MeasuringUnitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MeasuringUnitCountArgs, "select">
  ): Promise<number> {
    return this.prisma.measuringUnit.count(args);
  }

  async measuringUnits<T extends Prisma.MeasuringUnitFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeasuringUnitFindManyArgs>
  ): Promise<PrismaMeasuringUnit[]> {
    return this.prisma.measuringUnit.findMany<Prisma.MeasuringUnitFindManyArgs>(
      args
    );
  }
  async measuringUnit<T extends Prisma.MeasuringUnitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeasuringUnitFindUniqueArgs>
  ): Promise<PrismaMeasuringUnit | null> {
    return this.prisma.measuringUnit.findUnique(args);
  }
  async createMeasuringUnit<T extends Prisma.MeasuringUnitCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeasuringUnitCreateArgs>
  ): Promise<PrismaMeasuringUnit> {
    return this.prisma.measuringUnit.create<T>(args);
  }
  async updateMeasuringUnit<T extends Prisma.MeasuringUnitUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeasuringUnitUpdateArgs>
  ): Promise<PrismaMeasuringUnit> {
    return this.prisma.measuringUnit.update<T>(args);
  }
  async deleteMeasuringUnit<T extends Prisma.MeasuringUnitDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeasuringUnitDeleteArgs>
  ): Promise<PrismaMeasuringUnit> {
    return this.prisma.measuringUnit.delete(args);
  }

  async findItems(
    parentId: number,
    args: Prisma.ItemFindManyArgs
  ): Promise<PrismaItem[]> {
    return this.prisma.measuringUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .items(args);
  }
}
