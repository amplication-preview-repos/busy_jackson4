/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProtectionCertActivation as PrismaProtectionCertActivation,
  Customer as PrismaCustomer,
  FinancedSale as PrismaFinancedSale,
  Item as PrismaItem,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class ProtectionCertActivationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProtectionCertActivationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.protectionCertActivation.count(args);
  }

  async protectionCertActivations<
    T extends Prisma.ProtectionCertActivationFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProtectionCertActivationFindManyArgs>
  ): Promise<PrismaProtectionCertActivation[]> {
    return this.prisma.protectionCertActivation.findMany<Prisma.ProtectionCertActivationFindManyArgs>(
      args
    );
  }
  async protectionCertActivation<
    T extends Prisma.ProtectionCertActivationFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProtectionCertActivationFindUniqueArgs>
  ): Promise<PrismaProtectionCertActivation | null> {
    return this.prisma.protectionCertActivation.findUnique(args);
  }
  async createProtectionCertActivation<
    T extends Prisma.ProtectionCertActivationCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProtectionCertActivationCreateArgs>
  ): Promise<PrismaProtectionCertActivation> {
    return this.prisma.protectionCertActivation.create<T>(args);
  }
  async updateProtectionCertActivation<
    T extends Prisma.ProtectionCertActivationUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProtectionCertActivationUpdateArgs>
  ): Promise<PrismaProtectionCertActivation> {
    return this.prisma.protectionCertActivation.update<T>(args);
  }
  async deleteProtectionCertActivation<
    T extends Prisma.ProtectionCertActivationDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ProtectionCertActivationDeleteArgs>
  ): Promise<PrismaProtectionCertActivation> {
    return this.prisma.protectionCertActivation.delete(args);
  }

  async getCustomers(parentId: number): Promise<PrismaCustomer | null> {
    return this.prisma.protectionCertActivation
      .findUnique({
        where: { id: parentId },
      })
      .customers();
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.protectionCertActivation
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }

  async getItemsProtectionCertActivationsItemIdToitems(
    parentId: number
  ): Promise<PrismaItem | null> {
    return this.prisma.protectionCertActivation
      .findUnique({
        where: { id: parentId },
      })
      .itemsProtectionCertActivationsItemIdToitems();
  }

  async getItemsProtectionCertActivationsReservedItemIdToitems(
    parentId: number
  ): Promise<PrismaItem | null> {
    return this.prisma.protectionCertActivation
      .findUnique({
        where: { id: parentId },
      })
      .itemsProtectionCertActivationsReservedItemIdToitems();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.protectionCertActivation
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
