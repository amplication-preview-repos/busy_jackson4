/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ProtectionCertActivationService } from "../protectionCertActivation.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProtectionCertActivationCreateInput } from "./ProtectionCertActivationCreateInput";
import { ProtectionCertActivation } from "./ProtectionCertActivation";
import { ProtectionCertActivationFindManyArgs } from "./ProtectionCertActivationFindManyArgs";
import { ProtectionCertActivationWhereUniqueInput } from "./ProtectionCertActivationWhereUniqueInput";
import { ProtectionCertActivationUpdateInput } from "./ProtectionCertActivationUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProtectionCertActivationControllerBase {
  constructor(
    protected readonly service: ProtectionCertActivationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProtectionCertActivation })
  @nestAccessControl.UseRoles({
    resource: "ProtectionCertActivation",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createProtectionCertActivation(
    @common.Body() data: ProtectionCertActivationCreateInput
  ): Promise<ProtectionCertActivation> {
    return await this.service.createProtectionCertActivation({
      data: {
        ...data,

        customers: {
          connect: data.customers,
        },

        financedSales: {
          connect: data.financedSales,
        },

        itemsProtectionCertActivationsItemIdToitems:
          data.itemsProtectionCertActivationsItemIdToitems
            ? {
                connect: data.itemsProtectionCertActivationsItemIdToitems,
              }
            : undefined,

        itemsProtectionCertActivationsReservedItemIdToitems:
          data.itemsProtectionCertActivationsReservedItemIdToitems
            ? {
                connect:
                  data.itemsProtectionCertActivationsReservedItemIdToitems,
              }
            : undefined,

        warehouses: data.warehouses
          ? {
              connect: data.warehouses,
            }
          : undefined,
      },
      select: {
        authUserId: true,
        codigoBloqueo: true,
        codigoBloqueoApartado: true,
        codigoSerie: true,
        codigoSerieApartado: true,
        comentario: true,

        customers: {
          select: {
            id: true,
          },
        },

        deductPaymentId: true,
        devolvioEquipoApartado: true,
        diffPaymentId: true,
        estatus_bloqueo_apartado: true,
        estatusCertProtec: true,
        estatusReparacion: true,
        fechaAct: true,
        fechaAutorizacion: true,
        fechaUltActualizacion: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        idUsrAct: true,

        itemsProtectionCertActivationsItemIdToitems: {
          select: {
            id: true,
          },
        },

        itemsProtectionCertActivationsReservedItemIdToitems: {
          select: {
            id: true,
          },
        },

        pagoDeducible: true,
        pagoDiferencia: true,
        precioLista: true,
        precioListaApartado: true,
        precioReparacion: true,
        protectionCertId: true,
        tipoProtec: true,
        updatedUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ProtectionCertActivation] })
  @ApiNestedQuery(ProtectionCertActivationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProtectionCertActivation",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async protectionCertActivations(
    @common.Req() request: Request
  ): Promise<ProtectionCertActivation[]> {
    const args = plainToClass(
      ProtectionCertActivationFindManyArgs,
      request.query
    );
    return this.service.protectionCertActivations({
      ...args,
      select: {
        authUserId: true,
        codigoBloqueo: true,
        codigoBloqueoApartado: true,
        codigoSerie: true,
        codigoSerieApartado: true,
        comentario: true,

        customers: {
          select: {
            id: true,
          },
        },

        deductPaymentId: true,
        devolvioEquipoApartado: true,
        diffPaymentId: true,
        estatus_bloqueo_apartado: true,
        estatusCertProtec: true,
        estatusReparacion: true,
        fechaAct: true,
        fechaAutorizacion: true,
        fechaUltActualizacion: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        idUsrAct: true,

        itemsProtectionCertActivationsItemIdToitems: {
          select: {
            id: true,
          },
        },

        itemsProtectionCertActivationsReservedItemIdToitems: {
          select: {
            id: true,
          },
        },

        pagoDeducible: true,
        pagoDiferencia: true,
        precioLista: true,
        precioListaApartado: true,
        precioReparacion: true,
        protectionCertId: true,
        tipoProtec: true,
        updatedUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProtectionCertActivation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProtectionCertActivation",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async protectionCertActivation(
    @common.Param() params: ProtectionCertActivationWhereUniqueInput
  ): Promise<ProtectionCertActivation | null> {
    const result = await this.service.protectionCertActivation({
      where: params,
      select: {
        authUserId: true,
        codigoBloqueo: true,
        codigoBloqueoApartado: true,
        codigoSerie: true,
        codigoSerieApartado: true,
        comentario: true,

        customers: {
          select: {
            id: true,
          },
        },

        deductPaymentId: true,
        devolvioEquipoApartado: true,
        diffPaymentId: true,
        estatus_bloqueo_apartado: true,
        estatusCertProtec: true,
        estatusReparacion: true,
        fechaAct: true,
        fechaAutorizacion: true,
        fechaUltActualizacion: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,
        idUsrAct: true,

        itemsProtectionCertActivationsItemIdToitems: {
          select: {
            id: true,
          },
        },

        itemsProtectionCertActivationsReservedItemIdToitems: {
          select: {
            id: true,
          },
        },

        pagoDeducible: true,
        pagoDiferencia: true,
        precioLista: true,
        precioListaApartado: true,
        precioReparacion: true,
        protectionCertId: true,
        tipoProtec: true,
        updatedUserId: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProtectionCertActivation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProtectionCertActivation",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateProtectionCertActivation(
    @common.Param() params: ProtectionCertActivationWhereUniqueInput,
    @common.Body() data: ProtectionCertActivationUpdateInput
  ): Promise<ProtectionCertActivation | null> {
    try {
      return await this.service.updateProtectionCertActivation({
        where: params,
        data: {
          ...data,

          customers: {
            connect: data.customers,
          },

          financedSales: {
            connect: data.financedSales,
          },

          itemsProtectionCertActivationsItemIdToitems:
            data.itemsProtectionCertActivationsItemIdToitems
              ? {
                  connect: data.itemsProtectionCertActivationsItemIdToitems,
                }
              : undefined,

          itemsProtectionCertActivationsReservedItemIdToitems:
            data.itemsProtectionCertActivationsReservedItemIdToitems
              ? {
                  connect:
                    data.itemsProtectionCertActivationsReservedItemIdToitems,
                }
              : undefined,

          warehouses: data.warehouses
            ? {
                connect: data.warehouses,
              }
            : undefined,
        },
        select: {
          authUserId: true,
          codigoBloqueo: true,
          codigoBloqueoApartado: true,
          codigoSerie: true,
          codigoSerieApartado: true,
          comentario: true,

          customers: {
            select: {
              id: true,
            },
          },

          deductPaymentId: true,
          devolvioEquipoApartado: true,
          diffPaymentId: true,
          estatus_bloqueo_apartado: true,
          estatusCertProtec: true,
          estatusReparacion: true,
          fechaAct: true,
          fechaAutorizacion: true,
          fechaUltActualizacion: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          id: true,
          idUsrAct: true,

          itemsProtectionCertActivationsItemIdToitems: {
            select: {
              id: true,
            },
          },

          itemsProtectionCertActivationsReservedItemIdToitems: {
            select: {
              id: true,
            },
          },

          pagoDeducible: true,
          pagoDiferencia: true,
          precioLista: true,
          precioListaApartado: true,
          precioReparacion: true,
          protectionCertId: true,
          tipoProtec: true,
          updatedUserId: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProtectionCertActivation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProtectionCertActivation",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteProtectionCertActivation(
    @common.Param() params: ProtectionCertActivationWhereUniqueInput
  ): Promise<ProtectionCertActivation | null> {
    try {
      return await this.service.deleteProtectionCertActivation({
        where: params,
        select: {
          authUserId: true,
          codigoBloqueo: true,
          codigoBloqueoApartado: true,
          codigoSerie: true,
          codigoSerieApartado: true,
          comentario: true,

          customers: {
            select: {
              id: true,
            },
          },

          deductPaymentId: true,
          devolvioEquipoApartado: true,
          diffPaymentId: true,
          estatus_bloqueo_apartado: true,
          estatusCertProtec: true,
          estatusReparacion: true,
          fechaAct: true,
          fechaAutorizacion: true,
          fechaUltActualizacion: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          id: true,
          idUsrAct: true,

          itemsProtectionCertActivationsItemIdToitems: {
            select: {
              id: true,
            },
          },

          itemsProtectionCertActivationsReservedItemIdToitems: {
            select: {
              id: true,
            },
          },

          pagoDeducible: true,
          pagoDiferencia: true,
          precioLista: true,
          precioListaApartado: true,
          precioReparacion: true,
          protectionCertId: true,
          tipoProtec: true,
          updatedUserId: true,

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
