/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { KardexService } from "../kardex.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { KardexCreateInput } from "./KardexCreateInput";
import { Kardex } from "./Kardex";
import { KardexFindManyArgs } from "./KardexFindManyArgs";
import { KardexWhereUniqueInput } from "./KardexWhereUniqueInput";
import { KardexUpdateInput } from "./KardexUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class KardexControllerBase {
  constructor(
    protected readonly service: KardexService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Kardex })
  @nestAccessControl.UseRoles({
    resource: "Kardex",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createKardex(@common.Body() data: KardexCreateInput): Promise<Kardex> {
    return await this.service.createKardex({
      data: {
        ...data,

        cashSales: data.cashSales
          ? {
              connect: data.cashSales,
            }
          : undefined,

        financedSales: data.financedSales
          ? {
              connect: data.financedSales,
            }
          : undefined,

        items: {
          connect: data.items,
        },

        payments: data.payments
          ? {
              connect: data.payments,
            }
          : undefined,

        personalLoans: data.personalLoans
          ? {
              connect: data.personalLoans,
            }
          : undefined,

        transactions: {
          connect: data.transactions,
        },

        warehouses: {
          connect: data.warehouses,
        },
      },
      select: {
        cantUnidades: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        ivaUnidad: true,

        payments: {
          select: {
            id: true,
          },
        },

        personalLoans: {
          select: {
            id: true,
          },
        },

        precioUnidad: true,
        tipo_inventario: true,

        transactions: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Kardex] })
  @ApiNestedQuery(KardexFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Kardex",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async kardexes(@common.Req() request: Request): Promise<Kardex[]> {
    const args = plainToClass(KardexFindManyArgs, request.query);
    return this.service.kardexes({
      ...args,
      select: {
        cantUnidades: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        ivaUnidad: true,

        payments: {
          select: {
            id: true,
          },
        },

        personalLoans: {
          select: {
            id: true,
          },
        },

        precioUnidad: true,
        tipo_inventario: true,

        transactions: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Kardex })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Kardex",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async kardex(
    @common.Param() params: KardexWhereUniqueInput
  ): Promise<Kardex | null> {
    const result = await this.service.kardex({
      where: params,
      select: {
        cantUnidades: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        financedSales: {
          select: {
            id: true,
          },
        },

        id: true,

        items: {
          select: {
            id: true,
          },
        },

        ivaUnidad: true,

        payments: {
          select: {
            id: true,
          },
        },

        personalLoans: {
          select: {
            id: true,
          },
        },

        precioUnidad: true,
        tipo_inventario: true,

        transactions: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Kardex })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Kardex",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateKardex(
    @common.Param() params: KardexWhereUniqueInput,
    @common.Body() data: KardexUpdateInput
  ): Promise<Kardex | null> {
    try {
      return await this.service.updateKardex({
        where: params,
        data: {
          ...data,

          cashSales: data.cashSales
            ? {
                connect: data.cashSales,
              }
            : undefined,

          financedSales: data.financedSales
            ? {
                connect: data.financedSales,
              }
            : undefined,

          items: {
            connect: data.items,
          },

          payments: data.payments
            ? {
                connect: data.payments,
              }
            : undefined,

          personalLoans: data.personalLoans
            ? {
                connect: data.personalLoans,
              }
            : undefined,

          transactions: {
            connect: data.transactions,
          },

          warehouses: {
            connect: data.warehouses,
          },
        },
        select: {
          cantUnidades: true,

          cashSales: {
            select: {
              id: true,
            },
          },

          financedSales: {
            select: {
              id: true,
            },
          },

          id: true,

          items: {
            select: {
              id: true,
            },
          },

          ivaUnidad: true,

          payments: {
            select: {
              id: true,
            },
          },

          personalLoans: {
            select: {
              id: true,
            },
          },

          precioUnidad: true,
          tipo_inventario: true,

          transactions: {
            select: {
              id: true,
            },
          },

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Kardex })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Kardex",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteKardex(
    @common.Param() params: KardexWhereUniqueInput
  ): Promise<Kardex | null> {
    try {
      return await this.service.deleteKardex({
        where: params,
        select: {
          cantUnidades: true,

          cashSales: {
            select: {
              id: true,
            },
          },

          financedSales: {
            select: {
              id: true,
            },
          },

          id: true,

          items: {
            select: {
              id: true,
            },
          },

          ivaUnidad: true,

          payments: {
            select: {
              id: true,
            },
          },

          personalLoans: {
            select: {
              id: true,
            },
          },

          precioUnidad: true,
          tipo_inventario: true,

          transactions: {
            select: {
              id: true,
            },
          },

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
