/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  ValidateNested,
  IsOptional,
  IsInt,
  IsEnum,
} from "class-validator";
import { Decimal } from "decimal.js";
import { CashSale } from "../../cashSale/base/CashSale";
import { Type } from "class-transformer";
import { FinancedSale } from "../../financedSale/base/FinancedSale";
import { Item } from "../../item/base/Item";
import { Payment } from "../../payment/base/Payment";
import { PersonalLoan } from "../../personalLoan/base/PersonalLoan";
import { EnumKardexTipoInventario } from "./EnumKardexTipoInventario";
import { Transaction } from "../../transaction/base/Transaction";
import { Warehouse } from "../../warehouse/base/Warehouse";

@ObjectType()
class Kardex {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Field(() => Float)
  cantUnidades!: Decimal;

  @ApiProperty({
    required: false,
    type: () => CashSale,
  })
  @ValidateNested()
  @Type(() => CashSale)
  @IsOptional()
  cashSales?: CashSale | null;

  @ApiProperty({
    required: false,
    type: () => FinancedSale,
  })
  @ValidateNested()
  @Type(() => FinancedSale)
  @IsOptional()
  financedSales?: FinancedSale | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: true,
    type: () => Item,
  })
  @ValidateNested()
  @Type(() => Item)
  items?: Item;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  ivaUnidad!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => Payment,
  })
  @ValidateNested()
  @Type(() => Payment)
  @IsOptional()
  payments?: Payment | null;

  @ApiProperty({
    required: false,
    type: () => PersonalLoan,
  })
  @ValidateNested()
  @Type(() => PersonalLoan)
  @IsOptional()
  personalLoans?: PersonalLoan | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  precioUnidad!: Decimal | null;

  @ApiProperty({
    required: true,
    enum: EnumKardexTipoInventario,
  })
  @IsEnum(EnumKardexTipoInventario)
  @Field(() => EnumKardexTipoInventario, {
    nullable: true,
  })
  tipo_inventario?: "T" | "S";

  @ApiProperty({
    required: true,
    type: () => Transaction,
  })
  @ValidateNested()
  @Type(() => Transaction)
  transactions?: Transaction;

  @ApiProperty({
    required: true,
    type: () => Warehouse,
  })
  @ValidateNested()
  @Type(() => Warehouse)
  warehouses?: Warehouse;
}

export { Kardex as Kardex };
