/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ConektaPaymentTransac as PrismaConektaPaymentTransac,
  AirtimeRecharge as PrismaAirtimeRecharge,
  ConektaApiLog as PrismaConektaApiLog,
  OtherCompaniesPayment as PrismaOtherCompaniesPayment,
  Payment as PrismaPayment,
  RecurringPayment as PrismaRecurringPayment,
  FinancedSale as PrismaFinancedSale,
  UserModel as PrismaUserModel,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class ConektaPaymentTransacServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConektaPaymentTransacCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conektaPaymentTransac.count(args);
  }

  async conektaPaymentTransacs<
    T extends Prisma.ConektaPaymentTransacFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ConektaPaymentTransacFindManyArgs>
  ): Promise<PrismaConektaPaymentTransac[]> {
    return this.prisma.conektaPaymentTransac.findMany<Prisma.ConektaPaymentTransacFindManyArgs>(
      args
    );
  }
  async conektaPaymentTransac<
    T extends Prisma.ConektaPaymentTransacFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ConektaPaymentTransacFindUniqueArgs>
  ): Promise<PrismaConektaPaymentTransac | null> {
    return this.prisma.conektaPaymentTransac.findUnique(args);
  }
  async createConektaPaymentTransac<
    T extends Prisma.ConektaPaymentTransacCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ConektaPaymentTransacCreateArgs>
  ): Promise<PrismaConektaPaymentTransac> {
    return this.prisma.conektaPaymentTransac.create<T>(args);
  }
  async updateConektaPaymentTransac<
    T extends Prisma.ConektaPaymentTransacUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ConektaPaymentTransacUpdateArgs>
  ): Promise<PrismaConektaPaymentTransac> {
    return this.prisma.conektaPaymentTransac.update<T>(args);
  }
  async deleteConektaPaymentTransac<
    T extends Prisma.ConektaPaymentTransacDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ConektaPaymentTransacDeleteArgs>
  ): Promise<PrismaConektaPaymentTransac> {
    return this.prisma.conektaPaymentTransac.delete(args);
  }

  async findAirtimeRecharges(
    parentId: number,
    args: Prisma.AirtimeRechargeFindManyArgs
  ): Promise<PrismaAirtimeRecharge[]> {
    return this.prisma.conektaPaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .airtimeRecharges(args);
  }

  async findConektaApiLog(
    parentId: number,
    args: Prisma.ConektaApiLogFindManyArgs
  ): Promise<PrismaConektaApiLog[]> {
    return this.prisma.conektaPaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .conektaApiLog(args);
  }

  async findOtherCompaniesPayments(
    parentId: number,
    args: Prisma.OtherCompaniesPaymentFindManyArgs
  ): Promise<PrismaOtherCompaniesPayment[]> {
    return this.prisma.conektaPaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .otherCompaniesPayments(args);
  }

  async findPayments(
    parentId: number,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.conektaPaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async findRecurringPayments(
    parentId: number,
    args: Prisma.RecurringPaymentFindManyArgs
  ): Promise<PrismaRecurringPayment[]> {
    return this.prisma.conektaPaymentTransac
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recurringPayments(args);
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.conektaPaymentTransac
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }

  async getUsers(parentId: number): Promise<PrismaUserModel | null> {
    return this.prisma.conektaPaymentTransac
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.conektaPaymentTransac
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
