/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ConektaPaymentTransacService } from "../conektaPaymentTransac.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ConektaPaymentTransacCreateInput } from "./ConektaPaymentTransacCreateInput";
import { ConektaPaymentTransac } from "./ConektaPaymentTransac";
import { ConektaPaymentTransacFindManyArgs } from "./ConektaPaymentTransacFindManyArgs";
import { ConektaPaymentTransacWhereUniqueInput } from "./ConektaPaymentTransacWhereUniqueInput";
import { ConektaPaymentTransacUpdateInput } from "./ConektaPaymentTransacUpdateInput";
import { AirtimeRechargeFindManyArgs } from "../../airtimeRecharge/base/AirtimeRechargeFindManyArgs";
import { AirtimeRecharge } from "../../airtimeRecharge/base/AirtimeRecharge";
import { AirtimeRechargeWhereUniqueInput } from "../../airtimeRecharge/base/AirtimeRechargeWhereUniqueInput";
import { ConektaApiLogFindManyArgs } from "../../conektaApiLog/base/ConektaApiLogFindManyArgs";
import { ConektaApiLog } from "../../conektaApiLog/base/ConektaApiLog";
import { ConektaApiLogWhereUniqueInput } from "../../conektaApiLog/base/ConektaApiLogWhereUniqueInput";
import { OtherCompaniesPaymentFindManyArgs } from "../../otherCompaniesPayment/base/OtherCompaniesPaymentFindManyArgs";
import { OtherCompaniesPayment } from "../../otherCompaniesPayment/base/OtherCompaniesPayment";
import { OtherCompaniesPaymentWhereUniqueInput } from "../../otherCompaniesPayment/base/OtherCompaniesPaymentWhereUniqueInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { RecurringPaymentFindManyArgs } from "../../recurringPayment/base/RecurringPaymentFindManyArgs";
import { RecurringPayment } from "../../recurringPayment/base/RecurringPayment";
import { RecurringPaymentWhereUniqueInput } from "../../recurringPayment/base/RecurringPaymentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ConektaPaymentTransacControllerBase {
  constructor(
    protected readonly service: ConektaPaymentTransacService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConektaPaymentTransac })
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createConektaPaymentTransac(
    @common.Body() data: ConektaPaymentTransacCreateInput
  ): Promise<ConektaPaymentTransac> {
    return await this.service.createConektaPaymentTransac({
      data: {
        ...data,

        financedSales: {
          connect: data.financedSales,
        },

        users: data.users
          ? {
              connect: data.users,
            }
          : undefined,

        warehouses: data.warehouses
          ? {
              connect: data.warehouses,
            }
          : undefined,
      },
      select: {
        amount: true,
        authCode: true,
        clabe: true,
        createdAt: true,
        datosPago: true,
        expiresAt: true,
        fechaActualizacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        habilitarPagoRecurrente: true,
        id: true,
        issuer: true,
        last4: true,
        metodoPago: true,
        orderId: true,
        payStatus: true,
        reference: true,
        rutaRef: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ConektaPaymentTransac] })
  @ApiNestedQuery(ConektaPaymentTransacFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async conektaPaymentTransacs(
    @common.Req() request: Request
  ): Promise<ConektaPaymentTransac[]> {
    const args = plainToClass(ConektaPaymentTransacFindManyArgs, request.query);
    return this.service.conektaPaymentTransacs({
      ...args,
      select: {
        amount: true,
        authCode: true,
        clabe: true,
        createdAt: true,
        datosPago: true,
        expiresAt: true,
        fechaActualizacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        habilitarPagoRecurrente: true,
        id: true,
        issuer: true,
        last4: true,
        metodoPago: true,
        orderId: true,
        payStatus: true,
        reference: true,
        rutaRef: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConektaPaymentTransac })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async conektaPaymentTransac(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput
  ): Promise<ConektaPaymentTransac | null> {
    const result = await this.service.conektaPaymentTransac({
      where: params,
      select: {
        amount: true,
        authCode: true,
        clabe: true,
        createdAt: true,
        datosPago: true,
        expiresAt: true,
        fechaActualizacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        habilitarPagoRecurrente: true,
        id: true,
        issuer: true,
        last4: true,
        metodoPago: true,
        orderId: true,
        payStatus: true,
        reference: true,
        rutaRef: true,
        updatedAt: true,

        users: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConektaPaymentTransac })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateConektaPaymentTransac(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() data: ConektaPaymentTransacUpdateInput
  ): Promise<ConektaPaymentTransac | null> {
    try {
      return await this.service.updateConektaPaymentTransac({
        where: params,
        data: {
          ...data,

          financedSales: {
            connect: data.financedSales,
          },

          users: data.users
            ? {
                connect: data.users,
              }
            : undefined,

          warehouses: data.warehouses
            ? {
                connect: data.warehouses,
              }
            : undefined,
        },
        select: {
          amount: true,
          authCode: true,
          clabe: true,
          createdAt: true,
          datosPago: true,
          expiresAt: true,
          fechaActualizacion: true,
          fechaRegistro: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          habilitarPagoRecurrente: true,
          id: true,
          issuer: true,
          last4: true,
          metodoPago: true,
          orderId: true,
          payStatus: true,
          reference: true,
          rutaRef: true,
          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConektaPaymentTransac })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteConektaPaymentTransac(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput
  ): Promise<ConektaPaymentTransac | null> {
    try {
      return await this.service.deleteConektaPaymentTransac({
        where: params,
        select: {
          amount: true,
          authCode: true,
          clabe: true,
          createdAt: true,
          datosPago: true,
          expiresAt: true,
          fechaActualizacion: true,
          fechaRegistro: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          habilitarPagoRecurrente: true,
          id: true,
          issuer: true,
          last4: true,
          metodoPago: true,
          orderId: true,
          payStatus: true,
          reference: true,
          rutaRef: true,
          updatedAt: true,

          users: {
            select: {
              id: true,
            },
          },

          warehouses: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/airtimeRecharges")
  @ApiNestedQuery(AirtimeRechargeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AirtimeRecharge",
    action: "read",
    possession: "any",
  })
  async findAirtimeRecharges(
    @common.Req() request: Request,
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput
  ): Promise<AirtimeRecharge[]> {
    const query = plainToClass(AirtimeRechargeFindManyArgs, request.query);
    const results = await this.service.findAirtimeRecharges(params.id, {
      ...query,
      select: {
        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        descripcion: true,
        fechaRegistro: true,
        id: true,
        idTransaccion: true,
        monto: true,
        numeroTel: true,
        operadora: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        sku: true,
        tipo: true,
        vigencia: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/airtimeRecharges")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async connectAirtimeRecharges(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: AirtimeRechargeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      airtimeRecharges: {
        connect: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/airtimeRecharges")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async updateAirtimeRecharges(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: AirtimeRechargeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      airtimeRecharges: {
        set: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/airtimeRecharges")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async disconnectAirtimeRecharges(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: AirtimeRechargeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      airtimeRecharges: {
        disconnect: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/conektaApiLog")
  @ApiNestedQuery(ConektaApiLogFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ConektaApiLog",
    action: "read",
    possession: "any",
  })
  async findConektaApiLog(
    @common.Req() request: Request,
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput
  ): Promise<ConektaApiLog[]> {
    const query = plainToClass(ConektaApiLogFindManyArgs, request.query);
    const results = await this.service.findConektaApiLog(params.id, {
      ...query,
      select: {
        callDate: true,
        calledMethod: true,
        callTime: true,
        calltrace: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        dataSend: true,
        id: true,
        response: true,
        responseDatetime: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/conektaApiLog")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async connectConektaApiLog(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: ConektaApiLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaApiLog: {
        connect: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/conektaApiLog")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async updateConektaApiLog(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: ConektaApiLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaApiLog: {
        set: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/conektaApiLog")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async disconnectConektaApiLog(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: ConektaApiLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      conektaApiLog: {
        disconnect: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/otherCompaniesPayments")
  @ApiNestedQuery(OtherCompaniesPaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OtherCompaniesPayment",
    action: "read",
    possession: "any",
  })
  async findOtherCompaniesPayments(
    @common.Req() request: Request,
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput
  ): Promise<OtherCompaniesPayment[]> {
    const query = plainToClass(
      OtherCompaniesPaymentFindManyArgs,
      request.query
    );
    const results = await this.service.findOtherCompaniesPayments(params.id, {
      ...query,
      select: {
        abonoExtra: true,
        cambioDevuelto: true,
        cantidadRecibida: true,
        capitalPagado: true,
        codigoBloqueo: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        desctoAplicado: true,
        desdeWebhook: true,
        estatus_pago: true,
        fechaPago: true,
        fechaProxVenc: true,
        fechaVenc: true,
        formaPago: true,
        horaPago: true,
        id: true,
        interesPagado: true,
        numPago: true,
        opcionCambio: true,
        opcionPago: true,
        pagosAdelantados: true,
        receivedUserId: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },

        tipo_pago: true,

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/otherCompaniesPayments")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async connectOtherCompaniesPayments(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: OtherCompaniesPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherCompaniesPayments: {
        connect: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/otherCompaniesPayments")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async updateOtherCompaniesPayments(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: OtherCompaniesPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherCompaniesPayments: {
        set: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/otherCompaniesPayments")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async disconnectOtherCompaniesPayments(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: OtherCompaniesPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      otherCompaniesPayments: {
        disconnect: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        abonoExtra: true,
        cambioDevuelto: true,
        canceledUserId: true,
        cantidadRecibida: true,
        capitalPagado: true,

        cashCountDetails: {
          select: {
            id: true,
          },
        },

        comentariosPago: true,
        comprobantePago: true,

        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        customerId: true,
        desctoAplicado: true,
        desdeWebhook: true,
        fechaCancelo: true,
        fechaPago: true,
        fechaProxVenc: true,
        fechaVenc: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        formaPago: true,
        horaPago: true,
        id: true,
        interesPagado: true,
        opcionCambio: true,
        opcionPago: true,
        pagoRecurrente: true,
        pagosAdelantados: true,
        pathFileDiscount: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        payCount: true,
        pay_status: true,
        pay_type: true,
        percentageDiscountDownPayment: true,

        personalLoans: {
          select: {
            id: true,
          },
        },

        promotionId: true,
        receivedUserId: true,

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async connectPayments(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async updatePayments(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async disconnectPayments(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/recurringPayments")
  @ApiNestedQuery(RecurringPaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RecurringPayment",
    action: "read",
    possession: "any",
  })
  async findRecurringPayments(
    @common.Req() request: Request,
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput
  ): Promise<RecurringPayment[]> {
    const query = plainToClass(RecurringPaymentFindManyArgs, request.query);
    const results = await this.service.findRecurringPayments(params.id, {
      ...query,
      select: {
        conektaPaymentTransacs: {
          select: {
            id: true,
          },
        },

        estatus_intento: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        horaRegistro: true,
        id: true,
        mensajeIntento: true,

        paycodePaymentTransacs: {
          select: {
            id: true,
          },
        },

        stripePaymentTransacs: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recurringPayments")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async connectRecurringPayments(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: RecurringPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recurringPayments: {
        connect: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recurringPayments")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async updateRecurringPayments(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: RecurringPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recurringPayments: {
        set: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recurringPayments")
  @nestAccessControl.UseRoles({
    resource: "ConektaPaymentTransac",
    action: "update",
    possession: "any",
  })
  async disconnectRecurringPayments(
    @common.Param() params: ConektaPaymentTransacWhereUniqueInput,
    @common.Body() body: RecurringPaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recurringPayments: {
        disconnect: body,
      },
    };
    await this.service.updateConektaPaymentTransac({
      where: params,
      data,
      select: { id: true },
    });
  }
}
