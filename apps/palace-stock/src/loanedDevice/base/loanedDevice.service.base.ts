/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LoanedDevice as PrismaLoanedDevice,
  Customer as PrismaCustomer,
  FinancedSale as PrismaFinancedSale,
  Item as PrismaItem,
  UserModel as PrismaUserModel,
} from "@prisma/client";

export class LoanedDeviceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LoanedDeviceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.loanedDevice.count(args);
  }

  async loanedDevices<T extends Prisma.LoanedDeviceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanedDeviceFindManyArgs>
  ): Promise<PrismaLoanedDevice[]> {
    return this.prisma.loanedDevice.findMany<Prisma.LoanedDeviceFindManyArgs>(
      args
    );
  }
  async loanedDevice<T extends Prisma.LoanedDeviceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanedDeviceFindUniqueArgs>
  ): Promise<PrismaLoanedDevice | null> {
    return this.prisma.loanedDevice.findUnique(args);
  }
  async createLoanedDevice<T extends Prisma.LoanedDeviceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanedDeviceCreateArgs>
  ): Promise<PrismaLoanedDevice> {
    return this.prisma.loanedDevice.create<T>(args);
  }
  async updateLoanedDevice<T extends Prisma.LoanedDeviceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanedDeviceUpdateArgs>
  ): Promise<PrismaLoanedDevice> {
    return this.prisma.loanedDevice.update<T>(args);
  }
  async deleteLoanedDevice<T extends Prisma.LoanedDeviceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoanedDeviceDeleteArgs>
  ): Promise<PrismaLoanedDevice> {
    return this.prisma.loanedDevice.delete(args);
  }

  async getCustomers(parentId: number): Promise<PrismaCustomer | null> {
    return this.prisma.loanedDevice
      .findUnique({
        where: { id: parentId },
      })
      .customers();
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.loanedDevice
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }

  async getItems(parentId: number): Promise<PrismaItem | null> {
    return this.prisma.loanedDevice
      .findUnique({
        where: { id: parentId },
      })
      .items();
  }

  async getUsersLoanedDevicesCreatedUserIdTousers(
    parentId: number
  ): Promise<PrismaUserModel | null> {
    return this.prisma.loanedDevice
      .findUnique({
        where: { id: parentId },
      })
      .usersLoanedDevicesCreatedUserIdTousers();
  }

  async getUsersLoanedDevicesReturnedUserIdTousers(
    parentId: number
  ): Promise<PrismaUserModel | null> {
    return this.prisma.loanedDevice
      .findUnique({
        where: { id: parentId },
      })
      .usersLoanedDevicesReturnedUserIdTousers();
  }
}
