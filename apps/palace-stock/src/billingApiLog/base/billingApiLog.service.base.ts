/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BillingApiLog as PrismaBillingApiLog } from "@prisma/client";

export class BillingApiLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BillingApiLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.billingApiLog.count(args);
  }

  async billingApiLogs<T extends Prisma.BillingApiLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingApiLogFindManyArgs>
  ): Promise<PrismaBillingApiLog[]> {
    return this.prisma.billingApiLog.findMany<Prisma.BillingApiLogFindManyArgs>(
      args
    );
  }
  async billingApiLog<T extends Prisma.BillingApiLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingApiLogFindUniqueArgs>
  ): Promise<PrismaBillingApiLog | null> {
    return this.prisma.billingApiLog.findUnique(args);
  }
  async createBillingApiLog<T extends Prisma.BillingApiLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingApiLogCreateArgs>
  ): Promise<PrismaBillingApiLog> {
    return this.prisma.billingApiLog.create<T>(args);
  }
  async updateBillingApiLog<T extends Prisma.BillingApiLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingApiLogUpdateArgs>
  ): Promise<PrismaBillingApiLog> {
    return this.prisma.billingApiLog.update<T>(args);
  }
  async deleteBillingApiLog<T extends Prisma.BillingApiLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BillingApiLogDeleteArgs>
  ): Promise<PrismaBillingApiLog> {
    return this.prisma.billingApiLog.delete(args);
  }
}
