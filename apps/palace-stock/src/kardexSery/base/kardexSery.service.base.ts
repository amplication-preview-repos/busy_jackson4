/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  KardexSery as PrismaKardexSery,
  Item as PrismaItem,
  Transaction as PrismaTransaction,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class KardexSeryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.KardexSeryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.kardexSery.count(args);
  }

  async kardexSeries<T extends Prisma.KardexSeryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.KardexSeryFindManyArgs>
  ): Promise<PrismaKardexSery[]> {
    return this.prisma.kardexSery.findMany<Prisma.KardexSeryFindManyArgs>(args);
  }
  async kardexSery<T extends Prisma.KardexSeryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.KardexSeryFindUniqueArgs>
  ): Promise<PrismaKardexSery | null> {
    return this.prisma.kardexSery.findUnique(args);
  }
  async createKardexSery<T extends Prisma.KardexSeryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.KardexSeryCreateArgs>
  ): Promise<PrismaKardexSery> {
    return this.prisma.kardexSery.create<T>(args);
  }
  async updateKardexSery<T extends Prisma.KardexSeryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.KardexSeryUpdateArgs>
  ): Promise<PrismaKardexSery> {
    return this.prisma.kardexSery.update<T>(args);
  }
  async deleteKardexSery<T extends Prisma.KardexSeryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.KardexSeryDeleteArgs>
  ): Promise<PrismaKardexSery> {
    return this.prisma.kardexSery.delete(args);
  }

  async getItems(parentId: number): Promise<PrismaItem | null> {
    return this.prisma.kardexSery
      .findUnique({
        where: { id: parentId },
      })
      .items();
  }

  async getTransactions(parentId: number): Promise<PrismaTransaction | null> {
    return this.prisma.kardexSery
      .findUnique({
        where: { id: parentId },
      })
      .transactions();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.kardexSery
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
