/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NuovoApiLog as PrismaNuovoApiLog } from "@prisma/client";

export class NuovoApiLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NuovoApiLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.nuovoApiLog.count(args);
  }

  async nuovoApiLogs<T extends Prisma.NuovoApiLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NuovoApiLogFindManyArgs>
  ): Promise<PrismaNuovoApiLog[]> {
    return this.prisma.nuovoApiLog.findMany<Prisma.NuovoApiLogFindManyArgs>(
      args
    );
  }
  async nuovoApiLog<T extends Prisma.NuovoApiLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NuovoApiLogFindUniqueArgs>
  ): Promise<PrismaNuovoApiLog | null> {
    return this.prisma.nuovoApiLog.findUnique(args);
  }
  async createNuovoApiLog<T extends Prisma.NuovoApiLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NuovoApiLogCreateArgs>
  ): Promise<PrismaNuovoApiLog> {
    return this.prisma.nuovoApiLog.create<T>(args);
  }
  async updateNuovoApiLog<T extends Prisma.NuovoApiLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NuovoApiLogUpdateArgs>
  ): Promise<PrismaNuovoApiLog> {
    return this.prisma.nuovoApiLog.update<T>(args);
  }
  async deleteNuovoApiLog<T extends Prisma.NuovoApiLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NuovoApiLogDeleteArgs>
  ): Promise<PrismaNuovoApiLog> {
    return this.prisma.nuovoApiLog.delete(args);
  }
}
