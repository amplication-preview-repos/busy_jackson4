/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ArticleToTag as PrismaArticleToTag,
  Article as PrismaArticle,
  Tag as PrismaTag,
} from "@prisma/client";

export class ArticleToTagServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ArticleToTagCountArgs, "select">
  ): Promise<number> {
    return this.prisma.articleToTag.count(args);
  }

  async articleToTags<T extends Prisma.ArticleToTagFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArticleToTagFindManyArgs>
  ): Promise<PrismaArticleToTag[]> {
    return this.prisma.articleToTag.findMany<Prisma.ArticleToTagFindManyArgs>(
      args
    );
  }
  async articleToTag<T extends Prisma.ArticleToTagFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArticleToTagFindUniqueArgs>
  ): Promise<PrismaArticleToTag | null> {
    return this.prisma.articleToTag.findUnique(args);
  }
  async createArticleToTag<T extends Prisma.ArticleToTagCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArticleToTagCreateArgs>
  ): Promise<PrismaArticleToTag> {
    return this.prisma.articleToTag.create<T>(args);
  }
  async updateArticleToTag<T extends Prisma.ArticleToTagUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArticleToTagUpdateArgs>
  ): Promise<PrismaArticleToTag> {
    return this.prisma.articleToTag.update<T>(args);
  }
  async deleteArticleToTag<T extends Prisma.ArticleToTagDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArticleToTagDeleteArgs>
  ): Promise<PrismaArticleToTag> {
    return this.prisma.articleToTag.delete(args);
  }

  async getArticle(parentId: number): Promise<PrismaArticle | null> {
    return this.prisma.articleToTag
      .findUnique({
        where: { id: parentId },
      })
      .article();
  }

  async getTag(parentId: number): Promise<PrismaTag | null> {
    return this.prisma.articleToTag
      .findUnique({
        where: { id: parentId },
      })
      .tag();
  }
}
