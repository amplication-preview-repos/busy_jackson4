/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AirtimeRecharge as PrismaAirtimeRecharge,
  ConektaPaymentTransac as PrismaConektaPaymentTransac,
  PaycodePaymentTransac as PrismaPaycodePaymentTransac,
} from "@prisma/client";

export class AirtimeRechargeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AirtimeRechargeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.airtimeRecharge.count(args);
  }

  async airtimeRecharges<T extends Prisma.AirtimeRechargeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AirtimeRechargeFindManyArgs>
  ): Promise<PrismaAirtimeRecharge[]> {
    return this.prisma.airtimeRecharge.findMany<Prisma.AirtimeRechargeFindManyArgs>(
      args
    );
  }
  async airtimeRecharge<T extends Prisma.AirtimeRechargeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AirtimeRechargeFindUniqueArgs>
  ): Promise<PrismaAirtimeRecharge | null> {
    return this.prisma.airtimeRecharge.findUnique(args);
  }
  async createAirtimeRecharge<T extends Prisma.AirtimeRechargeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AirtimeRechargeCreateArgs>
  ): Promise<PrismaAirtimeRecharge> {
    return this.prisma.airtimeRecharge.create<T>(args);
  }
  async updateAirtimeRecharge<T extends Prisma.AirtimeRechargeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AirtimeRechargeUpdateArgs>
  ): Promise<PrismaAirtimeRecharge> {
    return this.prisma.airtimeRecharge.update<T>(args);
  }
  async deleteAirtimeRecharge<T extends Prisma.AirtimeRechargeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AirtimeRechargeDeleteArgs>
  ): Promise<PrismaAirtimeRecharge> {
    return this.prisma.airtimeRecharge.delete(args);
  }

  async getConektaPaymentTransacs(
    parentId: number
  ): Promise<PrismaConektaPaymentTransac | null> {
    return this.prisma.airtimeRecharge
      .findUnique({
        where: { id: parentId },
      })
      .conektaPaymentTransacs();
  }

  async getPaycodePaymentTransacs(
    parentId: number
  ): Promise<PrismaPaycodePaymentTransac | null> {
    return this.prisma.airtimeRecharge
      .findUnique({
        where: { id: parentId },
      })
      .paycodePaymentTransacs();
  }
}
