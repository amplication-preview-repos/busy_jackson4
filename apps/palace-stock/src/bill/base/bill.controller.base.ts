/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BillService } from "../bill.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BillCreateInput } from "./BillCreateInput";
import { Bill } from "./Bill";
import { BillFindManyArgs } from "./BillFindManyArgs";
import { BillWhereUniqueInput } from "./BillWhereUniqueInput";
import { BillUpdateInput } from "./BillUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BillControllerBase {
  constructor(
    protected readonly service: BillService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bill })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBill(@common.Body() data: BillCreateInput): Promise<Bill> {
    return await this.service.createBill({
      data: {
        ...data,

        cashSales: data.cashSales
          ? {
              connect: data.cashSales,
            }
          : undefined,

        financedSales: data.financedSales
          ? {
              connect: data.financedSales,
            }
          : undefined,

        payments: data.payments
          ? {
              connect: data.payments,
            }
          : undefined,
      },
      select: {
        billConcept: true,
        billingId: true,
        bill_status: true,
        canceledUserId: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        clientCode: true,
        codigoConcepto: true,
        complementId: true,
        createdUserId: true,
        engancheFinanc: true,
        factura_cerrada: true,
        fechaActualizacion: true,
        fechaCancelacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        folio: true,
        horaRegistro: true,
        id: true,
        mensajeEstatus: true,
        montoFactura: true,

        payments: {
          select: {
            id: true,
          },
        },

        referenceId: true,
        rutaPdf: true,
        rutaXml: true,
        saldoFactura: true,
        saldoFacturaTemp: true,
        serie: true,
        stampedAt: true,
        tipo_docto: true,
        tipo_sucursal: true,
        updatedUserId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Bill] })
  @ApiNestedQuery(BillFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bills(@common.Req() request: Request): Promise<Bill[]> {
    const args = plainToClass(BillFindManyArgs, request.query);
    return this.service.bills({
      ...args,
      select: {
        billConcept: true,
        billingId: true,
        bill_status: true,
        canceledUserId: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        clientCode: true,
        codigoConcepto: true,
        complementId: true,
        createdUserId: true,
        engancheFinanc: true,
        factura_cerrada: true,
        fechaActualizacion: true,
        fechaCancelacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        folio: true,
        horaRegistro: true,
        id: true,
        mensajeEstatus: true,
        montoFactura: true,

        payments: {
          select: {
            id: true,
          },
        },

        referenceId: true,
        rutaPdf: true,
        rutaXml: true,
        saldoFactura: true,
        saldoFacturaTemp: true,
        serie: true,
        stampedAt: true,
        tipo_docto: true,
        tipo_sucursal: true,
        updatedUserId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bill(
    @common.Param() params: BillWhereUniqueInput
  ): Promise<Bill | null> {
    const result = await this.service.bill({
      where: params,
      select: {
        billConcept: true,
        billingId: true,
        bill_status: true,
        canceledUserId: true,

        cashSales: {
          select: {
            id: true,
          },
        },

        clientCode: true,
        codigoConcepto: true,
        complementId: true,
        createdUserId: true,
        engancheFinanc: true,
        factura_cerrada: true,
        fechaActualizacion: true,
        fechaCancelacion: true,
        fechaRegistro: true,

        financedSales: {
          select: {
            id: true,
          },
        },

        folio: true,
        horaRegistro: true,
        id: true,
        mensajeEstatus: true,
        montoFactura: true,

        payments: {
          select: {
            id: true,
          },
        },

        referenceId: true,
        rutaPdf: true,
        rutaXml: true,
        saldoFactura: true,
        saldoFacturaTemp: true,
        serie: true,
        stampedAt: true,
        tipo_docto: true,
        tipo_sucursal: true,
        updatedUserId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBill(
    @common.Param() params: BillWhereUniqueInput,
    @common.Body() data: BillUpdateInput
  ): Promise<Bill | null> {
    try {
      return await this.service.updateBill({
        where: params,
        data: {
          ...data,

          cashSales: data.cashSales
            ? {
                connect: data.cashSales,
              }
            : undefined,

          financedSales: data.financedSales
            ? {
                connect: data.financedSales,
              }
            : undefined,

          payments: data.payments
            ? {
                connect: data.payments,
              }
            : undefined,
        },
        select: {
          billConcept: true,
          billingId: true,
          bill_status: true,
          canceledUserId: true,

          cashSales: {
            select: {
              id: true,
            },
          },

          clientCode: true,
          codigoConcepto: true,
          complementId: true,
          createdUserId: true,
          engancheFinanc: true,
          factura_cerrada: true,
          fechaActualizacion: true,
          fechaCancelacion: true,
          fechaRegistro: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          folio: true,
          horaRegistro: true,
          id: true,
          mensajeEstatus: true,
          montoFactura: true,

          payments: {
            select: {
              id: true,
            },
          },

          referenceId: true,
          rutaPdf: true,
          rutaXml: true,
          saldoFactura: true,
          saldoFacturaTemp: true,
          serie: true,
          stampedAt: true,
          tipo_docto: true,
          tipo_sucursal: true,
          updatedUserId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBill(
    @common.Param() params: BillWhereUniqueInput
  ): Promise<Bill | null> {
    try {
      return await this.service.deleteBill({
        where: params,
        select: {
          billConcept: true,
          billingId: true,
          bill_status: true,
          canceledUserId: true,

          cashSales: {
            select: {
              id: true,
            },
          },

          clientCode: true,
          codigoConcepto: true,
          complementId: true,
          createdUserId: true,
          engancheFinanc: true,
          factura_cerrada: true,
          fechaActualizacion: true,
          fechaCancelacion: true,
          fechaRegistro: true,

          financedSales: {
            select: {
              id: true,
            },
          },

          folio: true,
          horaRegistro: true,
          id: true,
          mensajeEstatus: true,
          montoFactura: true,

          payments: {
            select: {
              id: true,
            },
          },

          referenceId: true,
          rutaPdf: true,
          rutaXml: true,
          saldoFactura: true,
          saldoFacturaTemp: true,
          serie: true,
          stampedAt: true,
          tipo_docto: true,
          tipo_sucursal: true,
          updatedUserId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
