/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PaymentInterest as PrismaPaymentInterest,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class PaymentInterestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentInterestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentInterest.count(args);
  }

  async paymentInterests<T extends Prisma.PaymentInterestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentInterestFindManyArgs>
  ): Promise<PrismaPaymentInterest[]> {
    return this.prisma.paymentInterest.findMany<Prisma.PaymentInterestFindManyArgs>(
      args
    );
  }
  async paymentInterest<T extends Prisma.PaymentInterestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentInterestFindUniqueArgs>
  ): Promise<PrismaPaymentInterest | null> {
    return this.prisma.paymentInterest.findUnique(args);
  }
  async createPaymentInterest<T extends Prisma.PaymentInterestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentInterestCreateArgs>
  ): Promise<PrismaPaymentInterest> {
    return this.prisma.paymentInterest.create<T>(args);
  }
  async updatePaymentInterest<T extends Prisma.PaymentInterestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentInterestUpdateArgs>
  ): Promise<PrismaPaymentInterest> {
    return this.prisma.paymentInterest.update<T>(args);
  }
  async deletePaymentInterest<T extends Prisma.PaymentInterestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentInterestDeleteArgs>
  ): Promise<PrismaPaymentInterest> {
    return this.prisma.paymentInterest.delete(args);
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.paymentInterest
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
