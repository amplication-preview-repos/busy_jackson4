/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MandatoryDocument as PrismaMandatoryDocument,
  WarehouseMandatoryDoc as PrismaWarehouseMandatoryDoc,
  DocumentType as PrismaDocumentType,
} from "@prisma/client";

export class MandatoryDocumentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MandatoryDocumentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mandatoryDocument.count(args);
  }

  async mandatoryDocuments<T extends Prisma.MandatoryDocumentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MandatoryDocumentFindManyArgs>
  ): Promise<PrismaMandatoryDocument[]> {
    return this.prisma.mandatoryDocument.findMany<Prisma.MandatoryDocumentFindManyArgs>(
      args
    );
  }
  async mandatoryDocument<T extends Prisma.MandatoryDocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MandatoryDocumentFindUniqueArgs>
  ): Promise<PrismaMandatoryDocument | null> {
    return this.prisma.mandatoryDocument.findUnique(args);
  }
  async createMandatoryDocument<T extends Prisma.MandatoryDocumentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MandatoryDocumentCreateArgs>
  ): Promise<PrismaMandatoryDocument> {
    return this.prisma.mandatoryDocument.create<T>(args);
  }
  async updateMandatoryDocument<T extends Prisma.MandatoryDocumentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MandatoryDocumentUpdateArgs>
  ): Promise<PrismaMandatoryDocument> {
    return this.prisma.mandatoryDocument.update<T>(args);
  }
  async deleteMandatoryDocument<T extends Prisma.MandatoryDocumentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MandatoryDocumentDeleteArgs>
  ): Promise<PrismaMandatoryDocument> {
    return this.prisma.mandatoryDocument.delete(args);
  }

  async findWarehouseMandatoryDocs(
    parentId: number,
    args: Prisma.WarehouseMandatoryDocFindManyArgs
  ): Promise<PrismaWarehouseMandatoryDoc[]> {
    return this.prisma.mandatoryDocument
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .warehouseMandatoryDocs(args);
  }

  async getDocumentTypes(parentId: number): Promise<PrismaDocumentType | null> {
    return this.prisma.mandatoryDocument
      .findUnique({
        where: { id: parentId },
      })
      .documentTypes();
  }
}
