/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MandatoryDocumentService } from "../mandatoryDocument.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MandatoryDocumentCreateInput } from "./MandatoryDocumentCreateInput";
import { MandatoryDocument } from "./MandatoryDocument";
import { MandatoryDocumentFindManyArgs } from "./MandatoryDocumentFindManyArgs";
import { MandatoryDocumentWhereUniqueInput } from "./MandatoryDocumentWhereUniqueInput";
import { MandatoryDocumentUpdateInput } from "./MandatoryDocumentUpdateInput";
import { WarehouseMandatoryDocFindManyArgs } from "../../warehouseMandatoryDoc/base/WarehouseMandatoryDocFindManyArgs";
import { WarehouseMandatoryDoc } from "../../warehouseMandatoryDoc/base/WarehouseMandatoryDoc";
import { WarehouseMandatoryDocWhereUniqueInput } from "../../warehouseMandatoryDoc/base/WarehouseMandatoryDocWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MandatoryDocumentControllerBase {
  constructor(
    protected readonly service: MandatoryDocumentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MandatoryDocument })
  @nestAccessControl.UseRoles({
    resource: "MandatoryDocument",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMandatoryDocument(
    @common.Body() data: MandatoryDocumentCreateInput
  ): Promise<MandatoryDocument> {
    return await this.service.createMandatoryDocument({
      data: {
        ...data,

        documentTypes: data.documentTypes
          ? {
              connect: data.documentTypes,
            }
          : undefined,
      },
      select: {
        documentTypes: {
          select: {
            id: true,
          },
        },

        id: true,
        processType: true,
        relationship: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MandatoryDocument] })
  @ApiNestedQuery(MandatoryDocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MandatoryDocument",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async mandatoryDocuments(
    @common.Req() request: Request
  ): Promise<MandatoryDocument[]> {
    const args = plainToClass(MandatoryDocumentFindManyArgs, request.query);
    return this.service.mandatoryDocuments({
      ...args,
      select: {
        documentTypes: {
          select: {
            id: true,
          },
        },

        id: true,
        processType: true,
        relationship: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MandatoryDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MandatoryDocument",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async mandatoryDocument(
    @common.Param() params: MandatoryDocumentWhereUniqueInput
  ): Promise<MandatoryDocument | null> {
    const result = await this.service.mandatoryDocument({
      where: params,
      select: {
        documentTypes: {
          select: {
            id: true,
          },
        },

        id: true,
        processType: true,
        relationship: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MandatoryDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MandatoryDocument",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMandatoryDocument(
    @common.Param() params: MandatoryDocumentWhereUniqueInput,
    @common.Body() data: MandatoryDocumentUpdateInput
  ): Promise<MandatoryDocument | null> {
    try {
      return await this.service.updateMandatoryDocument({
        where: params,
        data: {
          ...data,

          documentTypes: data.documentTypes
            ? {
                connect: data.documentTypes,
              }
            : undefined,
        },
        select: {
          documentTypes: {
            select: {
              id: true,
            },
          },

          id: true,
          processType: true,
          relationship: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MandatoryDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MandatoryDocument",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMandatoryDocument(
    @common.Param() params: MandatoryDocumentWhereUniqueInput
  ): Promise<MandatoryDocument | null> {
    try {
      return await this.service.deleteMandatoryDocument({
        where: params,
        select: {
          documentTypes: {
            select: {
              id: true,
            },
          },

          id: true,
          processType: true,
          relationship: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/warehouseMandatoryDocs")
  @ApiNestedQuery(WarehouseMandatoryDocFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WarehouseMandatoryDoc",
    action: "read",
    possession: "any",
  })
  async findWarehouseMandatoryDocs(
    @common.Req() request: Request,
    @common.Param() params: MandatoryDocumentWhereUniqueInput
  ): Promise<WarehouseMandatoryDoc[]> {
    const query = plainToClass(
      WarehouseMandatoryDocFindManyArgs,
      request.query
    );
    const results = await this.service.findWarehouseMandatoryDocs(params.id, {
      ...query,
      select: {
        id: true,

        mandatoryDocuments: {
          select: {
            id: true,
          },
        },

        warehouses: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/warehouseMandatoryDocs")
  @nestAccessControl.UseRoles({
    resource: "MandatoryDocument",
    action: "update",
    possession: "any",
  })
  async connectWarehouseMandatoryDocs(
    @common.Param() params: MandatoryDocumentWhereUniqueInput,
    @common.Body() body: WarehouseMandatoryDocWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseMandatoryDocs: {
        connect: body,
      },
    };
    await this.service.updateMandatoryDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/warehouseMandatoryDocs")
  @nestAccessControl.UseRoles({
    resource: "MandatoryDocument",
    action: "update",
    possession: "any",
  })
  async updateWarehouseMandatoryDocs(
    @common.Param() params: MandatoryDocumentWhereUniqueInput,
    @common.Body() body: WarehouseMandatoryDocWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseMandatoryDocs: {
        set: body,
      },
    };
    await this.service.updateMandatoryDocument({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/warehouseMandatoryDocs")
  @nestAccessControl.UseRoles({
    resource: "MandatoryDocument",
    action: "update",
    possession: "any",
  })
  async disconnectWarehouseMandatoryDocs(
    @common.Param() params: MandatoryDocumentWhereUniqueInput,
    @common.Body() body: WarehouseMandatoryDocWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      warehouseMandatoryDocs: {
        disconnect: body,
      },
    };
    await this.service.updateMandatoryDocument({
      where: params,
      data,
      select: { id: true },
    });
  }
}
