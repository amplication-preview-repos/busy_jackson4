/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FinancedSalesLog as PrismaFinancedSalesLog,
  FinancedSale as PrismaFinancedSale,
} from "@prisma/client";

export class FinancedSalesLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FinancedSalesLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.financedSalesLog.count(args);
  }

  async financedSalesLogs<T extends Prisma.FinancedSalesLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedSalesLogFindManyArgs>
  ): Promise<PrismaFinancedSalesLog[]> {
    return this.prisma.financedSalesLog.findMany<Prisma.FinancedSalesLogFindManyArgs>(
      args
    );
  }
  async financedSalesLog<T extends Prisma.FinancedSalesLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedSalesLogFindUniqueArgs>
  ): Promise<PrismaFinancedSalesLog | null> {
    return this.prisma.financedSalesLog.findUnique(args);
  }
  async createFinancedSalesLog<T extends Prisma.FinancedSalesLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedSalesLogCreateArgs>
  ): Promise<PrismaFinancedSalesLog> {
    return this.prisma.financedSalesLog.create<T>(args);
  }
  async updateFinancedSalesLog<T extends Prisma.FinancedSalesLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedSalesLogUpdateArgs>
  ): Promise<PrismaFinancedSalesLog> {
    return this.prisma.financedSalesLog.update<T>(args);
  }
  async deleteFinancedSalesLog<T extends Prisma.FinancedSalesLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedSalesLogDeleteArgs>
  ): Promise<PrismaFinancedSalesLog> {
    return this.prisma.financedSalesLog.delete(args);
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.financedSalesLog
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }
}
