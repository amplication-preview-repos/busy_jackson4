/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProtectionCert as PrismaProtectionCert,
  Customer as PrismaCustomer,
  FinancedSale as PrismaFinancedSale,
  UserModel as PrismaUserModel,
  Warehouse as PrismaWarehouse,
} from "@prisma/client";

export class ProtectionCertServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProtectionCertCountArgs, "select">
  ): Promise<number> {
    return this.prisma.protectionCert.count(args);
  }

  async protectionCerts<T extends Prisma.ProtectionCertFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProtectionCertFindManyArgs>
  ): Promise<PrismaProtectionCert[]> {
    return this.prisma.protectionCert.findMany<Prisma.ProtectionCertFindManyArgs>(
      args
    );
  }
  async protectionCert<T extends Prisma.ProtectionCertFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProtectionCertFindUniqueArgs>
  ): Promise<PrismaProtectionCert | null> {
    return this.prisma.protectionCert.findUnique(args);
  }
  async createProtectionCert<T extends Prisma.ProtectionCertCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProtectionCertCreateArgs>
  ): Promise<PrismaProtectionCert> {
    return this.prisma.protectionCert.create<T>(args);
  }
  async updateProtectionCert<T extends Prisma.ProtectionCertUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProtectionCertUpdateArgs>
  ): Promise<PrismaProtectionCert> {
    return this.prisma.protectionCert.update<T>(args);
  }
  async deleteProtectionCert<T extends Prisma.ProtectionCertDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProtectionCertDeleteArgs>
  ): Promise<PrismaProtectionCert> {
    return this.prisma.protectionCert.delete(args);
  }

  async getCustomers(parentId: number): Promise<PrismaCustomer | null> {
    return this.prisma.protectionCert
      .findUnique({
        where: { id: parentId },
      })
      .customers();
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.protectionCert
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }

  async getUsers(parentId: number): Promise<PrismaUserModel | null> {
    return this.prisma.protectionCert
      .findUnique({
        where: { id: parentId },
      })
      .users();
  }

  async getWarehouses(parentId: number): Promise<PrismaWarehouse | null> {
    return this.prisma.protectionCert
      .findUnique({
        where: { id: parentId },
      })
      .warehouses();
  }
}
