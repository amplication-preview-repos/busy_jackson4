/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FinancedAccessory as PrismaFinancedAccessory,
  FinancedSale as PrismaFinancedSale,
  Item as PrismaItem,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class FinancedAccessoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FinancedAccessoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.financedAccessory.count(args);
  }

  async financedAccessories<T extends Prisma.FinancedAccessoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedAccessoryFindManyArgs>
  ): Promise<PrismaFinancedAccessory[]> {
    return this.prisma.financedAccessory.findMany<Prisma.FinancedAccessoryFindManyArgs>(
      args
    );
  }
  async financedAccessory<T extends Prisma.FinancedAccessoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedAccessoryFindUniqueArgs>
  ): Promise<PrismaFinancedAccessory | null> {
    return this.prisma.financedAccessory.findUnique(args);
  }
  async createFinancedAccessory<T extends Prisma.FinancedAccessoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedAccessoryCreateArgs>
  ): Promise<PrismaFinancedAccessory> {
    return this.prisma.financedAccessory.create<T>(args);
  }
  async updateFinancedAccessory<T extends Prisma.FinancedAccessoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedAccessoryUpdateArgs>
  ): Promise<PrismaFinancedAccessory> {
    return this.prisma.financedAccessory.update<T>(args);
  }
  async deleteFinancedAccessory<T extends Prisma.FinancedAccessoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancedAccessoryDeleteArgs>
  ): Promise<PrismaFinancedAccessory> {
    return this.prisma.financedAccessory.delete(args);
  }

  async getFinancedSales(parentId: number): Promise<PrismaFinancedSale | null> {
    return this.prisma.financedAccessory
      .findUnique({
        where: { id: parentId },
      })
      .financedSales();
  }

  async getItems(parentId: number): Promise<PrismaItem | null> {
    return this.prisma.financedAccessory
      .findUnique({
        where: { id: parentId },
      })
      .items();
  }

  async getTransactions(parentId: number): Promise<PrismaTransaction | null> {
    return this.prisma.financedAccessory
      .findUnique({
        where: { id: parentId },
      })
      .transactions();
  }
}
